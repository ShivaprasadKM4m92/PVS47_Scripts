<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="139">
  <HTTPTask id="744" hostname="10.100.22.24:8181" path="/signal/assets/app/pvs/alerts_review/ad_hoc_alert_list-561cb7605ac1bd706db135f438a7625c.js" url="http://10.100.22.24:8181/signal/assets/app/pvs/alerts_review/ad_hoc_alert_list-561cb7605ac1bd706db135f438a7625c.js" ip="10.100.22.24" port="8181" connectionId="25" origin="Primary" frame="1" startDateTime="2020-05-22T19:37:42.059+05:30" startTime="119555031" endTime="119555921">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzgxLjAuNDA0NC4xMzggU2FmYXJpLzUzNy4zNg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC9hZEhvY0FsZXJ0L2luZGV4</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U0VTU0lPTj00OGMyNjliZC01NTcyLTRhN2UtYmFiOS0wZmNmY2NiZDM0NjU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL2FwcC9wdnMvYWxlcnRzX3Jldmlldy9hZF9ob2NfYWxlcnRfbGlzdC01NjFjYjc2MDVhYzFiZDcwNmRiMTM1ZjQzOGE3NjI1Yy5qcyBIVFRQLzEuMQ0KSG9zdDogMTAuMTAwLjIyLjI0OjgxODENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84MS4wLjQwNDQuMTM4IFNhZmFyaS81MzcuMzYNCkFjY2VwdDogKi8qDQpSZWZlcmVyOiBodHRwOi8vMTAuMTAwLjIyLjI0OjgxODEvc2lnbmFsL2FkSG9jQWxlcnQvaW5kZXgNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KQ29va2llOiBTRVNTSU9OPTQ4YzI2OWJkLTU1NzItNGE3ZS1iYWI5LTBmY2ZjY2JkMzQ2NQ0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="SESSION" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NDhjMjY5YmQtNTU3Mi00YTdlLWJhYjktMGZjZmNjYmQzNDY1</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>26418</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Last-Modified" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>VGh1LCAyMSBNYXkgMjAyMCAwODoxODowMCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="ETag" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ImFwcC9wdnMvYWxlcnRzX3Jldmlldy9hZF9ob2NfYWxlcnRfbGlzdC01NjFjYjc2MDVhYzFiZDcwNmRiMTM1ZjQzOGE3NjI1Yy5qcyI=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MjY0MTg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RnJpLCAyMiBNYXkgMjAyMCAxNDowMzowMCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVGh1LCAyMSBNYXkgMjAyMCAwODoxODowMCBHTVQNCkVUYWc6ICJhcHAvcHZzL2FsZXJ0c19yZXZpZXcvYWRfaG9jX2FsZXJ0X2xpc3QtNTYxY2I3NjA1YWMxYmQ3MDZkYjEzNWY0MzhhNzYyNWMuanMiDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNhY2hlLUNvbnRyb2w6IHB1YmxpYywgbWF4LWFnZT0zMTUzNjAwMA0KQ29udGVudC1FbmNvZGluZzogZ3ppcA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0O2NoYXJzZXQ9VVRGLTgNCkNvbnRlbnQtTGVuZ3RoOiAyNjQxOA0KRGF0ZTogRnJpLCAyMiBNYXkgMjAyMCAxNDowMzowMCBHTVQNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>dmFyIHNpZ25hbCA9IHNpZ25hbCB8fCB7fTsKCi8vIGEgY29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIHBhcnNpbmcgc3RyaW5nIG5hbWVzcGFjZXMgYW5kCi8vIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGluZyBuZXN0ZWQgbmFtZXNwYWNlcwpmdW5jdGlvbiBleHRlbmQoIG5zLCBuc19zdHJpbmcgKSB7CiAgICB2YXIgcGFydHMgPSBuc19zdHJpbmcuc3BsaXQoJy4nKSwKICAgICAgICBwYXJlbnQgPSBucywKICAgICAgICBwbCwgaTsKICAgIGlmIChwYXJ0c1swXSA9PSAic2lnbmFsIikgewogICAgICAgIHBhcnRzID0gcGFydHMuc2xpY2UoMSk7CiAgICB9CiAgICBwbCA9IHBhcnRzLmxlbmd0aDsKICAgIGZvciAoaSA9IDA7IGkgPCBwbDsgaSsrKSB7CiAgICAgICAgLy9jcmVhdGUgYSBwcm9wZXJ0eSBpZiBpdCBkb2VzbnQgZXhpc3QKICAgICAgICBpZiAodHlwZW9mIHBhcmVudFtwYXJ0c1tpXV0gPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgcGFyZW50W3BhcnRzW2ldXSA9IHt9OwogICAgICAgIH0KICAgICAgICBwYXJlbnQgPSBwYXJlbnRbcGFydHNbaV1dOwogICAgfQogICAgcmV0dXJuIHBhcmVudDsKfQoKLy9Qcm90b3R5cGUgbWV0aG9kcwpEYXRlLnByb3RvdHlwZS5hZGREYXlzID0gZnVuY3Rpb24oZGF5cykgewogICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7CiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBkYXlzKTsKICAgIHJldHVybiBkYXRlOwp9OwoKQXJyYXkucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKGYpe2YgIT0gdmFsdWV9KTsKfTsKClNDQV9XT1JLRkxPV19TVEFUVVNfRU5VTSA9IHsgTkVXOiAnTmV3JywKICAgIEFTU09DSUFURV9SRVZJRVdFRDogJ0Fzc29jaWF0ZVJldmlld2VkJywKICAgIFBIWVNJQ0lBTl9SRVZJRVdFRDogJ1BoeXNpY2lhblJldmlld2VkJywKICAgIFJFUVVJUkVEX0VWQUxVQVRJT046ICdSZXF1aXJlZEV2YWx1YXRpb24nLAogICAgQ09OVElOVUVEX01PTklUT1JJTkc6ICdDb250aW51ZWRNb25pdG9yaW5nJwp9OwoKU0NBX0RJU1BPU0lUSU9OX0VOVU0gPSB7CiAgICBWQUxJREFURURfU0lHTkFMIDogJ1ZhbGlkYXRlZFNpZ25hbCcsCiAgICBWQUxJREFURURfTk9OX0NPTkZJUk1FRF9TSUdOQUwgOiAnVmFsaWRhdGVkTm9uQ29uZmlybWVkU2lnbmFsJywKICAgIFZBTElEQVRFRF9VTkRFUl9JTlZFU1RJR0FUSU9OIDogJ1ZhbGlkYXRlZFVuZGVySW52ZXN0aWdhdGlvbicsCiAgICBDT01NVU5JQ0FURURfU0lHTkFMIDogJ0NvbW11bmljYXRlZFNpZ25hbCcsCiAgICBOT05fVkFMSUQ6ICdOb25WYWxpZCcKfTsKClNDQV9QUklPUklUWV9FTlVNID0gewogICAgSElHSDogIkhpZ2giLAogICAgTUVESVVNOiAiTWVkaXVtIiwKICAgIExPVzogIkxPVyIKfTsKCkRBVEVfRk1UX1RaID0gIllZWVktTU0tREQiOwoKc2lnbmFsLnV0aWxzID0gKGZ1bmN0aW9uKCkgewoKICAgIHZhciBzdGFja2VkID0gZnVuY3Rpb24odG9wVmFsdWUsIGJvdHRvbVZhbHVlKSB7CiAgICAgICAgdmFyIHRvcENvbXAgPSAiIjsKICAgICAgICB2YXIgYm90dG9tQ29tcCA9ICIiOwoKICAgICAgICBpZihfLmlzRnVuY3Rpb24odG9wVmFsdWUpKSB7CiAgICAgICAgICAgIHRvcENvbXAgPSB0b3BWYWx1ZSgpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdG9wQ29tcCA9ICc8ZGl2IGNsYXNzPSJzdGFja2VkLWNlbGwtY2VudGVyLXRvcCI+JyArIHRvcFZhbHVlICsgJzwvZGl2PicKICAgICAgICB9CgogICAgICAgIGlmIChfLmlzRnVuY3Rpb24oYm90dG9tVmFsdWUpKSB7CiAgICAgICAgICAgIGJvdHRvbUNvbXAgPSBib3R0b21WYWx1ZSgpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYm90dG9tQ29tcCA9ICc8ZGl2IGNsYXNzPSJzdGFja2VkLWNlbGwtY2VudGVyLWJvdHRvbSI+JyArIGJvdHRvbVZhbHVlICsgJzwvZGl2PicKICAgICAgICB9CgogICAgICAgIHJldHVybiB0b3BDb21wICsgYm90dG9tQ29tcAogICAgfTsKCiAgICAvLyBBbmQgdGhpcyBpcyB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgY3VzdG9tIGZ1bmN0aW9uIOKAiwogICAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uKHRtcGxfbmFtZSwgdG1wbF9kYXRhKSB7CgogICAgICAgIGlmICggIXJlbmRlci50bXBsX2NhY2hlICkgewoKCgogICAgICAgICAgICByZW5kZXIudG1wbF9jYWNoZSA9IHt9OwogICAgICAgIH0KICAgICAgICBpZiAoIXJlbmRlci50bXBsX2NhY2hlW3RtcGxfbmFtZV0pIHsKICAgICAgICAgICAgdmFyIHRtcGxfZGlyID0gJy9zaWduYWwvYXNzZXRzL2FwcC9wdnMvaGJzLXRlbXBsYXRlcyc7CiAgICAgICAgICAgIHZhciB0bXBsX3VybCA9IHRtcGxfZGlyICsgJy8nICsgdG1wbF9uYW1lICsgJy5oYnMnOwoKICAgICAgICAgICAgdmFyIHRtcGxfc3RyaW5nID0gIiI7CiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6IHRtcGxfdXJsLAogICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSwKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICB0bXBsX3N0cmluZyA9IGRhdGEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZW5kZXIudG1wbF9jYWNoZVt0bXBsX25hbWVdID0gSGFuZGxlYmFycy5jb21waWxlKHRtcGxfc3RyaW5nKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZW5kZXIudG1wbF9jYWNoZVt0bXBsX25hbWVdKHRtcGxfZGF0YSkKICAgIH07CgogICAgdmFyIGhic19wYXJ0aWFsID0gZnVuY3Rpb24odG1wbF9uYW1lKSB7CiAgICAgICAgaWYgKCFoYnNfcGFydGlhbC50bXBsX2NhY2hlKSB7CiAgICAgICAgICAgIGhic19wYXJ0aWFsLnRtcGxfY2FjaGUgPSB7fQogICAgICAgIH0KCiAgICAgICAgaWYgKCFoYnNfcGFydGlhbC50bXBsX2NhY2hlW3RtcGxfbmFtZV0pIHsKICAgICAgICAgICAgIHZhciB0bXBsX2RpciA9ICcvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL2hicy10ZW1wbGF0ZXMnOwogICAgICAgICAgICB2YXIgdG1wbF91cmwgPSB0bXBsX2RpciArICcvJyArIHRtcGxfbmFtZSArICcuaGJzJzsKCiAgICAgICAgICAgIHZhciB0bXBsX3N0cmluZyA9ICIiOwogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdXJsOiB0bXBsX3VybCwKICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgdG1wbF9zdHJpbmcgPSBkYXRhCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaGJzX3BhcnRpYWwudG1wbF9jYWNoZVt0bXBsX25hbWVdID0gdG1wbF9zdHJpbmcKICAgICAgICB9CgogICAgICAgIHJldHVybiBoYnNfcGFydGlhbC50bXBsX2NhY2hlW3RtcGxfbmFtZV0KICAgIH07CgogICAgdmFyIGNvbXBvc2VVcmwgPSBmdW5jdGlvbihjb250cm9sbGVyLCBhY3Rpb24sIHBhcmFtcykgewogICAgICAgIHZhciB1cmwgPSAiL3NpZ25hbC8iICsgY29udHJvbGxlciArICIvIiArIGFjdGlvbiArIChfLmlzTnVsbChwYXJhbXMpID8gJycgOiAnPycgKyBjb21wb3NlUGFyYW1zKHBhcmFtcykpOwoKICAgICAgICByZXR1cm4gdXJsCiAgICB9OwoKICAgIC8vVE9ETyA6IE5lZWQgdG8gY2hhbmdlIHRoaXMgdG8gaGFuZGxlYmFyIGZvcm0sIFdpbGwgYmUgZG9uZSBsYXRlcgogICAgdmFyIHBvc3RVcmwgPSBmdW5jdGlvbiAocGF0aCwgcGFyYW1zLCBuZXdXaW5kb3cpIHsKCiAgICAgICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTsKICAgICAgICBmb3JtLm1ldGhvZCA9ICJwb3N0IjsKICAgICAgICBmb3JtLmFjdGlvbiA9IHBhdGg7CiAgICAgICAgZm9ybS5lbmN0eXBlID0gImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCI7CiAgICAgICAgaWYgKG5ld1dpbmRvdykgZm9ybS50YXJnZXQgPSAiX2JsYW5rIjsKCiAgICAgICAgdmFyIHRva2VuID0gJCgibWV0YVtuYW1lPSdfY3NyZiddIikuYXR0cigiY29udGVudCIpOwogICAgICAgIHZhciBwYXJhbWV0ZXIgPSAkKCJtZXRhW25hbWU9J19jc3JmX3BhcmFtZXRlciddIikuYXR0cigiY29udGVudCIpOwogICAgICAgIHBhcmFtc1twYXJhbWV0ZXJdID0gdG9rZW47CiAgICAgICAgZm9yIChsZXQga2V5IGluIHBhcmFtcykgewogICAgICAgICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGhpZGRlbkZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKICAgICAgICAgICAgICAgIGhpZGRlbkZpZWxkLnR5cGUgPSAnaGlkZGVuJzsKICAgICAgICAgICAgICAgIGhpZGRlbkZpZWxkLm5hbWUgPSBrZXk7CiAgICAgICAgICAgICAgICBoaWRkZW5GaWVsZC52YWx1ZSA9IHBhcmFtc1trZXldOwogICAgICAgICAgICAgICAgZm9ybS5hcHBlbmRDaGlsZChoaWRkZW5GaWVsZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTsKICAgICAgICBmb3JtLnN1Ym1pdCgpOwogICAgfQoKICAgIHZhciBjb21wb3NlUGFyYW1zID0gZnVuY3Rpb24obykgewogICAgICAgIHJldHVybiBfLm1hcChfLnBhaXJzKG8pLCBmdW5jdGlvbihwKXtyZXR1cm4gcC5qb2luKCc9Jyl9ICkuam9pbignJicpCiAgICB9OwoKICAgIHZhciBjYXBpdGFsSXQgPSBmdW5jdGlvbihzKSB7CiAgICAgICAgcmV0dXJuIHMgJiYgc1swXS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKTsKICAgIH07CgogICAgdmFyIGJyZWFrSXQgPSBmdW5jdGlvbihzKSB7CiAgICAgICAgcmV0dXJuIHMgPyBzLnNwbGl0KC8oPz1bQS1aXSkvKS5qb2luKCcgJykgOiBzCiAgICB9OwoKICAgIHZhciBlbmFibGVfbG9hZF9idXR0b24gPSBmdW5jdGlvbihlbGUsIGVuYWJsZWQpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgICAgIHZhciB0YXJnZXRFbGUgPSBlbGUuZmluZCgnLmdseXBoaWNvbicpOwogICAgICAgICAgICBpZiAoZW5hYmxlZCkgewogICAgICAgICAgICAgICAgJCh0YXJnZXRFbGUpLmFkZENsYXNzKCdyZWZyZXNoLWFuaW1hdGUnKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQodGFyZ2V0RWxlKS5yZW1vdmVDbGFzcygncmVmcmVzaC1hbmltYXRlJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwogICAgdmFyIHNldEluTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24ocHJvcCwgZGF0YSkgewogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHByb3AsIGRhdGEpOwogICAgfTsKCiAgICB2YXIgZ2V0RnJvbUxvY2FsU3RvcmFnZSA9IGZ1bmN0aW9uKHByb3ApIHsKICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvcCk7CiAgICB9OwoKICAgIHZhciBzZXRKU09OSW5Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbihwcm9wLCBkYXRhKSB7CiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocHJvcCwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpOwogICAgfTsKCiAgICB2YXIgZ2V0SlNPTkZyb21Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiAocHJvcCkgewogICAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb3ApKTsKICAgIH07CgogICAgdmFyIGxvY2FsU3RvcmFnZVV0aWwgPSB7CiAgICAgICAgc2V0UHJvcCA6IHNldEluTG9jYWxTdG9yYWdlLAogICAgICAgIGdldFByb3AgOiBnZXRGcm9tTG9jYWxTdG9yYWdlLAogICAgICAgIHNldEpTT04gOiBzZXRKU09OSW5Mb2NhbFN0b3JhZ2UsCiAgICAgICAgZ2V0SlNPTiA6IGdldEpTT05Gcm9tTG9jYWxTdG9yYWdlCiAgICB9OwoKICAgIHZhciBnZXRRdWVyeVN0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBrZXkgPSBmYWxzZSwgcmVzID0ge30sIGl0bSA9IG51bGw7CiAgICAgICAgLy8gZ2V0IHRoZSBxdWVyeSBzdHJpbmcgd2l0aG91dCB0aGUgPwogICAgICAgIHZhciBxcyA9IGxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSk7CiAgICAgICAgLy8gY2hlY2sgZm9yIHRoZSBrZXkgYXMgYW4gYXJndW1lbnQKICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdLmxlbmd0aCA+IDEpCiAgICAgICAgICAgIGtleSA9IGFyZ3VtZW50c1swXTsKICAgICAgICAvLyBtYWtlIGEgcmVnZXggcGF0dGVybiB0byBncmFiIGtleS92YWx1ZQogICAgICAgIHZhciBwYXR0ZXJuID0gLyhbXiY9XSspPShbXiZdKikvZzsKICAgICAgICAvLyBsb29wIHRoZSBpdGVtcyBpbiB0aGUgcXVlcnkgc3RyaW5nLCBlaXRoZXIKICAgICAgICAvLyBmaW5kIGEgbWF0Y2ggdG8gdGhlIGFyZ3VtZW50LCBvciBidWlsZCBhbiBvYmplY3QKICAgICAgICAvLyB3aXRoIGtleS92YWx1ZSBwYWlycwogICAgICAgIHdoaWxlIChpdG0gPSBwYXR0ZXJuLmV4ZWMocXMpKSB7CiAgICAgICAgICAgIGlmIChrZXkgIT09IGZhbHNlICYmIGRlY29kZVVSSUNvbXBvbmVudChpdG1bMV0pID09PSBrZXkpCiAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGl0bVsyXSk7CiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gZmFsc2UpCiAgICAgICAgICAgICAgICByZXNbZGVjb2RlVVJJQ29tcG9uZW50KGl0bVsxXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KGl0bVsyXSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4ga2V5ID09PSBmYWxzZSA/IHJlcyA6IG51bGw7CiAgICB9OwoKICAgIHJldHVybiB7CiAgICAgICAgcmVuZGVyIDogcmVuZGVyLAogICAgICAgIHN0YWNrZWQ6IHN0YWNrZWQsCiAgICAgICAgY29tcG9zZVVybDogY29tcG9zZVVybCwKICAgICAgICBwb3N0VXJsOiBwb3N0VXJsLAogICAgICAgIGNvbXBvc2VQYXJhbXM6IGNvbXBvc2VQYXJhbXMsCiAgICAgICAgY2FwaXRhbEl0OiBjYXBpdGFsSXQsCiAgICAgICAgYnJlYWtJdDogYnJlYWtJdCwKICAgICAgICBoYnNfcGFydGlhbDogaGJzX3BhcnRpYWwsCiAgICAgICAgZW5hYmxlX2xvYWRfYnV0dG9uOiBlbmFibGVfbG9hZF9idXR0b24sCiAgICAgICAgbG9jYWxTdG9yYWdlVXRpbDogbG9jYWxTdG9yYWdlVXRpbCwKICAgICAgICBnZXRRdWVyeVN0cmluZzogZ2V0UXVlcnlTdHJpbmcKICAgIH0KfSkoKTsKCgoKSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaTE4bicsCiAgICBmdW5jdGlvbihzdHIpewogICAgICAgIHJldHVybiAoICh0eXBlb2YgaTE4bikgIT09ICd1bmRlZmluZWQnID8gc3RyIDogc3RyKQogICAgfQopOwoKSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignc2VsZWN0JywgZnVuY3Rpb24obmFtZSwgc2VsZWN0ZWRWYWx1ZSwgb3B0aW9ucywgZGlzcF9maWVsZCwgdmFsdWVfZmllbGQpIHsKICAgIHZhciBvdXQgPSAiPHNlbGVjdCBjbGFzcz0nZm9ybS1jb250cm9sIHNlbGVjdEJveCcgaWQ9XCciICsgbmFtZSArICJcJyBuYW1lPSIgKyBuYW1lICsgIj5cbiI7CiAgICBfLmVhY2gob3B0aW9ucywgZnVuY3Rpb24odikgewogICAgICAgIG91dCArPSAiPG9wdGlvbiB2YWx1ZT0nIiArIHZbdmFsdWVfZmllbGRdICsgIiciICsKICAgICAgICAgICAgKHZbdmFsdWVfZmllbGRdID09IHNlbGVjdGVkVmFsdWVbdmFsdWVfZmllbGRdID8gIiBzZWxlY3RlZCAiIDogIiIpICsgIiA+IiArCiAgICAgICAgICAgIGVzY2FwZUhUTUwodltkaXNwX2ZpZWxkXSkgKyAiPC9vcHRpb24+XG4iCiAgICB9KTsKICAgIG91dCArPSAiPC9zZWxlY3Q+IjsKCiAgICByZXR1cm4gbmV3IEhhbmRsZWJhcnMuU2FmZVN0cmluZyhvdXQpCn0pOwoKSGFuZGxlYmFycy5yZWdpc3RlclBhcnRpYWwoJ2RhdGVfcGlja2VyX3RlbXBsYXRlJywgc2lnbmFsLnV0aWxzLmhic19wYXJ0aWFsKCdkYXRlX3BpY2tlcl90ZW1wbGF0ZScpKTsKCi8vSGFuZGxlYmFyIGhlbHBlciB0byBpbWl0YXRlIHRoZSBpZiBjb25kaXRpb25zCkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2lmX2VxJywgZnVuY3Rpb24oYSwgYiwgb3B0cykgewogICAgaWYgKGEgPT0gYikgewogICAgICAgIHJldHVybiBvcHRzLmZuKHRoaXMpOwogICAgfQp9KTsKCi8vSGFuZGxlYmFyIGhlbHBlciB0byBpbWl0YXRlIHRoZSBpZi4uZWxzZSBjb25kaXRpb25zCkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2lmX2Vsc2VfZXEnLCBmdW5jdGlvbihhLCBiLCBvcHRzKSB7CiAgICBpZiAoYSA9PSBiKSB7CiAgICAgICAgcmV0dXJuIG9wdHMuZm4odGhpcyk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBvcHRzLmludmVyc2UodGhpcyk7CiAgICB9Cn0pOwoKSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaWZfdGFnX2V4aXN0JywgZnVuY3Rpb24oa2V5LCB2YWx1ZSx0YWdzLCBvcHRzKSB7CiAgICBpZih2YWx1ZS50YWdUZXh0ID09IHRhZ3Nba2V5LTFdLnRhZ1RleHQgJiYgdmFsdWUuc3ViVGFnVGV4dCE9bnVsbCAmJiB2YWx1ZS5zdWJUYWdUZXh0ICE9IHRhZ3Nba2V5LTFdLnN1YlRhZ1RleHQpewogICAgICAgIHJldHVybiBvcHRzLmZuKHRoaXMpOwogICAgfSBlbHNlewogICAgICAgIHJldHVybiBvcHRzLmludmVyc2UodGhpcyk7CiAgICB9Cn0pOwoKSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaWZfZWxzZV9uZXEnLCBmdW5jdGlvbihhLCBiLCBvcHRzKSB7CiAgICBpZiAoYSAhPSBiKSB7CiAgICAgICAgcmV0dXJuIG9wdHMuZm4odGhpcyk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBvcHRzLmludmVyc2UodGhpcyk7CiAgICB9Cn0pOwoKLy89IHJlcXVpcmUgYXBwL3B2cy9jb21tb24vcnhfaGFuZGxlYmFyX2V4dC5qcwoKdmFyIHNpZ25hbCA9IHNpZ25hbCB8fCB7fTsKCnNpZ25hbC5hbGVydHNfdXRpbHMgPSAoZnVuY3Rpb24oKSB7CiAgICB2YXIgcHJpb3JpdGllczsKICAgIHZhciB3b3JrZmxvd1N0YXRlczsKCiAgICB2YXIgZ2V0X3ByaW9yaXRpZXMgPSBmdW5jdGlvbigpIHsKICAgICAgICAkLmFqYXgoewogICAgICAgICAgICB1cmw6ICIvc2lnbmFsL3dvcmtmbG93L3ByaW9yaXRpZXMiLAogICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgICAgICAgICAgcHJpb3JpdGllcyA9IHJlc3VsdAogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiBwcmlvcml0aWVzCiAgICB9OwoKICAgIHZhciBnZXRfd29ya2Zsb3dTdGF0ZXMgPSBmdW5jdGlvbihpbml0RGF0YSkgewogICAgICAgICQuYWpheCh7CiAgICAgICAgICAgIHVybDogIi9zaWduYWwvd29ya2Zsb3cvd29ya2Zsb3dTdGF0ZSIsCiAgICAgICAgICAgIGFzeW5jOiBmYWxzZSwKICAgICAgICAgICAgZGF0YTogaW5pdERhdGEsCiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgICAgICAgICAgd29ya2Zsb3dTdGF0ZXMgPSByZXN1bHQKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gd29ya2Zsb3dTdGF0ZXMKICAgIH07CgogICAgdmFyIHByaW9yaXRpZXNfc2VsZWN0aW9ucyA9IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHJvdykgewogICAgICAgIHZhciBuZXdfc2VsZWN0ID0gJzxkaXY+PHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIGFkZC1jdXJzb3IiICcgKwogICAgICAgICAgICAnc3R5bGU9ImhlaWdodDogMzBweDsiIG9uY2hhbmdlPSJ1cGRhdGVQcmlvcml0eSh0aGlzLnZhbHVlLCcgKyByb3cuaWQgKyAnKSI+JzsKICAgICAgICB2YXIgcHJpb3JpdHkgPSByb3cucHJpb3JpdHk7CgogICAgICAgIHZhciB0aGVfc2VsZWN0ID0gXy5yZWR1Y2UocHJpb3JpdGllcywgZnVuY3Rpb24obSwgcCl7CiAgICAgICAgICAgIGlmIChwLnZhbHVlID09IHByaW9yaXR5KQogICAgICAgICAgICAgICAgcmV0dXJuIG0gKyAnPG9wdGlvbiB2YWx1ZT0iJyArIHAudmFsdWUgKyAnIiBzZWxlY3RlZD4gJyArIHAuZGlzcGxheU5hbWUgKyAnPC9vcHRpb24+JzsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcmV0dXJuIG0gKyAnPG9wdGlvbiB2YWx1ZT0iJyArIHAudmFsdWUgKyAnIj4nICsgcC5kaXNwbGF5TmFtZSArICc8L29wdGlvbj4nCiAgICAgICAgfSwgbmV3X3NlbGVjdCk7CiAgICAgICAgdGhlX3NlbGVjdCA9IHRoZV9zZWxlY3QgKyAnPC9zZWxlY3Q+PC9kaXY+JzsKICAgICAgICByZXR1cm4gdGhlX3NlbGVjdDsKICAgIH07CgogICAgdmFyIHdvcmtmbG93X3NlbGVjdGlvbnMgPSBmdW5jdGlvbihkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICB2YXIgbmV3X3NlbGVjdCA9ICc8ZGl2PjxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBhZGQtY3Vyc29yIiBzdHlsZT0iaGVpZ2h0OiAzMHB4OyIgb25jaGFuZ2U9InVwZGF0ZVN0YXR1cyh0aGlzLnZhbHVlLCcgKyByb3cuaWQgKyAnKSI+JzsKICAgICAgICB2YXIgd29ya2Zsb3dTdGF0ZSA9IHJvdy53b3JrZmxvd1N0YXRlOwoKICAgICAgICB2YXIgdGhlX3NlbGVjdCA9IF8ucmVkdWNlKHdvcmtmbG93U3RhdGVzLCBmdW5jdGlvbihtLCB3cyl7CiAgICAgICAgICAgIGlmICh3cy52YWx1ZSA9PSB3b3JrZmxvd1N0YXRlKQogICAgICAgICAgICAgICAgcmV0dXJuIG0gKyAnPG9wdGlvbiB2YWx1ZT0iJyArIHdzLnZhbHVlICsgJyIgc2VsZWN0ZWQ+ICcgKyB3cy5kaXNwbGF5TmFtZSArICc8L29wdGlvbj4nOwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZXR1cm4gbSArICc8b3B0aW9uIHZhbHVlPSInICsgd3MudmFsdWUgKyAnIj4nICsgd3MuZGlzcGxheU5hbWUgKyAnPC9vcHRpb24+JwogICAgICAgIH0sIG5ld19zZWxlY3QpOwogICAgICAgIHRoZV9zZWxlY3QgPSB0aGVfc2VsZWN0ICsgJzwvc2VsZWN0PjwvZGl2Pic7CiAgICAgICAgcmV0dXJuIHRoZV9zZWxlY3Q7CiAgICB9OwoKICAgIHZhciBjb21wb3NlX2VkaXRfc3RhdGVfbGluayA9IGZ1bmN0aW9uKHZhbHVlLCByb3dJZCwgZmlsZWROYW1lKSB7CiAgICAgICAgcmV0dXJuICI8c3Bhbj4iICsgdmFsdWUgKyAiPC9zcGFuPiIgKyAiPGEgaHJlZj0nIycgY2xhc3M9J2VkaXQtc3RhdGUnID4iICsKICAgICAgICAgICAgIjxpIGNsYXNzPSdmYSBmYS1zaGFyZS1hbHQgcHVsbC1yaWdodCcgZGF0YS1maWVsZD0nIiAgKyBmaWxlZE5hbWUgKwogICAgICAgICAgICAiJyBkYXRhLWlkPSciICsgcm93SWQgKyAiJy8+PC9hPiIKICAgIH07CgogICAgdmFyIHN0YXRlX2NoYW5nZWQgPSBmdW5jdGlvbihleHRyYV92YWx1ZXMpIHsKICAgICAgICAkKCIjdmFsdWVTZWxlY3QiKS5jaGFuZ2UoZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgICAgIHZhciBhdmFpbGFibGVfZXh0cmFfdmFsdWVzID0gZXh0cmFfdmFsdWVzWyQodmFsdWVTZWxlY3QpLnZhbCgpXQogICAgICAgIH0pCiAgICB9OwoKICAgIC8vVE9ETyB0aGlzIGlzIGEgdGVtcCBzb2x1dGlvbiBmb3IgdGhlIEpTT04gZm9ybWF0LiBJdCBzaG91bGQgY29tZSBmcm9tIHNlcnZlciBzaWRlCiAgICAvL0Z1bmN0aW9uIHRoYXQgY29udmVydHMgdGhlIGpzb24gaW5uZXJodG1sIHRvIHRoZSBjc3YgdmFsdWVzLgogICAgLy9JdCBjb252ZXJ0cyB0aGUgcHJvcGVydGllcyB3aGljaCBhcmUgbm90IGlkLgogICAgdmFyIHNob3dfanNvbl9hc19jc3YgPSBmdW5jdGlvbiAoZWxlbWVudENsYXNzKSB7CiAgICAgICAgJCgiLiIgKyBlbGVtZW50Q2xhc3MpLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgaWYgKGlzTmFOKCQodGhpcykuaHRtbCgpKSkgewogICAgICAgICAgICAgICAgICB2YXIgbW9kaWZpZWRWYWwgPSAiIjsKICAgICAgICAgICAgICAgICAgdmFyIGpzb25WYWwgPSBKU09OLnBhcnNlKCQodGhpcykuaHRtbCgpKTsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgb2JqIGluIGpzb25WYWwpIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25WYWwuaGFzT3duUHJvcGVydHkob2JqKSkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIGpzb25WYWxbb2JqXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblZhbFtvYmpdLmhhc093blByb3BlcnR5KHByb3ApKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wICE9ICdpZCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRWYWwgPSBtb2RpZmllZFZhbCArIGpzb25WYWxbb2JqXVtwcm9wXSArICIsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgJCh0aGlzKS5odG1sKG1vZGlmaWVkVmFsLnNsaWNlKDAsIC0xKSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgLy9EbyBub3RoaW5nCiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhlcnIpCiAgICAgICAgICAgfQogICAgICAgICAgICQodGhpcykuaHRtbCgpCiAgICAgICAgfSkKICAgIH07CgogICAgdmFyIGluaXRfbWF0Y2hlZF9hbGVydHNfdGFibGUgPSBmdW5jdGlvbih0YWJsZUVsZSwgdXJsKSB7CiAgICAgICAgdmFyIHRhYmxlID0gdGFibGVFbGUuRGF0YVRhYmxlKHsKICAgICAgICAgICAgImxhbmd1YWdlIjogewogICAgICAgICAgICAgICAgInVybCI6ICIvc2lnbmFsL2Fzc2V0cy9pMThuL2RhdGFUYWJsZXNfIiArIHVzZXJMb2NhbGUgKyAiLmpzb24iCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBhamF4OiB7CiAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgIGRhdGFTcmM6ICcnLAogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHhocixzdGF0dXMsZXJyb3Ipe30KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGFvQ29sdW1uczpbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbURhdGE6ICduYW1lJwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBtRGF0YTogJ3Byb2R1Y3RTZWxlY3Rpb24nCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG1EYXRhOiAndG9waWMnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG1EYXRhOiAnZGV0ZWN0ZWREYXRlJwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBtRGF0YTogJ2Rpc3Bvc2l0aW9uJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBkb206ICcnCiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiB0YWJsZQogICAgfTsKCiAgICB2YXIgZ2V0U2lnbmFsTmFtZUxpc3QgPSBmdW5jdGlvbihzaWduYWxzQW5kVG9waWNzKSB7CiAgICAgICAgdmFyIHNpZ25hbEFuZFRvcGljcyA9ICcnOwogICAgICAgICQuZWFjaChzaWduYWxzQW5kVG9waWNzLCBmdW5jdGlvbihpLCBvYmopewogICAgICAgICAgICB2YXIgdXJsID0gc2lnbmFsRGV0YWlsVXJsICsgJz9pZD0nICsgb2JqWydzaWduYWxJZCddOwogICAgICAgICAgICBzaWduYWxBbmRUb3BpY3MgPSBzaWduYWxBbmRUb3BpY3MgKyAnPHNwYW4gY2xhc3M9ImNsaWNrIj48YSBocmVmPSInICsgdXJsICsgJyI+JyArIG9ialsnbmFtZSddICsgJzwvYT48L3NwYW4+Jm5ic3A7JwogICAgICAgICAgICBzaWduYWxBbmRUb3BpY3MgPSBzaWduYWxBbmRUb3BpY3MgKyAiLCIKICAgICAgICB9KTsKICAgICAgICBpZihzaWduYWxBbmRUb3BpY3MubGVuZ3RoID4gMSkKICAgICAgICAgICAgcmV0dXJuICc8ZGl2PicgKyBzaWduYWxBbmRUb3BpY3Muc3Vic3RyaW5nKDAsIHNpZ25hbEFuZFRvcGljcy5sZW5ndGggLSAxKSArICc8L2Rpdj4nOwogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuICctJzsKICAgIH07CgogICAgLy8gRm9yIHNoYXJlZCB3aXRoIG1vZGFsCiAgICB2YXIgaW5pdGlhbGl6ZVNoYXJlV2l0aFNlbGVjdDIgPSBmdW5jdGlvbigpewogICAgICAgICQoJyNzaGFyZVdpdGgnKS5zZWxlY3QyKCkub24oImNoYW5nZSIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICQoJyNzaGFyZVdpdGgnKS5wYXJlbnQoKS5yZW1vdmVDbGFzcygnaGFzLWVycm9yJyk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBpbml0aWFsaXplU2hhcmVXaXRoVmFsdWVzID0gZnVuY3Rpb24oKXsKICAgICAgICAkKCcjc2hhcmVkV2l0aE1vZGFsJykub24oJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHZhciBleGVjdXRlZENvbmZpZ0lkID0gZS5yZWxhdGVkVGFyZ2V0LmlkOwogICAgICAgICAgICAkKCcjZXhlY3V0ZWRDb25maWdJZCcpLnZhbChleGVjdXRlZENvbmZpZ0lkKTsKICAgICAgICAgICAgJCgnI3NoYXJlZFdpdGgnKS5wYXJlbnQoKS5yZW1vdmVDbGFzcygnaGFzLWVycm9yJyk7CgogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlLAogICAgICAgICAgICAgICAgdHlwZTogJ0dFVCcsCiAgICAgICAgICAgICAgICB1cmw6IGdldFNoYXJlZFdpdGggKyAnP2lkPScgKyBleGVjdXRlZENvbmZpZ0lkLAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJzID0gJyc7CiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHJlc3VsdC51c2VycywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJzICs9IHRoaXMubmFtZSArICc8YnIgLz4nCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgJCgnI3NoYXJlZFdpdGhVc2VyTGlzdCcpLmh0bWwodXNlcnMpOwogICAgICAgICAgICAgICAgICAgIHZhciBncm91cHMgPSAnJzsKICAgICAgICAgICAgICAgICAgICAkLmVhY2gocmVzdWx0Lmdyb3VwcywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwcyArPSAgdGhpcy5uYW1lICsgJyA8YnIgLz4nCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgJCgnI3NoYXJlZFdpdGhHcm91cExpc3QnKS5odG1sKGdyb3Vwcyk7CgogICAgICAgICAgICAgICAgICAgICQuZWFjaChyZXN1bHQuYWxsLCBmdW5jdGlvbihpLCBkYXRhKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IG5ldyBPcHRpb24oZGF0YS5uYW1lLCBkYXRhLmlkLCB0cnVlLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3NoYXJlZFdpdGgnKS5hcHBlbmQob3B0aW9uKS50cmlnZ2VyKCdjaGFuZ2UnKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBzaGFyZWRXaXRoTW9kYWxTaG93ID0gdHJ1ZTsKCiAgICAgICAgfSkub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgc2hhcmVkV2l0aE1vZGFsU2hvdyA9IGZhbHNlOwogICAgICAgICAgICAkKCcjc2hhcmVkV2l0aCcpLnZhbChudWxsKS50cmlnZ2VyKCdjaGFuZ2UnKTsKICAgICAgICAgICAgJCgnI3NoYXJlZFdpdGgnKS5maW5kKCdvcHRpb24nKS5yZW1vdmUoKTsKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIGdldFRhZ3NFbGVtZW50ID0gZnVuY3Rpb24odGFncykgewogICAgICAgIHZhciB0YWdzRWxlbWVudCA9ICc8ZGl2IGNsYXNzPSJ0YWctY29udGFpbmVyIGJsb2NrLWVsbGlwc2lzIj48ZGl2IGNsYXNzPSJ0YWctbGVuZ3RoIj4nOwogICAgICAgIHZhciBnbG9iYWxUYWdzQXJyYXkgPSBbXTsKICAgICAgICB2YXIgYWxlcnRUYWdzcnJheSA9IFtdOwogICAgICAgIHZhciBwcml2YXRlVGFnc0FycmF5ID0gW107CiAgICAgICAgJC5lYWNoKHRhZ3MsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZS5wcml2YXRlVXNlciA9PSAnKFApJykgewogICAgICAgICAgICAgICAgcHJpdmF0ZVRhZ3NBcnJheS5wdXNoKHZhbHVlKQogICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLnRhZ1R5cGUgPT0gJyhBKScpIHsKICAgICAgICAgICAgICAgIGFsZXJ0VGFnc3JyYXkucHVzaCh2YWx1ZSkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGdsb2JhbFRhZ3NBcnJheS5wdXNoKHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0YWdzRWxlbWVudCArPSBzaWduYWwudXRpbHMucmVuZGVyKCd0YWdzX2RldGFpbHMnLCB7CiAgICAgICAgICAgICAgICBrZXk6IGtleSwKICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICAgICAgICAgIHRhZ3M6dGFncywKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIHZpZXdBbGxFbGVtZW50cyA9IGZldGNoVmlld0FsbFRhZ3MoZ2xvYmFsVGFnc0FycmF5ICwgYWxlcnRUYWdzcnJheSAsIHByaXZhdGVUYWdzQXJyYXkpOwoKICAgICAgICB0YWdzRWxlbWVudCArPSAnPGEgdGFiaW5kZXg9IjAiIHRpdGxlPSJBZGQvRWRpdCBDYXRlZ29yaWVzIiBjbGFzcz0iZWRpdEFsZXJ0VGFncyBidG4tZWRpdC10YWcgbWlkIj48aSBjbGFzcz0ibWRpIG1kaS1wZW5jaWwtYm94IGZvbnQtMjAgYmx1ZS0xIj4gPC9pPjwvYT4nOwogICAgICAgIHRhZ3NFbGVtZW50ICs9ICc8YSB0YWJpbmRleD0iMCIgdGl0bGU9IicgKyAkLmkxOG4uXygnYXBwTGFiZWwudmlld0FsbCcpICsgJyIgY2xhc3M9Imljby1kb3RzIHZpZXctYWxsIiBtb3JlLWRhdGE9Iicrdmlld0FsbEVsZW1lbnRzKyciPjxpIGNsYXNzPSJtZGkgbWRpLWRvdHMtaG9yaXpvbnRhbCBmb250LTIwIGJsdWUtMSI+IDwvaT48L2E+JzsKICAgICAgICB0YWdzRWxlbWVudCArPSAnPC9kaXY+PC9kaXY+JzsKICAgICAgICByZXR1cm4gdGFnc0VsZW1lbnQKICAgIH07CgogICAgdmFyIGZldGNoVmlld0FsbFRhZ3MgPSBmdW5jdGlvbihnbG9iYWxUYWdzQXJyYXkgLCBhbGVydFRhZ3NBcnJheSAsIHByaXZhdGVUYWdzQXJyYXkpIHsKICAgICAgICB2YXIgcmV0dXJuRWxlbWVudCA9ICIiOwogICAgICAgIGlmIChnbG9iYWxUYWdzQXJyYXkubGVuZ3RoID4gMCkgewogICAgICAgICAgICByZXR1cm5FbGVtZW50ID0gIjxwIGNsYXNzPSdwYnInIHN0eWxlPSdtYXJnaW4tdG9wOjdweCc+PGI+R2xvYmFsIENhdGVnb3J5PC9iPjxociBjbGFzcz0ndGFnZWhyJz4iOwogICAgICAgICAgICByZXR1cm5FbGVtZW50ICs9IHNpZ25hbC51dGlscy5yZW5kZXIoJ3RhZ3NfZGV0YWlsc192aWV3X2FsbCcsIHt0YWdzOiBnbG9iYWxUYWdzQXJyYXl9KSArICI8L3A+IiAgOwogICAgICAgIH0KICAgICAgICBpZiAoYWxlcnRUYWdzQXJyYXkubGVuZ3RoID4gMCkgewogICAgICAgICAgICByZXR1cm5FbGVtZW50ICs9ICI8cCBjbGFzcz0ncGJyJyBzdHlsZT0nbWFyZ2luLXRvcDo3cHgnPjxiPkFsZXJ0IFNwZWNpZmljIENhdGVnb3J5PC9iPjxociBjbGFzcz0ndGFnZWhyJz4iOwogICAgICAgICAgICByZXR1cm5FbGVtZW50ICs9IHNpZ25hbC51dGlscy5yZW5kZXIoJ3RhZ3NfZGV0YWlsc192aWV3X2FsbCcsIHsKICAgICAgICAgICAgICAgIHRhZ3M6IGFsZXJ0VGFnc0FycmF5LAogICAgICAgICAgICB9KSAgKyAiPC9wPiIgOwogICAgICAgIH0KICAgICAgICBpZiAocHJpdmF0ZVRhZ3NBcnJheS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHJldHVybkVsZW1lbnQgKz0gIjxwIGNsYXNzPSdwYnInIHN0eWxlPSdtYXJnaW4tdG9wOjdweCc+PGI+UHJpdmF0ZSBDYXRlZ29yeTwvYj48aHIgY2xhc3M9J3RhZ2Vocic+IjsKICAgICAgICAgICAgcmV0dXJuRWxlbWVudCArPSBzaWduYWwudXRpbHMucmVuZGVyKCd0YWdzX2RldGFpbHNfdmlld19hbGwnLCB7dGFnczogcHJpdmF0ZVRhZ3NBcnJheX0pICArICI8L3A+IiA7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXR1cm5FbGVtZW50CiAgICB9OwogICAgcmV0dXJuIHsKICAgICAgICBnZXRfcHJpb3JpdGllczogZ2V0X3ByaW9yaXRpZXMsCiAgICAgICAgcHJpb3JpdGllc19zZWxlY3Rpb25zOiBwcmlvcml0aWVzX3NlbGVjdGlvbnMsCiAgICAgICAgZ2V0X3dvcmtmbG93U3RhdGVzOiBnZXRfd29ya2Zsb3dTdGF0ZXMsCiAgICAgICAgd29ya2Zsb3dfc2VsZWN0aW9uczogd29ya2Zsb3dfc2VsZWN0aW9ucywKICAgICAgICBjb21wb3NlX2VkaXRfc3RhdGVfbGluazogY29tcG9zZV9lZGl0X3N0YXRlX2xpbmssCiAgICAgICAgc3RhdGVfY2hhbmdlOiBzdGF0ZV9jaGFuZ2VkLAogICAgICAgIHNob3dfanNvbl9hc19jc3Y6IHNob3dfanNvbl9hc19jc3YsCiAgICAgICAgaW5pdF9tYXRjaGVkX2FsZXJ0c190YWJsZTogaW5pdF9tYXRjaGVkX2FsZXJ0c190YWJsZSwKICAgICAgICBnZXRTaWduYWxOYW1lTGlzdDogZ2V0U2lnbmFsTmFtZUxpc3QsCiAgICAgICAgaW5pdGlhbGl6ZVNoYXJlV2l0aFNlbGVjdDIgOiBpbml0aWFsaXplU2hhcmVXaXRoU2VsZWN0MiwKICAgICAgICBpbml0aWFsaXplU2hhcmVXaXRoVmFsdWVzOmluaXRpYWxpemVTaGFyZVdpdGhWYWx1ZXMsCiAgICAgICAgZ2V0X3RhZ3NfZWxlbWVudCA6IGdldFRhZ3NFbGVtZW50CiAgICB9Cn0pKCk7Cgp2YXIgc2lnbmFsID0gc2lnbmFsIHx8IHt9OwoKc2lnbmFsLmxpc3RfdXRpbHMgPSAoZnVuY3Rpb24gKCkgewogICAgdmFyIGZsYWdfaXQgPSBmdW5jdGlvbiAoZmxhZywgaWQpIHsKICAgICAgICB2YXIgdGhlSHRtbCA9ICc8aSBjbGFzcz0iZmEgZmEtZmxhZy1vIHRleHQtbXV0ZWQgcngtbGlzdC1mbGFnIiBkYXRhLWlkPSInICsgaWQgKyAnIj48L2k+JwogICAgICAgIGlmIChmbGFnKSB7CiAgICAgICAgICAgIHRoZUh0bWwgPSAnPGkgY2xhc3M9ImZhIGZhLWZsYWcgdGV4dC1wcmltYXJ5IHJ4LWxpc3QtZmxhZyIgZGF0YS1pZD0iJyArIGlkICsgJyI+PC9pPicKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoZUh0bWwKICAgIH07CgogICAgdmFyIGZsYWdfaGFuZGxlciA9IGZ1bmN0aW9uIChjb250cm9sbGVyLCBhY3Rpb24pIHsKICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLnJ4LWxpc3QtZmxhZycsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHZhciBlbGUgPSBlLnRhcmdldDsKICAgICAgICAgICAgdmFyIGlkID0gJChlbGUpLmF0dHIoJ2RhdGEtaWQnKTsKCiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6ICIvc2lnbmFsLyIgKyBjb250cm9sbGVyICsgIi8iICsgYWN0aW9uICsgIj9pZD0iICsgaWQsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5mbGFnZ2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlKS5yZW1vdmVDbGFzcygnZmEtZmxhZy1vJykucmVtb3ZlQ2xhc3MoJ3RleHQtbXV0ZWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJChlbGUpLmFkZENsYXNzKCdmYS1mbGFnJykuYWRkQ2xhc3MoJ3RleHQtcHJpbWFyeScpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlKS5hZGRDbGFzcygnZmEtZmxhZy1vJykuYWRkQ2xhc3MoJ3RleHQtbXV0ZWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJChlbGUpLnJlbW92ZUNsYXNzKCdmYS1mbGFnJykucmVtb3ZlQ2xhc3MoJ3RleHQtcHJpbWFyeScpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgIH0pCiAgICB9OwoKICAgIHZhciBwcmlvcml0eV9saW5rID0gZnVuY3Rpb24gKHByaW9yaXR5LCBpZCkgewogICAgICAgIHZhciBpY29uX3VybCA9IGNvbXBvc2VfcHJpb3JpdHlfaWNvbihwcmlvcml0eSk7CiAgICAgICAgcmV0dXJuICc8YSBocmVmPSIjIiBjbGFzcz0iY2hhbmdlLXByaW9yaXR5Ij48aW1nIGRhdGEtZmllbGQ9InByaW9yaXR5IiBkYXRhLWluZm89InJvdyIgZGF0YS1pZD0iJyArCiAgICAgICAgICAgIGlkICsgJyIgZGF0YS12YWx1ZT0iJyArIHByaW9yaXR5ICsgJyIgc3JjPSInICsgaWNvbl91cmwgKyAnIi8+PC9hPicKICAgIH07CgogICAgdmFyIGNvbXBvc2VfcHJpb3JpdHlfaWNvbiA9IGZ1bmN0aW9uIChwcmlvcml0eSkgewogICAgICAgIHZhciBpY29uX3VybCA9ICIvc2lnbmFsL2Fzc2V0cy9pY29ucy9kZWZhdWx0X3ByaW9yaXR5LnBuZyI7CgogICAgICAgIGlmIChfLmNvbnRhaW5zKFsnaGlnaCcsICdsb3cnLCAnbWVkaXVtJ10sIHByaW9yaXR5LnRvTG93ZXJDYXNlKCkpKSB7CiAgICAgICAgICAgIGljb25fdXJsID0gIi9zaWduYWwvYXNzZXRzL2ljb25zLyIgKyBwcmlvcml0eS50b0xvd2VyQ2FzZSgpICsgIl9wcmlvcml0eS5wbmciOwogICAgICAgIH0KICAgICAgICByZXR1cm4gaWNvbl91cmw7CiAgICB9OwoKICAgIHZhciBjaGFuZ2VfcHJpb3JpdHkgPSBmdW5jdGlvbiAocHJpb3JpdHlFbGUsIHByaW9yaXR5KSB7CiAgICAgICAgdmFyIGljb25fdXJsID0gY29tcG9zZV9wcmlvcml0eV9pY29uKHByaW9yaXR5KTsKICAgICAgICAkKHByaW9yaXR5RWxlKS5hdHRyKCJzcmMiLCBpY29uX3VybCk7CiAgICAgICAgJChwcmlvcml0eUVsZSkuYXR0cigiZGF0YS12YWx1ZSIsIHByaW9yaXR5KTsKICAgIH07CgogICAgdmFyIGNoYW5nZV9wcmlvcml0eVRlc3QgPSBmdW5jdGlvbiAocHJpb3JpdHlFbGUsIHByaW9yaXR5KSB7CiAgICAgICAgJChwcmlvcml0eUVsZSkuYXR0cigiZGF0YS12YWx1ZSIsIHByaW9yaXR5KTsKICAgIH07CgogICAgY2hhbmdlX3ByaW9yaXR5VGVzdAoKICAgIHZhciBmaW5kX2ZpZWxkID0gZnVuY3Rpb24gKHRhYmxlX3Jvd19lbGUsIGF0dHJfbmFtZSkgewogICAgICAgIHJldHVybiAkKHRhYmxlX3Jvd19lbGUpLmZpbmQoIltkYXRhLWF0dHJpYnV0ZS1uYW1lPSciICsgYXR0cl9uYW1lICsgIiddIikKICAgIH07CgogICAgdmFyIHNldF92YWx1ZSA9IGZ1bmN0aW9uICh0YWJsZV9yb3dfZWxlLCBhdHRyX25hbWUsIGlkLCBkYXRhX2Z1biwgYXBwX25hbWUpIHsKICAgICAgICB2YXIgZWxlID0gZmluZF9maWVsZCh0YWJsZV9yb3dfZWxlLCBhdHRyX25hbWUpOwogICAgICAgIGVsZS5odG1sKGRhdGFfZnVuKGlkLCBhcHBfbmFtZSkpOwogICAgfTsKCiAgICB2YXIgZ2V0X2R1ZV9pbiA9IGZ1bmN0aW9uIChpZCwgYXBwX25hbWUpIHsKICAgICAgICB2YXIgZHVlSW4gPSAwOwogICAgICAgICQuYWpheCh7CiAgICAgICAgICAgIHVybDogIi9zaWduYWwvYWxlcnQvZHVlSW4/YWxlcnRJZD0iICsgaWQgKyAiJmFwcE5hbWU9IiArIGFwcF9uYW1lLAogICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICBkdWVJbiA9IGRhdGEucmVzdWx0OwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGR1ZUluCiAgICB9OwoKICAgIHZhciBkdWVfaW5fY29tcCA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIGlmICh2YWx1ZSA8PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAiPGRpdiBkYXRhLWF0dHJpYnV0ZS1uYW1lPSdkdWVJbicgc3R5bGUgPSAnY29sb3I6cmVkJz4iICsgdmFsdWUgKyAiPC9kaXY+IjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gIjxkaXYgZGF0YS1hdHRyaWJ1dGUtbmFtZT0nZHVlSW4nPiIgKyB2YWx1ZSArICI8L2Rpdj4iOwogICAgICAgIH0KICAgIH07CgogICAgdmFyIGFzc2lnbmVkX3RvX2NvbXAgPSBmdW5jdGlvbiAoaWQsIGFzc2lnbmVkVG8pIHsKICAgICAgICB2YXIgaHRtbCA9ICc8ZGl2IGNsYXNzPSJhc3NpZ25lZFRvQ29udGFpbmVyIj48c2VsZWN0IGNsYXNzPSJhc3NpZ25lZFRvU2VsZWN0IGZvcm0tY29udHJvbCBzZWxlY3QyIj48L3NlbGVjdD48aSBjbGFzcz0ibWRpIG1kaS1zcGluIG1kaS1sb2FkaW5nIGFzc2lnblRvUHJvY2Vzc2luZyIgc3R5bGU9ImRpc3BsYXk6IG5vbmUiPjwvaT48L2Rpdj4nOwogICAgICAgIHJldHVybiBodG1sCiAgICB9OwoKICAgIHZhciB0cnVuY2F0ZVRleHRBbmRTaG93VG9vbHRpcCA9IGZ1bmN0aW9uIChjdXRvZmYsIHdvcmRicmVhaywgZXNjYXBlSHRtbCkgewogICAgICAgIHZhciBlc2MgPSBmdW5jdGlvbiAodCkgewogICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JykKICAgICAgICAgICAgICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JykKICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JykKICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8iL2csICcmcXVvdDsnKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGQsIHR5cGUsIHJvdykgewogICAgICAgICAgICAvLyBPcmRlciwgc2VhcmNoIGFuZCB0eXBlIGdldCB0aGUgb3JpZ2luYWwgZGF0YQogICAgICAgICAgICBpZiAodHlwZSAhPT0gJ2Rpc3BsYXknKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHR5cGVvZiBkICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgZCAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIHJldHVybiBkOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkID0gZC50b1N0cmluZygpOyAvLyBjYXN0IG51bWJlcnMKCiAgICAgICAgICAgIGlmIChkLmxlbmd0aCA8PSBjdXRvZmYpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlc2MoZCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBzaG9ydGVuZWQgPSBkLnN1YnN0cigwLCBjdXRvZmYgLSAxKTsKCiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGxhc3Qgd2hpdGUgc3BhY2UgY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcKICAgICAgICAgICAgaWYgKHdvcmRicmVhaykgewogICAgICAgICAgICAgICAgc2hvcnRlbmVkID0gc2hvcnRlbmVkLnJlcGxhY2UoL1xzKFteXHNdKikkLywgJycpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgdW5jb250cm9sbGVkIEhUTUwgaW5wdXQKICAgICAgICAgICAgaWYgKGVzY2FwZUh0bWwpIHsKICAgICAgICAgICAgICAgIHNob3J0ZW5lZCA9IGVzYyhzaG9ydGVuZWQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPSJlbGxpcHNpcyIgdGl0bGU9IicgKyBlc2MoZCkgKyAnIj4nICsgc2hvcnRlbmVkICsgJyYjODIzMDs8L3NwYW4+JzsKICAgICAgICB9OwogICAgfTsKCiAgICB2YXIgYWRkX2ZpbHRlcnMgPSBmdW5jdGlvbiAodGFibGUsIGZpbHRlcnMsIGZpbHRlcl90b2dnbGVfYnRfY29udGFpbmVyKSB7CgogICAgICAgIHZhciB5YWRjZl9maWx0ZXJzID0gXy5maWx0ZXIoZmlsdGVycywgZnVuY3Rpb24gKGYpIHsKICAgICAgICAgICAgaWYgKGZbMV0gIT0gJ2N1c3RvbWl6ZWQnKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB2YXIgY3VzdF9maWx0ZXJzID0gXy5kaWZmZXJlbmNlKGZpbHRlcnMsIHlhZGNmX2ZpbHRlcnMpOwoKICAgICAgICB5YWRjZi5pbml0KHRhYmxlLCBfLm1hcCh5YWRjZl9maWx0ZXJzLCBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICBpZiAoaXRlbVsyXSA9PSB0cnVlKQogICAgICAgICAgICAgICAgcmV0dXJuIHtjb2x1bW5fbnVtYmVyOiBpdGVtWzBdLCBmaWx0ZXJfdHlwZTogaXRlbVsxXSwgZmlsdGVyX3Jlc2V0X2J1dHRvbl90ZXh0OiAneCd9OwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZXR1cm4ge2NvbHVtbl9udW1iZXI6IGl0ZW1bMF0sIGZpbHRlcl90eXBlOiBpdGVtWzFdLCBmaWx0ZXJfcmVzZXRfYnV0dG9uX3RleHQ6IGZhbHNlfTsKICAgICAgICB9KSk7CgogICAgICAgIGlmIChmaWx0ZXJfdG9nZ2xlX2J0X2NvbnRhaW5lcikgewogICAgICAgICAgICBhZGRfZmlsdGVyX3RvZ2dsZV9idXR0b24oJ2lkeHh4eHh4JywgZmlsdGVyX3RvZ2dsZV9idF9jb250YWluZXIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGN1c3RfZmlsdGVycykgewogICAgICAgICAgICBfLmVhY2goY3VzdF9maWx0ZXJzLCBmdW5jdGlvbiAoZikgewogICAgICAgICAgICAgICAgJCh0YWJsZS5jb2x1bW4oZlswXSkuaGVhZGVyKCkpLmFwcGVuZChjcmVhdGVfc3RhY2tlZF9maWx0ZXIoZlswXSkpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9OwoKICAgIHZhciBjcmVhdGVfc3RhY2tlZF9maWx0ZXIgPSBmdW5jdGlvbiAoaWR4KSB7CiAgICAgICAgcmV0dXJuICQoIjxpbnB1dCB0eXBlPSd0ZXh0JyBkYXRhLWluZGV4PSciICsgaWR4ICsgIicgY2xhc3M9J2NvbHVtbi1maWx0ZXInIHBsYWNlaG9sZGVyPSdUeXBlIHRvIGZpbHRlcic+IiArCiAgICAgICAgICAgICI8aW5wdXQgdHlwZT0ndGV4dCcgZGF0YS1pbmRleD0nIiArIGlkeCArICInIGNsYXNzPSdjb2x1bW4tZmlsdGVyJyBwbGFjZWhvbGRlcj0nVHlwZSB0byBmaWx0ZXInPiIpOwogICAgfTsKCiAgICB2YXIgYWRkX2ZpbHRlcl90b2dnbGVfYnV0dG9uID0gZnVuY3Rpb24gKHRhYmxlX2lkLCBjb250YWluZXIpIHsKICAgICAgICAkKCcueWFkY2YtZmlsdGVyLXdyYXBwZXIsIC5jb2x1bW4tZmlsdGVyJykuaGlkZSgpOwogICAgICAgICQoJy5jb2x1bW4tZmlsdGVyJykuY2xpY2soZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0pOwogICAgICAgICQoJy5jb2x1bW4tZmlsdGVyJykub24oJ2tleXVwJywgZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICAvLyBQZXJmb3JtIHNlYXJjaAogICAgICAgICAgICB2YXIgaW5kZXggPSAkKHRoaXMpLmRhdGEoJ2luZGV4Jyk7CiAgICAgICAgICAgICQodGFibGVfaWQpLkRhdGFUYWJsZSgpLmNvbHVtbihpbmRleCkuc2VhcmNoKCQodGhpcykudmFsKCkpLmRyYXcoKTsKICAgICAgICB9KTsKICAgICAgICB2YXIgZmlsdGVyVG9nZ2xlID0gIjxpIGNsYXNzPSd0YWJsZS1maWx0ZXItdG9nZ2xlIGdseXBoaWNvbiBnbHlwaGljb24tZmlsdGVyJyBkYXRhLXRhYmxlPSciICsgdGFibGVfaWQgKwogICAgICAgICAgICAiJyBvbmNsaWNrPSdzaWduYWwubGlzdF91dGlscy5oYW5kbGVfZmlsdGVyX3RvZ2dsZScgZGF0YS1zaG93LWZpbHRlcj0ndHJ1ZSc+PC9pPiI7CiAgICAgICAgdmFyIHRvZ2dsZV9idXR0b24gPSAkLnBhcnNlSFRNTChmaWx0ZXJUb2dnbGUpOwogICAgICAgIGlmICghKF8uaXNVbmRlZmluZWQoY29udGFpbmVyKSAmJiBfLmlzTnVsbChjb250YWluZXIpKSkgewogICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKHRvZ2dsZV9idXR0b24pOwogICAgICAgIH0KCiAgICAgICAgJChkb2N1bWVudCkub24oJ2ZpbHRlci10b2dnbGUtaW5pdCcsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgJCgnLnRhYmxlLWZpbHRlci10b2dnbGUnKS5jbGljayhmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgICAgICB2YXIgaGlkZV9zaG93X2ZpdGxlciA9IGZ1bmN0aW9uICh0YWJsZUlkLCBoaWRlT3JTaG93KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhpZGVPclNob3cgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQodGFibGVJZCArICdfd3JhcHBlciAueWFkY2YtZmlsdGVyLXdyYXBwZXIsLmNvbHVtbi1maWx0ZXInKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJCh0YWJsZUlkICsgJ193cmFwcGVyIC55YWRjZi1maWx0ZXItd3JhcHBlciwuY29sdW1uLWZpbHRlcicpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIHZhciB0YXJnZXRGaWx0ZXJUb2dnbGUgPSAkKGV2dC50YXJnZXQpOwogICAgICAgICAgICAgICAgdmFyIHRhYmxlSWQgPSB0YXJnZXRGaWx0ZXJUb2dnbGUuZGF0YSgndGFibGUnKTsKICAgICAgICAgICAgICAgIHZhciBzaG93RmlsdGVyID0gdGFyZ2V0RmlsdGVyVG9nZ2xlLmRhdGEoJ3Nob3ctZmlsdGVyJyk7CiAgICAgICAgICAgICAgICBpZiAoc2hvd0ZpbHRlciA9PT0gJ3RydWUnKSB7CiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsdGVyVG9nZ2xlLmRhdGEoJ3Nob3dGaWx0ZXInLCAnZmFsc2UnKTsKICAgICAgICAgICAgICAgICAgICBoaWRlX3Nob3dfZml0bGVyKHRhYmxlSWQsIGZhbHNlKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsdGVyVG9nZ2xlLmRhdGEoJ3Nob3dGaWx0ZXInLCAndHJ1ZScpOwogICAgICAgICAgICAgICAgICAgIGhpZGVfc2hvd19maXRsZXIodGFibGVJZCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgICAgICAkKGRvY3VtZW50KS50cmlnZ2VyKCdmaWx0ZXItdG9nZ2xlLWluaXQnKTsKICAgICAgICByZXR1cm4gJCh0b2dnbGVfYnV0dG9uKTsKICAgIH07CgogICAgdmFyIGhhbmRsZV9maWx0ZXJfdG9nZ2xlID0gZnVuY3Rpb24gKGV2dCkgewogICAgICAgICQodGhpcykuYXR0cigndGFyZ2V0LXRhYmxlJyk7CiAgICB9OwoKICAgIHJldHVybiB7CiAgICAgICAgZmxhZ19pdDogZmxhZ19pdCwKICAgICAgICBmbGFnX2hhbmRsZXI6IGZsYWdfaGFuZGxlciwKICAgICAgICBwcmlvcml0eV9saW5rOiBwcmlvcml0eV9saW5rLAogICAgICAgIGNoYW5nZV9wcmlvcml0eTogY2hhbmdlX3ByaW9yaXR5LAogICAgICAgIGZpbmRfZmllbGQ6IGZpbmRfZmllbGQsCiAgICAgICAgc2V0X3ZhbHVlOiBzZXRfdmFsdWUsCiAgICAgICAgZ2V0X2R1ZV9pbjogZ2V0X2R1ZV9pbiwKICAgICAgICBkdWVfaW5fY29tcDogZHVlX2luX2NvbXAsCiAgICAgICAgYXNzaWduZWRfdG9fY29tcDogYXNzaWduZWRfdG9fY29tcCwKICAgICAgICB0cnVuY2F0ZVRleHRBbmRTaG93VG9vbHRpcDogdHJ1bmNhdGVUZXh0QW5kU2hvd1Rvb2x0aXAsCiAgICAgICAgYWRkX2ZpbHRlcnM6IGFkZF9maWx0ZXJzLAogICAgICAgIGhhbmRsZV9maWx0ZXJfdG9nZ2xlOiBoYW5kbGVfZmlsdGVyX3RvZ2dsZSwKICAgICAgICBhZGRfZmlsdGVyX3RvZ2dsZV9idXR0b246IGFkZF9maWx0ZXJfdG9nZ2xlX2J1dHRvbgogICAgfQp9KSgpOwp2YXIgc2lnbmFsID0gc2lnbmFsIHx8IHt9CgpzaWduYWwuYWN0aXZpdGllc191dGlscyA9IChmdW5jdGlvbigpIHsKICAgIHZhciBhY3Rpdml0eV90YWJsZTsKICAgIHZhciBzb3J0aW5nQ291bnQgPSAzOwoKICAgIHZhciBpbml0X2FjdGl2aXRpZXNfdGFibGUgPSBmdW5jdGlvbih0YWJsZSwgdXJsLCBhcHBUeXBlKSB7CiAgICAgICAgdmFyIGNvbHVtbnMgPSBjcmVhdGVfYWN0aXZpdHlfY29sdW1uX2RhdGEoYXBwVHlwZSk7CiAgICAgICAgYWN0aXZpdHlfdGFibGUgPSAkKHRhYmxlKS5EYXRhVGFibGUoewogICAgICAgICAgICAic1BhZ2luYXRpb25UeXBlIjogImJvb3RzdHJhcCIsCgogICAgICAgICAgICAibGFuZ3VhZ2UiOiB7CiAgICAgICAgICAgICAgICAidXJsIjogIi4uL2Fzc2V0cy9pMThuL2RhdGFUYWJsZXNfIiArIHVzZXJMb2NhbGUgKyAiLmpzb24iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJhamF4IjogewogICAgICAgICAgICAgICAgInVybCI6IHVybCwKICAgICAgICAgICAgICAgICJkYXRhU3JjIjogIiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZm5EcmF3Q2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICQoJ2FbaHJlZj0iI2FjdGl2aXRpZXMiXScpLm9uKCJzaG93bi5icy50YWIiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICQoJyNhY3Rpdml0aWVzVGFibGUnKS5EYXRhVGFibGUoKS5hamF4LnVybChnZXRBY3Rpdml0eVVybCgpKS5sb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgYWRkR3JpZFNob3J0Y3V0cygnI2FjdGl2aXRpZXNUYWJsZScpOwogICAgICAgICAgICAgICAgICAgIHJlbW92ZUdyaWRTaG9ydGN1dHMoJyNhbGVydHNEZXRhaWxzVGFibGUnKTsKICAgICAgICAgICAgICAgICAgICByZW1vdmVHcmlkU2hvcnRjdXRzKCcjYXJjaGl2ZWRBbGVydHNUYWJsZScpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJhYVNvcnRpbmciOiBbW3NvcnRpbmdDb3VudCwgImRlc2MiXV0sCiAgICAgICAgICAgICJiTGVuZ3RoQ2hhbmdlIjogdHJ1ZSwKICAgICAgICAgICAgImlEaXNwbGF5TGVuZ3RoIjogMTAsCiAgICAgICAgICAgICJiQXV0b1dpZHRoIjogZmFsc2UsCiAgICAgICAgICAgICJhb0NvbHVtbnMiOiBjb2x1bW5zLAogICAgICAgICAgICAic2Nyb2xsWCI6IHRydWUsCiAgICAgICAgICAgICJzY3JvbGxZIjoiY2FsYygxMDB2aCAtIDMwMXB4KSIsCiAgICAgICAgICAgICJhdXRvV2lkdGgiOnRydWUsCiAgICAgICAgICAgIGNvbHVtbkRlZnM6IFt7CiAgICAgICAgICAgICAgICAidGFyZ2V0cyI6ICdfYWxsJywKICAgICAgICAgICAgICAgICJyZW5kZXIiOiAkLmZuLmRhdGFUYWJsZS5yZW5kZXIudGV4dCgpCiAgICAgICAgICAgIH1dCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGFjdGl2aXR5X3RhYmxlOwogICAgfTsKCiAgICB2YXIgY3JlYXRlX2FjdGl2aXR5X2NvbHVtbl9kYXRhID0gZnVuY3Rpb24oYXBwVHlwZSkgewogICAgICAgIHZhciBhb0NvbHVtbnMgPSBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJ0eXBlIiwKICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgcm93KSB7CiAgICAgICAgICAgICAgICAgICAgaWYocm93LnR5cGU9PSdQRUNEaXNzb2NpYXRlZCcpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1BFQyBEaXNzb2NpYXRlZCcKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYocm93LnR5cGU9PSdQRUNBc3NvY2lhdGVkJykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1BFQyBBc3NvY2lhdGVkJwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2lnbmFsLnV0aWxzLmJyZWFrSXQocm93LnR5cGUpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTE1MCcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm1EYXRhIjogImRldGFpbHMiLAogICAgICAgICAgICAgICAgIm1SZW5kZXIiOiBmdW5jdGlvbihkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICByb3cuZGV0YWlscyA9IHJvdy5kZXRhaWxzLnJlcGxhY2UoLzxicj4vZywnXG4nKQogICAgICAgICAgICAgICAgICAgIGlmIChyb3cuanVzdGlmaWNhdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIjxzcGFuIGNsYXNzPSd3b3JkLXdyYXAtYnJlYWstd29yZCc+Iitlc2NhcGVIVE1MKHJvdy5kZXRhaWxzKSArICIgLS0gd2l0aCBKdXN0aWZpY2F0aW9uICciICsgZXNjYXBlSFRNTChyb3cuanVzdGlmaWNhdGlvbikgKyAiJyIrIjwvc3Bhbj4iOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdGlvblRleHQgPSBwcm9jZXNzX2Rlc2NyaXB0aW9uKHJvdy5kZXRhaWxzKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICI8c3BhbiBjbGFzcz0nd29yZC13cmFwLWJyZWFrLXdvcmQgY2VsbC1icmVhayc+IitkZXNjcmlwdGlvblRleHQrIjwvc3Bhbj4iOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAnY2xhc3NOYW1lJzogJ2NvbC1taW4tMjAwIGNvbC1tYXgtMzAwJwogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAibURhdGEiOiAicGVyZm9ybWVkQnkiLAogICAgICAgICAgICAgICAgIm1SZW5kZXIiOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93KSB7CiAgICAgICAgICAgICAgICAgICAgaWYocm93LnBlcmZvcm1lZEJ5RGVwdCAmJiByb3cucGVyZm9ybWVkQnlEZXB0ICE9ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlc2NhcGVIVE1MKHJvdy5wZXJmb3JtZWRCeSArICIgKCIgKyByb3cucGVyZm9ybWVkQnlEZXB0ICsgIikiKQogICAgICAgICAgICAgICAgICAgIH0gZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdy5wZXJmb3JtZWRCeQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAnY2xhc3NOYW1lJzogJ2NvbC1taW4tMTUwJwogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAibURhdGEiOiAidGltZXN0YW1wIiwKICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgZnVsbCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhCgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICdjbGFzc05hbWUnOiAnY29sLW1pbi0xNTAnCiAgICAgICAgICAgIH0KICAgICAgICBdOwogICAgICAgIGlmKGFwcFR5cGUgPT0gJ1NpbmdsZSBDYXNlIEFsZXJ0JykgewogICAgICAgICAgICBhb0NvbHVtbnMuc3BsaWNlKDAsMCx7CiAgICAgICAgICAgICAgICAibURhdGEiOiAiY2FzZU51bWJlciIsCiAgICAgICAgICAgICAgICAnY2xhc3NOYW1lJzogJ2NvbC1taW4tMTAwJwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgYW9Db2x1bW5zLnNwbGljZSgyLDAsewogICAgICAgICAgICAgICAgIm1EYXRhIjogInN1c3BlY3QiLAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTIwMCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoMywwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJldmVudE5hbWUiLAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTE1MCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoNSwwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJjdXJyZW50QXNzaWdubWVudCIsCiAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgY3VyckFzc2lnbm1lbnQKICAgICAgICAgICAgICAgICAgICBpZiAocm93LmN1cnJlbnRBc3NpZ25tZW50RGVwdCAmJiByb3cuY3VycmVudEFzc2lnbm1lbnREZXB0ICE9ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJBc3NpZ25tZW50ID0gcm93LmN1cnJlbnRBc3NpZ25tZW50ICsgIiAoIiArIHJvdy5jdXJyZW50QXNzaWdubWVudERlcHQgKyAiKSIKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBjdXJyQXNzaWdubWVudCA9IChyb3cuY3VycmVudEFzc2lnbm1lbnQpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBlc2NhcGVIVE1MKGN1cnJBc3NpZ25tZW50KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICdjbGFzc05hbWUnOiAnY29sLW1pbi0xNTAnCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzb3J0aW5nQ291bnQgPSA3CiAgICAgICAgfWVsc2UgaWYoYXBwVHlwZSA9PSAnTGl0ZXJhdHVyZSBTZWFyY2ggQWxlcnQnKSB7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoMCwwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJhcnRpY2xlSWQiLAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTEwMCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoMiwwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJzZWFyY2hTdHJpbmciLAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTEwMCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoMywwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJwcm9kdWN0TmFtZSIsCiAgICAgICAgICAgICAgICAnY2xhc3NOYW1lJzogJ2NvbC1taW4tMjAwJwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgYW9Db2x1bW5zLnNwbGljZSg0LDAsewogICAgICAgICAgICAgICAgIm1EYXRhIjogImV2ZW50TmFtZSIsCiAgICAgICAgICAgICAgICAnY2xhc3NOYW1lJzogJ2NvbC1taW4tMTUwJwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgYW9Db2x1bW5zLnNwbGljZSg2LDAsewogICAgICAgICAgICAgICAgIm1EYXRhIjogImN1cnJlbnRBc3NpZ25tZW50IiwKICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdykgewogICAgICAgICAgICAgICAgICAgIHZhciBjdXJyQXNzaWdubWVudAogICAgICAgICAgICAgICAgICAgIGlmIChyb3cuY3VycmVudEFzc2lnbm1lbnREZXB0ICYmIHJvdy5jdXJyZW50QXNzaWdubWVudERlcHQgIT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3VyckFzc2lnbm1lbnQgPSByb3cuY3VycmVudEFzc2lnbm1lbnQgKyAiICgiICsgcm93LmN1cnJlbnRBc3NpZ25tZW50RGVwdCArICIpIgogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJBc3NpZ25tZW50ID0gKHJvdy5jdXJyZW50QXNzaWdubWVudCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVzY2FwZUhUTUwoY3VyckFzc2lnbm1lbnQpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTE1MCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHNvcnRpbmdDb3VudCA9IDgKICAgICAgICB9IGVsc2UgaWYgKGFwcFR5cGUgPT0gJ0FnZ3JlZ2F0ZSBDYXNlIEFsZXJ0JyB8fCBhcHBUeXBlID09ICdFVkRBUyBBbGVydCcpIHsKICAgICAgICAgICAgYW9Db2x1bW5zLnNwbGljZSgxLDAsewogICAgICAgICAgICAgICAgIm1EYXRhIjogInN1c3BlY3QiLAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTE1MCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoMiwwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJldmVudE5hbWUiLAogICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdjb2wtbWluLTE1MCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFvQ29sdW1ucy5zcGxpY2UoNCwwLHsKICAgICAgICAgICAgICAgICJtRGF0YSI6ICJjdXJyZW50QXNzaWdubWVudCIsCiAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgY3VyckFzc2lnbm1lbnQKICAgICAgICAgICAgICAgICAgICBpZiAocm93LmN1cnJlbnRBc3NpZ25tZW50RGVwdCAmJiByb3cuY3VycmVudEFzc2lnbm1lbnREZXB0ICE9ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJBc3NpZ25tZW50ID0gcm93LmN1cnJlbnRBc3NpZ25tZW50ICsgIiAoIiArIHJvdy5jdXJyZW50QXNzaWdubWVudERlcHQgKyAiKSIKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBjdXJyQXNzaWdubWVudCA9IChyb3cuY3VycmVudEFzc2lnbm1lbnQpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBlc2NhcGVIVE1MKGN1cnJBc3NpZ25tZW50KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICdjbGFzc05hbWUnOiAnY29sLW1pbi0xNTAnCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzb3J0aW5nQ291bnQgPSA2CiAgICAgICAgfQogICAgICAgIHJldHVybiBhb0NvbHVtbnMKICAgIH07CgogICAgdmFyIHJlbG9hZF9hY3Rpdml0eV90YWJsZSA9IGZ1bmN0aW9uKCkgewoKICAgICAgICBpZiAodHlwZW9mIGFjdGl2aXR5X3RhYmxlICE9ICJ1bmRlZmluZWQiICYmIGFjdGl2aXR5X3RhYmxlICE9IG51bGwpIHsKICAgICAgICAgICAgYWN0aXZpdHlfdGFibGUuYWpheC5yZWxvYWQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLmxvZygiVW5hYmxlIHRvIHJlbG9hZCB0aGUgYWN0aXZpdHkgdGFibGUuIFBsZWFzZSByZWZyZXNoIHRoZSBwYWdlLiIpCiAgICAgICAgfQoKICAgIH07CgogICAgdmFyIHByb2Nlc3NfZGVzY3JpcHRpb24gPSBmdW5jdGlvbihkZXNjcmlwdGlvblN0cikgewogICAgICAgIGlmICh0eXBlb2YgZGVzY3JpcHRpb25TdHIgIT0gInVuZGVmaW5lZCIgJiYgZGVzY3JpcHRpb25TdHIgIT0gbnVsbCkgewogICAgICAgICAgICB2YXIgZGVzY3JpcHRpb25zID0gZGVzY3JpcHRpb25TdHIuc3BsaXQoJ3wnKTsKICAgICAgICAgICAgLy92YXIgZm9ybWF0dGVkU3RyaW5nID0gJycKICAgICAgICAgICAgdmFyIGZvcm1hdHRlZFN0cmluZyA9ICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleDxkZXNjcmlwdGlvbnMubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbnNbaW5kZXhdOwogICAgICAgICAgICAgICAgdmFyIGRlc2NTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICAgICAgZGVzY1NwYW4uaW5uZXJIVE1MID0gZXNjYXBlSFRNTChkZXNjcmlwdGlvbik7CiAgICAgICAgICAgICAgICBkZXNjU3Bhbi5pbm5lckhUTUwgPSBkZXNjU3Bhbi5pbm5lckhUTUwucmVwbGFjZSgvXG4vZywgJzxicj4nKQogICAgICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nLmFwcGVuZENoaWxkKGRlc2NTcGFuKTsKICAgICAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVkU3RyaW5nLmlubmVySFRNTDsKICAgICAgICB9CiAgICB9OwoKICAgIHJldHVybiB7CiAgICAgICAgaW5pdF9hY3Rpdml0aWVzX3RhYmxlIDogaW5pdF9hY3Rpdml0aWVzX3RhYmxlLAogICAgICAgIHByb2Nlc3NfZGVzY3JpcHRpb24gOiBwcm9jZXNzX2Rlc2NyaXB0aW9uLAogICAgICAgIHJlbG9hZF9hY3Rpdml0eV90YWJsZSA6IHJlbG9hZF9hY3Rpdml0eV90YWJsZQogICAgfQp9KSgpOwoKZnVuY3Rpb24gZ2V0QWN0aXZpdHlVcmwoKSB7CiAgICBpZiAoYXBwbGljYXRpb25OYW1lID09PSBBTEVSVF9DT05GSUdfVFlQRS5MSVRFUkFUVVJFX1NFQVJDSF9BTEVSVCkgewogICAgICAgIHJldHVybiBhbGVydEFjdGl2aXRpZXM7CiAgICB9IGVsc2UgaWYgKGFwcGxpY2F0aW9uTmFtZSA9PT0gQUxFUlRfQ09ORklHX1RZUEUuU0lHTkFMX01BTkFHRU1FTlQpIHsKICAgICAgICByZXR1cm4gYWN0aXZpdHlVcmw7CiAgICB9CiAgICByZXR1cm4gYWxlcnRBY3Rpdml0aWVzVXJsICsgJz9leGVjdXRlZElkTGlzdD0nICsgZXhlY3V0ZWRJZExpc3QgKyAiJmFwcFR5cGU9IiArIGFwcGxpY2F0aW9uTmFtZQoKfQoKCnZhciBzaG93VG9waWNXaWRnZXQgPSBmdW5jdGlvbiAoKSB7CiAgICAkKCIjdG9waWMiKS5zZWxlY3QyKHsKICAgICAgICB0YWdzOiB0cnVlLAogICAgICAgIHBsYWNlaG9sZGVyOiAiU2VsZWN0IHRvcGljIiwKICAgICAgICBhbGxvd0NsZWFyOiB0cnVlLAogICAgICAgIHdpZHRoOiAiMTAwJSIsCiAgICAgICAgY3JlYXRlVGFnOiBmdW5jdGlvbiAocGFyYW1zKSB7CiAgICAgICAgICAgIHZhciB0ZXJtID0gJC50cmltKHBhcmFtcy50ZXJtKTsKICAgICAgICAgICAgaWYgKHRlcm0gIT0gIiIpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IHRlcm0sCiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGVybQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgfQogICAgfSk7Cn07Ci8vPSByZXF1aXJlIGFwcC9wdnMvY29tbW9uL3J4X2NvbW1vbi5qcwovLz0gcmVxdWlyZSBhcHAvcHZzL2NvbW1vbi9yeF9saXN0X3V0aWxzLmpzCi8vPSByZXF1aXJlIGFwcC9wdnMvY29tbW9uL3J4X2hhbmRsZWJhcl9leHQuanMKLy89IHJlcXVpcmUgYXBwL3B2cy90b3BpYy9hdHRhY2hBbGVydFRvVG9waWMuanMKCnZhciBzaWduYWwgPSBzaWduYWwgfHwge307Cgp2YXIgdG9waWNEYXRhOwp2YXIgY29sdW1uU2VxOwp2YXIgaXNWaWV3SW5zdGFuY2UgPSAxOwp2YXIgc2lnbmFsQWxlcnRUeXBlID0gewogICAgU0lOR0xFX0NBU0VfQUxFUlQ6ICJTaW5nbGUgQ2FzZSBBbGVydCIsCiAgICBBR0dSRUdBVEVfQUxFUlQ6ICJBZ2dyZWdhdGUgQ2FzZSBBbGVydCIsCiAgICBFVkRBU19BTEVSVDogIkV2ZGFzIEFsZXJ0IiwKICAgIEFESE9DX0FMRVJUOiAiQWQtSG9jIEFsZXJ0IiwKICAgIExJVEVSQVRVUkVfU0VBUkNIX0FMRVJUOiAiTGl0ZXJhdHVyZSBTZWFyY2ggQWxlcnQiCn0KCnNpZ25hbC5hbGVydFJldmlldyA9IChmdW5jdGlvbiAoKSB7CgogICAgdmFyIGlkcyA9IFtdOwogICAgdmFyIHJvd3MgPSBbXTsKCiAgICB2YXIgYXBwbHlCdXNpbmVzc1J1bGVzID0gZnVuY3Rpb24gKHJvdywgZGF0YSkgewogICAgICAgIC8vQXBwbHkgdGhlIGV1ZHJhIHJ1bGVzLgogICAgICAgIGlmIChkYXRhLmZvcm1hdCkgewogICAgICAgICAgICB2YXIgb2JqID0gSlNPTi5wYXJzZShkYXRhLmZvcm1hdCk7CiAgICAgICAgICAgIHZhciB0ZXh0T2JqOwogICAgICAgICAgICAkLmVhY2gob2JqLnRleHQudGMsIGZ1bmN0aW9uIChpbmRleCwgZGF0YSkgewogICAgICAgICAgICAgICAgdGV4dE9iaiA9ICQocm93KS5maW5kKCcuJyArIGRhdGEpOwogICAgICAgICAgICAgICAgdGV4dE9iai5jc3MoJ2NvbG9yJywgb2JqLnRleHQuY29sb3IpOwogICAgICAgICAgICAgICAgaWYgKG9iai50ZXh0LmJvbGQpIHsKICAgICAgICAgICAgICAgICAgICB0ZXh0T2JqLmNzcygnZm9udC13ZWlnaHQnLCAnOTAwJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAob2JqLnRleHQuaXRhbGljKSB7CiAgICAgICAgICAgICAgICAgICAgdGV4dE9iai5jc3MoJ2ZvbnQtc3R5bGUnLCAnaXRhbGljJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAob2JqLnRleHQudW5kZXJsaW5lKSB7CiAgICAgICAgICAgICAgICAgICAgdGV4dE9iai5jc3MoJ3RleHQtZGVjb3JhdGlvbicsICd1bmRlcmxpbmUnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICQuZWFjaChvYmouY2VsbC50YywgZnVuY3Rpb24gKGluZGV4LCBkYXRhKSB7CiAgICAgICAgICAgICAgICAkKHJvdykuZmluZCgnLicgKyBkYXRhKS5wYXJlbnRzKCd0ZCcpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIG9iai5jZWxsLmNvbG9yKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfTsKCiAgICB2YXIgZW5hYmxlTWVudVRvb2x0aXBzID0gZnVuY3Rpb24gKCkgewogICAgICAgICQoIi5ncmlkLW1lbnUtdG9vbHRpcCIpLm1vdXNlb3ZlcihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7CiAgICAgICAgICAgIHZhciB0b29sdGlwVGV4dCA9ICR0aGlzLmF0dHIoImRhdGEtdGl0bGUiKTsKICAgICAgICAgICAgJHRoaXMudG9vbHRpcCh7CiAgICAgICAgICAgICAgICB0aXRsZTogdG9vbHRpcFRleHQsCiAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6ICJib3R0b20iCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkdGhpcy50b29sdGlwKCdzaG93Jyk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBkaXNhYmxlVG9vbHRpcHMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJCgiLm1kaS1hbHBoYS1kLWJveCwgLm1kaS1maWx0ZXItb3V0bGluZSwgLm1kaS10cmVuZGluZy11cCwgLm1kaS1jb250ZW50LXNhdmUsIC5tZGktZXhwb3J0LCAubWRpLXNldHRpbmdzLCBtZGktcGx1cy1ib3gsIG1kaS1jaGFydC1iYXIiKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICQoIi50b29sdGlwIikuaGlkZSgpOwogICAgICAgIH0pOwogICAgfTsKCiAgICB2YXIgc29ydEljb25IYW5kbGVyID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciB0aEFycmF5ID0gJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLkRhdGFUYWJsZSgpLmNvbHVtbnMoKS5oZWFkZXIoKTsKICAgICAgICBpZiAoaXNWaWV3SW5zdGFuY2UpIHsKICAgICAgICAgICAgdmFyIGNvbHVtbk5hbWU7CiAgICAgICAgICAgIHZhciBpbmRleE9mQ29sdW1uID0gMDsKICAgICAgICAgICAgY29sdW1uU2VxLmV2ZXJ5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBzZXEgPSBjb2x1bW5TZXFbaW5kZXhPZkNvbHVtbl0uc2VxOwogICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IHNlcSkgewogICAgICAgICAgICAgICAgICAgIGNvbHVtbk5hbWUgPSBjb2x1bW5TZXFbaW5kZXhPZkNvbHVtbl0ubmFtZTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpbmRleE9mQ29sdW1uKys7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBjb2x1bW5JbmRleCA9ICQoJyNhbGVydHNEZXRhaWxzVGFibGUnKS5maW5kKCJ0aFtkYXRhLWZpZWxkPSIgKyBjb2x1bW5OYW1lICsgIl0iKS5hdHRyKCdkYXRhLWNvbHVtbi1pbmRleCcpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbHVtbkluZGV4ID0gaW5kZXg7CiAgICAgICAgfQogICAgICAgICQuZWFjaCh0aEFycmF5LCBmdW5jdGlvbiAoY3VycmVudEluZGV4LCBlbGVtZW50KSB7CiAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnc29ydGluZ19hc2MnKSkgewogICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzb3J0aW5nX2FzYycpOwogICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCJzb3J0aW5nIik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3NvcnRpbmdfZGVzYycpKSB7CiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3NvcnRpbmdfZGVzYycpOwogICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCJzb3J0aW5nIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PSBjb2x1bW5JbmRleCAmJiAhZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3NvcnRpbmdfZGlzYWJsZWQnKSkgewogICAgICAgICAgICAgICAgaWYgKGRpciA9PSAnYXNjJykgewogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc29ydGluZycpOwogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgic29ydGluZ19hc2MiKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGlyID09ICdkZXNjJykgewogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc29ydGluZycpOwogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgic29ydGluZ19kZXNjIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH07CgogICAgLyoqCiAgICAgKiBUaGUgcmVzZXQgbW9kYWwgc2NyZWVuIGZ1bmN0aW9uIHdoaWNoIHJlc2V0cyB0aGUgcGFzc3dvcmQgZGl2IGluIHRoZSB3b3JrZmxvdyBtb2RhbCBzY3JlZW4uCiAgICAgKiBUaGlzIGlzIGludGVybmFsIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBpbnRlcm5hbGx5IGluIHRoaXMgb2JqZWN0IHNjb3BlLgogICAgICovCiAgICB2YXIgcmVzZXRNb2RhbFNjcmVlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAvL0NsZWFuIHVwIHRoZSB0aGUgZGlzcG9zaXRpb25zIGZpZWxkcy4KICAgICAgICAkKCcjZWRpdC1zdGF0ZS1tb2RhbCcpLmZpbmQoJyNleHRyYS12YWx1ZS1zZWxlY3QnKS5odG1sKCI8b3B0aW9uPjwvb3B0aW9uPiIpOwogICAgICAgIC8vSGlkZSB0aGUgcGFzc3dvcmQKICAgICAgICAkKCcjZWRpdC1zdGF0ZS1tb2RhbCcpLmZpbmQoJyNwYXNzd29yZERpdicpLmFkZENsYXNzKCdoaWRlJyk7CiAgICAgICAgJCgnI2VkaXQtc3RhdGUtbW9kYWwnKS5maW5kKCcjaXNQYXNzd29yZEVuYWJsZWQnKS52YWwoMCk7CiAgICB9CgogICAgdmFyIHNob3dQYXNzd29yZEZpZWxkID0gZnVuY3Rpb24gKCkgewogICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsJykuZmluZCgnI3Bhc3N3b3JkRGl2JykucmVtb3ZlQ2xhc3MoJ2hpZGUnKTsKICAgICAgICAkKCcjZWRpdC1zdGF0ZS1tb2RhbCcpLmZpbmQoJyNpc1Bhc3N3b3JkRW5hYmxlZCcpLnZhbCgxKTsKICAgIH0KCiAgICB2YXIgY2hhbmdlV29ya2Zsb3dFZGl0U2NyZWVuID0gZnVuY3Rpb24gKGF2YWlsYWJsZVZhbHVlcywgdGFyZ2V0VmFsKSB7CgogICAgICAgIHZhciBhdmFpbGFibGVWYWxPYmogPSBfLmZpbmRXaGVyZShhdmFpbGFibGVWYWx1ZXMsIHt2YWx1ZTogdGFyZ2V0VmFsfSk7CgogICAgICAgIGlmICh0eXBlb2YgYXZhaWxhYmxlVmFsT2JqICE9ICd1bmRlZmluZWQnICYmIGF2YWlsYWJsZVZhbE9iaikgewogICAgICAgICAgICBpZiAoYXZhaWxhYmxlVmFsT2JqLmFwcHJvdmFsUmVxdWlyZWQpIHsKICAgICAgICAgICAgICAgIHNob3dQYXNzd29yZEZpZWxkKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXNldE1vZGFsU2NyZWVuKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vQ2xlYW4gdXAgdGhlIHRoZSBkaXNwb3NpdGlvbnMgZmllbGRzCiAgICAgICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsJykuZmluZCgnI2V4dHJhLXZhbHVlLXNlbGVjdCcpLmh0bWwoJycpCgogICAgICAgICAgICAvL0ZpbGwgdXAgdGhlIGRpc3Bvc2l0aW9ucyBpbiB0aGUgY29tYm8KICAgICAgICAgICAgJCgnI2VkaXQtc3RhdGUtbW9kYWwnKS5maW5kKCcjZXh0cmEtdmFsdWUtc2VsZWN0JykuaHRtbChnZXREaXNwb3NpdGlvbk9wdGlvbnMoYXZhaWxhYmxlVmFsT2JqKSkKICAgICAgICB9CiAgICB9CgogICAgdmFyIGdldERpc3Bvc2l0aW9uT3B0aW9ucyA9IGZ1bmN0aW9uIChhdmFpbGFibGVWYWxPYmopIHsKICAgICAgICB2YXIgZGlzcG9zaXRpb25TdHIgPSAiPG9wdGlvbj48L29wdGlvbj4iOwogICAgICAgIF8uZWFjaChhdmFpbGFibGVWYWxPYmouZGlzcG9zaXRpb25zLCBmdW5jdGlvbiAoZGlzcG9zaXRpb24pIHsKICAgICAgICAgICAgZGlzcG9zaXRpb25TdHIgPSBkaXNwb3NpdGlvblN0ciArCiAgICAgICAgICAgICAgICAiPG9wdGlvbiB2YWx1ZT1cIiIgKyBkaXNwb3NpdGlvbi52YWx1ZSArICJcIj4iICsgZGlzcG9zaXRpb24uZGlzcGxheU5hbWUgKyAiPC9vcHRpb24+IgogICAgICAgIH0pCiAgICAgICAgcmV0dXJuIGRpc3Bvc2l0aW9uU3RyCiAgICB9CgogICAgdmFyIGF1dGhlbnRpY2F0ZVVzZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHJldHVyblZhbCA9IGZhbHNlCiAgICAgICAgdmFyIHBhc3N3b3JkSnNvbiA9IHsKICAgICAgICAgICAgInBhc3N3b3JkIjogJCgnI2VkaXQtc3RhdGUtbW9kYWwnKS5maW5kKCcjcGFzc3dvcmRBdXRoZW50aWNhdGlvbicpLnZhbCgpCiAgICAgICAgfQoKICAgICAgICB2YXIgYXV0aFVybCA9ICcvc2lnbmFsL3VzZXIvYXV0aGVudGljYXRlJwoKICAgICAgICAkLmFqYXgoewogICAgICAgICAgICB1cmw6IGF1dGhVcmwsCiAgICAgICAgICAgIGRhdGE6IHBhc3N3b3JkSnNvbiwKICAgICAgICAgICAgYXN5bmM6IGZhbHNlLAogICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmF1dGhvcml6ZWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSB0cnVlCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IGZhbHNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSBmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHJldHVyblZhbAogICAgfQoKICAgIHZhciB0b2dnbGVFcnJvck5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHsKICAgICAgICBpZiAoYWN0aW9uID09ICdoaWRlJykgewogICAgICAgICAgICAkKCcjZWRpdC1zdGF0ZS1tb2RhbCAuZXJyb3JOb3RpZmljYXRpb24nKS5hZGRDbGFzcygnaGlkZScpOwogICAgICAgICAgICAkKCcjZWRpdC1zdGF0ZS1tb2RhbCcpLmZpbmQoJy5lcnJvck1lc3NhZ2UnKS5odG1sKCcnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkKCcjZWRpdC1zdGF0ZS1tb2RhbCAuZXJyb3JOb3RpZmljYXRpb24nKS5yZW1vdmVDbGFzcygnaGlkZScpCiAgICAgICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsJykuZmluZCgnLmVycm9yTWVzc2FnZScpLmh0bWwoJyBBdXRoZW50aWNhdGlvbiBGYWlsZWQhJyk7CiAgICAgICAgfQogICAgfTsKCiAgICB2YXIgb3BlbkNhc2VIaXN0b3J5TW9kYWwgPSBmdW5jdGlvbiAoKSB7CgogICAgICAgIC8vQmluZCB0aGUgY2xpY2sgZXZlbnQgb24gdGhlIGNhc2UgaGlzdG9yeSBpY29uLgogICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuY2FzZS1oaXN0b3J5LWljb24nLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgdmFyIHBhcmVudF9yb3cgPSAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgndHInKTsKICAgICAgICAgICAgdmFyIHNlbGVjdGVkUm93SW5kZXggPSAkKHRoaXMpLmNsb3Nlc3QoJ3RyJykuaW5kZXgoKTsKICAgICAgICAgICAgaWYgKGlzQWJzdHJhY3RWaWV3T3JDYXNlVmlldyhzZWxlY3RlZFJvd0luZGV4KSkgewogICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dJbmRleCA9IHNlbGVjdGVkUm93SW5kZXggLyAyCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGlzU2lnbmFsID0gJCh0aGlzKS5kYXRhKCdzaWduYWwnKTsKCiAgICAgICAgICAgIHZhciByb3dPYmplY3QgPSB7fTsKICAgICAgICAgICAgaWYgKCFpc1NpZ25hbCkgewogICAgICAgICAgICAgICAgcm93T2JqZWN0ID0gdGFibGUucm93cyhzZWxlY3RlZFJvd0luZGV4KS5kYXRhKClbMF07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByb3dPYmplY3QgPSB0YWJsZVNpbmdsZVJldmlldy5yb3coJCh0aGlzKS5wYXJlbnRzKCd0cicpKS5kYXRhKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGNhc2VOdW1iZXIgPSByb3dPYmplY3QuY2FzZU51bWJlcjsKICAgICAgICAgICAgdmFyIHByb2R1Y3RGYW1pbHkgPSByb3dPYmplY3QucHJvZHVjdEZhbWlseTsKICAgICAgICAgICAgdmFyIGNhc2VWZXJzaW9uID0gcm93T2JqZWN0LmNhc2VWZXJzaW9uOwogICAgICAgICAgICB2YXIgcHJvZHVjdE5hbWUgPSByb3dPYmplY3QucHJvZHVjdE5hbWU7CiAgICAgICAgICAgIHZhciBwdCA9IHJvd09iamVjdC5wcmltYXJ5RXZlbnQ7CiAgICAgICAgICAgIHZhciBhbGVydENvbmZpZ0lkID0gcm93T2JqZWN0LmFsZXJ0Q29uZmlnSWQ7CgogICAgICAgICAgICB2YXIgY2FzZUhpc3RvcnlNb2RhbCA9ICQoJyNjYXNlSGlzdG9yeU1vZGFsJyk7CiAgICAgICAgICAgIGNhc2VIaXN0b3J5TW9kYWwuZmluZCgiI2Nhc2VOdW1iZXIiKS5odG1sKGNhc2VOdW1iZXIpOwogICAgICAgICAgICBjYXNlSGlzdG9yeU1vZGFsLmZpbmQoIiNwcm9kdWN0RmFtaWx5IikuaHRtbChwcm9kdWN0RmFtaWx5KTsKICAgICAgICAgICAgY2FzZUhpc3RvcnlNb2RhbC5maW5kKCIjY2FzZVZlcnNpb24iKS52YWwoY2FzZVZlcnNpb24pOwogICAgICAgICAgICBjYXNlSGlzdG9yeU1vZGFsLmZpbmQoIiNwcm9kdWN0TmFtZSIpLnZhbChwcm9kdWN0TmFtZSk7CiAgICAgICAgICAgIGNhc2VIaXN0b3J5TW9kYWwuZmluZCgiI2FsZXJ0Q29uZmlnSWQiKS52YWwoYWxlcnRDb25maWdJZCk7CiAgICAgICAgICAgIGNhc2VIaXN0b3J5TW9kYWwuZmluZCgiI3B0IikudmFsKHB0KTsKICAgICAgICAgICAgY2FzZUhpc3RvcnlNb2RhbC5tb2RhbCgnc2hvdycpOwoKICAgICAgICAgICAgaWYodHlwZW9mIHNpbmdsZUNhc2VVcGRhdGVKdXN0aWZpY2F0aW9uVXJsICE9ICd1bmRlZmluZWQnKQogICAgICAgICAgICAgICAgdXBkYXRlSnVzdGlmaWNhdGlvblVybCA9IHNpbmdsZUNhc2VVcGRhdGVKdXN0aWZpY2F0aW9uVXJsOwoKICAgICAgICAgICAgc2lnbmFsLmNhc2VIaXN0b3J5VGFibGUuaW5pdF9jYXNlX2hpc3RvcnlfdGFibGUoY2FzZUhpc3RvcnlVcmwpOwogICAgICAgICAgICBzaWduYWwuY2FzZUhpc3RvcnlUYWJsZS5pbml0X2Nhc2VfaGlzdG9yeV90YWJsZV9zdXNwZWN0KGNhc2VIaXN0b3J5U3VzcGVjdFVybCk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBvcGVuQWxlcnRDb21tZW50TW9kYWwgPSBmdW5jdGlvbiAoYWxlcnRUeXBlLCBhcHBsaWNhdGlvbk5hbWUpIHsKCiAgICAgICAgLy9Nb2RhbCBvYmplY3QKICAgICAgICB2YXIgY29tbWVudE1vZGFsID0gJCgnI2NvbW1lbnRNb2RhbCcpOwogICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuY29tbWVudC1pY29uJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7CiAgICAgICAgICAgIHZhciBkYXRhSW5mbzsKICAgICAgICAgICAgdmFyIGlzQ2FzZURldGFpbDsKICAgICAgICAgICAgdmFyIGFwcFR5cGU7CiAgICAgICAgICAgIHZhciB2YWxpZGF0ZWRTaWduYWxJZDsKICAgICAgICAgICAgdmFyIGNvbW1lbnRBbGVydFR5cGUgPSAkKCR0aGlzKS5kYXRhKCduYW1lJyk7CiAgICAgICAgICAgIHZhciBpc1NpZ25hbCA9ICQoJHRoaXMpLmRhdGEoJ3NpZ25hbCcpOwoKICAgICAgICAgICAgaWYgKGNvbW1lbnRBbGVydFR5cGUgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgYWxlcnRUeXBlID0gY29tbWVudEFsZXJ0VHlwZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB2YXIgY2FzZUpzb25BcnJheSA9IFtdOwogICAgICAgICAgICBkYXRhSW5mbyA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKCdkYXRhLWluZm8nKTsKICAgICAgICAgICAgaXNDYXNlRGV0YWlsID0gJChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtY29tbWVudCcpOwoKICAgICAgICAgICAgYXBwVHlwZSA9ICQoIiNhcHBsaWNhdGlvbiIpLmh0bWwoKTsKICAgICAgICAgICAgaWYgKGFwcFR5cGUgPT09ICcnKSB7CiAgICAgICAgICAgICAgICBhcHBUeXBlID0gY29tbWVudE1vZGFsLmZpbmQoIiNhcHBsaWNhdGlvbiIpLmh0bWwoKTsKICAgICAgICAgICAgICAgIHZhbGlkYXRlZFNpZ25hbElkID0gY29tbWVudE1vZGFsLmZpbmQoIiN2YWxpZGF0ZWRTaWduYWxJZCIpLmh0bWwoKQogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgc2VsZWN0ZWRSb3dDb3VudDsKICAgICAgICAgICAgaWYgKCQoJyNkZXRhaWxlZC12aWV3LWNoZWNrYm94JykuaXMoJzpjaGVja2VkJykpIHsKICAgICAgICAgICAgICAgIHNlbGVjdGVkUm93Q291bnQgPSAkKCd0YWJsZSNhbGVydHNEZXRhaWxzVGFibGUgLmNvcHktc2VsZWN0OmNoZWNrZWQnKS5sZW5ndGg7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzZWxlY3RlZFJvd0NvdW50ID0gJCgndGFibGUuRFRGQ19DbG9uZWQgLmNvcHktc2VsZWN0OmNoZWNrZWQnKS5sZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHNlbGVjdGVkUm93Q291bnQgPiAxICYmICQoJHRoaXMpLmNsb3Nlc3QoJ3RyJykuZmluZCgiLmNvcHktc2VsZWN0IikucHJvcCgiY2hlY2tlZCIpKSB7CiAgICAgICAgICAgICAgICB2YXIgdGV4dFRvRGlzcGxheTsKICAgICAgICAgICAgICAgIHN3aXRjaCAoYXBwbGljYXRpb25OYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnU2luZ2xlIENhc2UgQWxlcnQnOgogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0VG9EaXNwbGF5ID0gJ0Nhc2UnOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICdBZ2dyZWdhdGUgQ2FzZSBBbGVydCc6CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRUb0Rpc3BsYXkgPSAnUEVDJzsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRVZEQVMgQWxlcnQnOgogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0VG9EaXNwbGF5ID0gJ1BFQyc7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgJ0xpdGVyYXR1cmUgU2VhcmNoIEFsZXJ0JzoKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFRvRGlzcGxheSA9ICdBcnRpY2xlJzsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkKGNvbW1lbnRNb2RhbCkuZmluZCgnZGl2LmJ1bGtPcHRpb25zU2VjdGlvbicpLnNob3coKTsKICAgICAgICAgICAgICAgICQoY29tbWVudE1vZGFsKS5maW5kKCdkaXYuYnVsa09wdGlvbnNTZWN0aW9uIHNwYW4uYWxlcnRUeXBlVGV4dCcpLmh0bWwodGV4dFRvRGlzcGxheSk7CiAgICAgICAgICAgICAgICAkKGNvbW1lbnRNb2RhbCkuZmluZCgnZGl2LmJ1bGtPcHRpb25zU2VjdGlvbiBzcGFuLmNvdW50JykuaHRtbChzZWxlY3RlZFJvd0NvdW50KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoY29tbWVudE1vZGFsKS5maW5kKCdkaXYuYnVsa09wdGlvbnNTZWN0aW9uJykuaGlkZSgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkKCdkaXYuYnVsa09wdGlvbnNTZWN0aW9uIGlucHV0W25hbWU9YnVsa09wdGlvbnNdJykudW5iaW5kKCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoJCh0aGlzKS52YWwoKSkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FsbFNlbGVjdGVkJzoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZUpzb25BcnJheSA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBpbml0aWF0ZVNpbmdsZUJ1bGtSb3dDb21tZW50UHJvY2VzcyhjYXNlSnNvbkFycmF5LCBjb21tZW50TW9kYWwsIGFsZXJ0VHlwZSwgaXNDYXNlRGV0YWlsLCBpc1NpZ25hbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRBZGRDb21tZW50cyhjb21tZW50TW9kYWwsIGNhc2VKc29uQXJyYXksICJidWxrIiwgYWxlcnRUeXBlLCB2YWxpZGF0ZWRTaWduYWxJZCwgaXNDYXNlRGV0YWlsKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnY3VycmVudCc6CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2VKc29uQXJyYXkgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhdGVTaW5nbGVSb3dDb21tZW50UHJvY2VzcygkdGhpcywgY2FzZUpzb25BcnJheSwgY29tbWVudE1vZGFsLCBhbGVydFR5cGUsIGlzQ2FzZURldGFpbCwgaXNTaWduYWwpOwogICAgICAgICAgICAgICAgICAgICAgICBiaW5kQWRkQ29tbWVudHMoY29tbWVudE1vZGFsLCBjYXNlSnNvbkFycmF5LCAicm93IiwgYWxlcnRUeXBlLCB2YWxpZGF0ZWRTaWduYWxJZCwgaXNDYXNlRGV0YWlsKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaWYgKGRhdGFJbmZvID09PSAicm93IikgewogICAgICAgICAgICAgICAgaW5pdGlhdGVTaW5nbGVSb3dDb21tZW50UHJvY2VzcygkdGhpcywgY2FzZUpzb25BcnJheSwgY29tbWVudE1vZGFsLCBhbGVydFR5cGUsIGlzQ2FzZURldGFpbCwgaXNTaWduYWwpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb21tZW50TW9kYWwubW9kYWwoJ3Nob3cnKTsKICAgICAgICAgICAgYmluZEFkZENvbW1lbnRzKGNvbW1lbnRNb2RhbCwgY2FzZUpzb25BcnJheSwgZGF0YUluZm8sIGFsZXJ0VHlwZSwgdmFsaWRhdGVkU2lnbmFsSWQsIGlzQ2FzZURldGFpbCwgJHRoaXMpCiAgICAgICAgfSkKICAgIH07CgogICAgdmFyIGJpbmRBZGRDb21tZW50cyA9IGZ1bmN0aW9uIChjb21tZW50TW9kYWwsIGNhc2VKc29uQXJyYXksIGRhdGFJbmZvLCBhbGVydFR5cGUsIHZhbGlkYXRlZFNpZ25hbElkLCBpc0Nhc2VEZXRhaWwsIGN1cnJlbnRSb3cpIHsKICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiLmFkZC1jb21tZW50cyIpLnVuYmluZCgpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGNhc2VKc29uOwogICAgICAgICAgICB2YXIgY2FzZUpzb25PYmo7CiAgICAgICAgICAgIHZhciBkYXRhOwogICAgICAgICAgICB2YXIgdXJsOwogICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzOwogICAgICAgICAgICB2YXIgY2FzZUpzb25PYmpBcnJheSA9IFtdOwogICAgICAgICAgICBpZiAoZGF0YUluZm8gPT09ICJyb3ciKSB7CiAgICAgICAgICAgICAgICBjYXNlSnNvbiA9IGNhc2VKc29uQXJyYXlbMF07CgogICAgICAgICAgICAgICAgaWYgKGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudElkIikudmFsKCkpIHsKICAgICAgICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICAiYWxlcnRUeXBlIjogYWxlcnRUeXBlLAogICAgICAgICAgICAgICAgICAgICAgICAiY29tbWVudCI6IGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudGJveCIpLnZhbCgpLAogICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRJZCIpLnZhbCgpLAogICAgICAgICAgICAgICAgICAgICAgICAidmFsaWRhdGVkU2lnbmFsSWQiOiB2YWxpZGF0ZWRTaWduYWxJZCwKICAgICAgICAgICAgICAgICAgICAgICAgInRvcGljSWQiOiAkKCIjdG9waWNJZCIpLmh0bWwoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImV4ZWN1dGVkQ29uZmlnSWQiOiBjYXNlSnNvbi5leGVjdXRlZENvbmZpZ0lkLAogICAgICAgICAgICAgICAgICAgICAgICAiYWRob2NBbGVydElkIjogY2FzZUpzb24uYWRob2NBbGVydElkLAogICAgICAgICAgICAgICAgICAgICAgICAiY29uZmlnSWQiOiBjYXNlSnNvbi5jb25maWdJZCwKICAgICAgICAgICAgICAgICAgICAgICAgImxpdGVyYXR1cmVBbGVydElkIjogY2FzZUpzb24ubGl0ZXJhdHVyZUFsZXJ0SWQKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuY29tbWVudD09IiIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gIi9zaWduYWwvYWxlcnRDb21tZW50L2RlbGV0ZUNvbW1lbnQiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gIi9zaWduYWwvYWxlcnRDb21tZW50L3VwZGF0ZUNvbW1lbnQiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdXJsID0gIi9zaWduYWwvYWxlcnRDb21tZW50L3NhdmVDb21tZW50IjsKCiAgICAgICAgICAgICAgICAgICAgY2FzZUpzb25PYmogPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJhbGVydFR5cGUiOiBhbGVydFR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICJwcm9kdWN0TmFtZSI6IGNhc2VKc29uLnByb2R1Y3ROYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAiZXZlbnROYW1lIjogY2FzZUpzb24uZXZlbnROYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAicHQiOiBjYXNlSnNvbi5wdCwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbW1lbnRzIjogY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50Ym94IikudmFsKCksCiAgICAgICAgICAgICAgICAgICAgICAgICJjYXNlTnVtYmVyIjogY2FzZUpzb24uY2FzZU51bWJlciwKICAgICAgICAgICAgICAgICAgICAgICAgInByb2R1Y3RGYW1pbHkiOiBjYXNlSnNvbi5wcm9kdWN0RmFtaWx5LAogICAgICAgICAgICAgICAgICAgICAgICAidmFsaWRhdGVkU2lnbmFsSWQiOiB2YWxpZGF0ZWRTaWduYWxJZCwKICAgICAgICAgICAgICAgICAgICAgICAgInRvcGljSWQiOiBjb21tZW50TW9kYWwuZmluZCgiI3RvcGljSWQiKS5odG1sKCksCiAgICAgICAgICAgICAgICAgICAgICAgICJhc3NpZ25lZFRvIjogY2FzZUpzb24uYXNzaWduZWRUbywKICAgICAgICAgICAgICAgICAgICAgICAgImFkaG9jQWxlcnRJZCI6IGNhc2VKc29uLmFkaG9jQWxlcnRJZCwKICAgICAgICAgICAgICAgICAgICAgICAgImV4ZWN1dGVkQ29uZmlnSWQiOiBjYXNlSnNvbi5leGVjdXRlZENvbmZpZ0lkLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvZHVjdElkIjogY2FzZUpzb24ucHJvZHVjdElkLAogICAgICAgICAgICAgICAgICAgICAgICAicHRDb2RlIjogY2FzZUpzb24ucHRDb2RlLAogICAgICAgICAgICAgICAgICAgICAgICAiY29uZmlnSWQiOiBjYXNlSnNvbi5jb25maWdJZCwKICAgICAgICAgICAgICAgICAgICAgICAgImxpdGVyYXR1cmVBbGVydElkIjogY2FzZUpzb24ubGl0ZXJhdHVyZUFsZXJ0SWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcnRpY2xlSWQiOiBjYXNlSnNvbi5hcnRpY2xlSWQKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGNhc2VKc29uT2JqQXJyYXkucHVzaChjYXNlSnNvbk9iaik7CiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZUpzb25PYmpBcnJheTogSlNPTi5zdHJpbmdpZnkoY2FzZUpzb25PYmpBcnJheSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB1cmwgPSAiL3NpZ25hbC9hbGVydENvbW1lbnQvc2F2ZUNvbW1lbnQiOwogICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkUm93Q291bnQ7CiAgICAgICAgICAgICAgICBpZiAoJCgnI2RldGFpbGVkLXZpZXctY2hlY2tib3gnKS5pcygnOmNoZWNrZWQnKSkgewogICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUm93Q291bnQgPSAkKCd0YWJsZSNhbGVydHNEZXRhaWxzVGFibGUgLmNvcHktc2VsZWN0OmNoZWNrZWQnKS5sZW5ndGg7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUm93Q291bnQgPSAkKCd0YWJsZS5EVEZDX0Nsb25lZCAuY29weS1zZWxlY3Q6Y2hlY2tlZCcpLmxlbmd0aDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzZWxlY3RlZFJvd0NvdW50OyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkU2lnbmFsSWQgPSAkKCIjdmFsaWRhdGVkU2lnbmFsSWQiKS5odG1sKCk7CiAgICAgICAgICAgICAgICAgICAgY2FzZUpzb24gPSBjYXNlSnNvbkFycmF5W2luZGV4XTsKCiAgICAgICAgICAgICAgICAgICAgLy9DYXNlIEpTT04uCiAgICAgICAgICAgICAgICAgICAgY2FzZUpzb25PYmogPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJhbGVydFR5cGUiOiBhbGVydFR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICJwcm9kdWN0TmFtZSI6IGNhc2VKc29uLnByb2R1Y3ROYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAiZXZlbnROYW1lIjogY2FzZUpzb24uZXZlbnROYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAicHQiOiBjYXNlSnNvbi5wdCwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbW1lbnRzIjogY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50Ym94IikudmFsKCksCiAgICAgICAgICAgICAgICAgICAgICAgICJjYXNlTnVtYmVyIjogY2FzZUpzb24uY2FzZU51bWJlciwKICAgICAgICAgICAgICAgICAgICAgICAgInByb2R1Y3RGYW1pbHkiOiBjYXNlSnNvbi5wcm9kdWN0RmFtaWx5LAogICAgICAgICAgICAgICAgICAgICAgICAidmFsaWRhdGVkU2lnbmFsSWQiOiB2YWxpZGF0ZWRTaWduYWxJZCwKICAgICAgICAgICAgICAgICAgICAgICAgInRvcGljSWQiOiBjb21tZW50TW9kYWwuZmluZCgiI3RvcGljSWQiKS5odG1sKCksCiAgICAgICAgICAgICAgICAgICAgICAgICJhc3NpZ25lZFRvIjogY2FzZUpzb24uYXNzaWduZWRUbywKICAgICAgICAgICAgICAgICAgICAgICAgImFkaG9jQWxlcnRJZCI6IGNhc2VKc29uLmFkaG9jQWxlcnRJZCwKICAgICAgICAgICAgICAgICAgICAgICAgInByb2R1Y3RJZCI6IGNhc2VKc29uLnByb2R1Y3RJZCwKICAgICAgICAgICAgICAgICAgICAgICAgInB0Q29kZSI6IGNhc2VKc29uLnB0Q29kZSwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbmZpZ0lkIjogY2FzZUpzb24uY29uZmlnSWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJsaXRlcmF0dXJlQWxlcnRJZCI6IGNhc2VKc29uLmxpdGVyYXR1cmVBbGVydElkLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJ0aWNsZUlkIjogY2FzZUpzb24uYXJ0aWNsZUlkLAogICAgICAgICAgICAgICAgICAgICAgICAiZXhlY3V0ZWRDb25maWdJZCI6IGNhc2VKc29uLmV4ZWN1dGVkQ29uZmlnSWQKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGNhc2VKc29uT2JqQXJyYXkucHVzaChjYXNlSnNvbk9iaikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZUpzb25PYmpBcnJheTogSlNPTi5zdHJpbmdpZnkoY2FzZUpzb25PYmpBcnJheSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy9TYXZlIGNvbW1lbnQgY2FsbAogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlLAogICAgICAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCJpLmlzUHJvY2Vzc2luZyIpLnNob3coKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoImkuaXNQcm9jZXNzaW5nIikuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIC8vUG9wdWxhdGUgdGhlIGNvbW1lbnRzIGFnYWluIGlmIHNpbmdsZSBjb21tZW50IGlzIGFkZGVkLgogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXNDYXNlRGV0YWlsICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFJbmZvID09PSAicm93IikgewogICAgICAgICAgICAgICAgICAgICAgICBzaWduYWwuYWxlcnRDb21tZW50cy5wb3B1bGF0ZV9jb21tZW50cyhjb21tZW50TW9kYWwsIGNhc2VKc29uKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NvbW1lbnRib3gnKS52YWwoJycpLmJsdXIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuY29tbWVudCAhPSAiIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbW1lbnRJY29uKGN1cnJlbnRSb3cpIDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNvbW1lbnRJY29uKGN1cnJlbnRSb3cpIDsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwubW9kYWwoImhpZGUiKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdtb2RhbC1vcGVuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5tb2RhbC1iYWNrZHJvcCcpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hlY2tib3hTZWxlY3RvcjsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQoJyNkZXRhaWxlZC12aWV3LWNoZWNrYm94JykuaXMoJzpjaGVja2VkJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94U2VsZWN0b3IgPSAndGFibGUjYWxlcnRzRGV0YWlsc1RhYmxlIC5jb3B5LXNlbGVjdDpjaGVja2VkJzsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94U2VsZWN0b3IgPSAndGFibGUuRFRGQ19DbG9uZWQgLmNvcHktc2VsZWN0OmNoZWNrZWQnOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaCgkKGNoZWNrYm94U2VsZWN0b3IpLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29tbWVudEljb24odGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkLk5vdGlmaWNhdGlvbi5ub3RpZnkoJ3N1Y2Nlc3MnLCAndG9wIHJpZ2h0JywgIlN1Y2Nlc3MiLCAiQ29tbWVudHMgYWRkZWQgc3VjY2Vzc2Z1bGx5LiIsIHthdXRvSGlkZURlbGF5OiAxMDAwMH0pOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pCiAgICB9OwoKICAgIHZhciBpbml0aWF0ZVNpbmdsZVJvd0NvbW1lbnRQcm9jZXNzID0gZnVuY3Rpb24gKCR0aGlzLCBjYXNlSnNvbkFycmF5LCBjb21tZW50TW9kYWwsIGFsZXJ0VHlwZSwgaXNDYXNlRGV0YWlsLCBpc1NpZ25hbCkgewogICAgICAgIHZhciBhZGhvY0FsZXJ0SWQ7CiAgICAgICAgdmFyIGxpdGVyYXR1cmVBbGVydElkOwogICAgICAgIHZhciBhcnRpY2xlSWQ7CgogICAgICAgIHZhciByb3dPYmplY3QgPSB7fTsKICAgICAgICBpZiAoKGFsZXJ0VHlwZSA9PT0gJ0FnZ3JlZ2F0ZSBDYXNlIEFsZXJ0JyB8fCBhbGVydFR5cGUgPT09ICdTaW5nbGUgQ2FzZSBBbGVydCcgfHwgYWxlcnRUeXBlID09PSAnRVZEQVMgQWxlcnQnIHx8IGFsZXJ0VHlwZSA9PT0gJ0xpdGVyYXR1cmUgU2VhcmNoIEFsZXJ0JykgJiYgIWlzU2lnbmFsKSB7CiAgICAgICAgICAgIHZhciBzZWxlY3RlZFJvd0luZGV4ID0gJCgkdGhpcykuY2xvc2VzdCgndHInKS5pbmRleCgpOwogICAgICAgICAgICBpZiAoaXNBYnN0cmFjdFZpZXdPckNhc2VWaWV3KHNlbGVjdGVkUm93SW5kZXgpKSB7CiAgICAgICAgICAgICAgICBzZWxlY3RlZFJvd0luZGV4ID0gc2VsZWN0ZWRSb3dJbmRleCAvIDIKICAgICAgICAgICAgfQogICAgICAgICAgICByb3dPYmplY3QgPSB0YWJsZS5yb3coc2VsZWN0ZWRSb3dJbmRleCkuZGF0YSgpOwogICAgICAgIH0gZWxzZSBpZiAoYWxlcnRUeXBlID09PSAnQWdncmVnYXRlIENhc2UgQWxlcnQnKSB7CiAgICAgICAgICAgIHJvd09iamVjdCA9IHRhYmxlQWdnUmV2aWV3LnJvdygkKCR0aGlzKS5wYXJlbnRzKCd0cicpKS5kYXRhKCk7CiAgICAgICAgfSBlbHNlIGlmIChhbGVydFR5cGUgPT09ICdMaXRlcmF0dXJlIFNlYXJjaCBBbGVydCcpIHsKICAgICAgICAgICAgcm93T2JqZWN0ID0gdGFibGVMaXRlcmF0dXJlUmV2aWV3LnJvdygkKCR0aGlzKS5wYXJlbnRzKCd0cicpKS5kYXRhKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcm93T2JqZWN0ID0gdGFibGVTaW5nbGVSZXZpZXcucm93KCQoJHRoaXMpLnBhcmVudHMoJ3RyJykpLmRhdGEoKTsKICAgICAgICB9CgogICAgICAgIHZhciBjYXNlTnVtYmVyID0gcm93T2JqZWN0LmNhc2VOdW1iZXI7CiAgICAgICAgdmFyIHByb2R1Y3RGYW1pbHkgPSByb3dPYmplY3QucHJvZHVjdEZhbWlseTsKICAgICAgICB2YXIgY2FzZVZlcnNpb24gPSByb3dPYmplY3QuY2FzZVZlcnNpb247CiAgICAgICAgdmFyIHByb2R1Y3ROYW1lID0gcm93T2JqZWN0LnByb2R1Y3ROYW1lOwogICAgICAgIHZhciBldmVudE5hbWUgPSByb3dPYmplY3QucHJlZmVycmVkVGVybTsKICAgICAgICB2YXIgcHQgPSByb3dPYmplY3QucHQ7CiAgICAgICAgdmFyIGFzc2lnbmVkVG8gPSByb3dPYmplY3QuYXNzaWduZWRUby5pZDsKICAgICAgICB2YXIgYXNzaWduZWRUb1VzZXIgPSBudWxsOwogICAgICAgICBpZihyb3dPYmplY3QuYXNzaWduZWRUb1VzZXIgIT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgYXNzaWduZWRUb1VzZXIgPSByb3dPYmplY3QuYXNzaWduZWRUb1VzZXIuaWQ7CiAgICAgICAgdmFyIHByb2R1Y3RJZCA9IHJvd09iamVjdC5wcm9kdWN0SWQ7CiAgICAgICAgdmFyIHB0Q29kZSA9IHJvd09iamVjdC5wdENvZGU7CiAgICAgICAgdmFyIGNvbmZpZ0lkID0gcm93T2JqZWN0LmFsZXJ0Q29uZmlnSWQ7CiAgICAgICAgdmFyIGV4ZWN1dGVkQ29uZmlnSWQgPSByb3dPYmplY3QuZXhlY0NvbmZpZ0lkOwoKICAgICAgICBpZiAoYWxlcnRUeXBlID09PSBzaWduYWxBbGVydFR5cGUuQURIT0NfQUxFUlQpIHsKICAgICAgICAgICAgYWRob2NBbGVydElkID0gcm93T2JqZWN0LmlkOwogICAgICAgIH0gZWxzZSBpZiAoYWxlcnRUeXBlID09PSBzaWduYWxBbGVydFR5cGUuTElURVJBVFVSRV9TRUFSQ0hfQUxFUlQpIHsKICAgICAgICAgICAgbGl0ZXJhdHVyZUFsZXJ0SWQgPSByb3dPYmplY3QuaWQ7CiAgICAgICAgICAgIGFydGljbGVJZCA9IHJvd09iamVjdC5hcnRpY2xlSWQKICAgICAgICB9CiAgICAgICAgdmFyIGNhc2VKc29uID0gewogICAgICAgICAgICAiYWxlcnRUeXBlIjogYWxlcnRUeXBlLAogICAgICAgICAgICAicHJvZHVjdEZhbWlseSI6IHByb2R1Y3RGYW1pbHksCiAgICAgICAgICAgICJjYXNlTnVtYmVyIjogY2FzZU51bWJlciwKICAgICAgICAgICAgInByb2R1Y3ROYW1lIjogcHJvZHVjdE5hbWUsCiAgICAgICAgICAgICJldmVudE5hbWUiOiBldmVudE5hbWUsCiAgICAgICAgICAgICJwdCI6IHB0LAogICAgICAgICAgICAicHRDb2RlIjogcHRDb2RlLAogICAgICAgICAgICAicHJvZHVjdElkIjogcHJvZHVjdElkLAogICAgICAgICAgICAiYXNzaWduZWRUbyI6IGFzc2lnbmVkVG8gPyBhc3NpZ25lZFRvIDogYXNzaWduZWRUb1VzZXIsCiAgICAgICAgICAgICJleGVjdXRlZENvbmZpZ0lkIjogZXhlY3V0ZWRDb25maWdJZCwKICAgICAgICAgICAgImNvbmZpZ0lkIjogY29uZmlnSWQsCiAgICAgICAgICAgICJhZGhvY0FsZXJ0SWQiOiBhZGhvY0FsZXJ0SWQsCiAgICAgICAgICAgICJsaXRlcmF0dXJlQWxlcnRJZCI6IGxpdGVyYXR1cmVBbGVydElkLAogICAgICAgICAgICAiYXJ0aWNsZUlkIjogYXJ0aWNsZUlkCiAgICAgICAgfTsKCiAgICAgICAgY2FzZUpzb25BcnJheS5wdXNoKGNhc2VKc29uKTsKICAgICAgICB2YXIgY29tbWVudE1ldGFJbmZvID0gIiI7CgogICAgICAgIGlmIChjYXNlSnNvbi5hbGVydFR5cGUgPT09IHNpZ25hbEFsZXJ0VHlwZS5BR0dSRUdBVEVfQUxFUlQgfHwgY2FzZUpzb24uYWxlcnRUeXBlID09PSBzaWduYWxBbGVydFR5cGUuRVZEQVNfQUxFUlQpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiAoY2FzZUpzb24uZXZlbnROYW1lKSA9PT0gInVuZGVmaW5lZCIgfHwgdHlwZW9mIChjYXNlSnNvbi5wcm9kdWN0TmFtZSkgPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICBjb21tZW50TWV0YUluZm8gPSAiIgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29tbWVudE1ldGFJbmZvID0gJzxzcGFuIGlkPSJwcm9kdWN0TmFtZSI+JyArIGNhc2VKc29uLnByb2R1Y3ROYW1lICsgJzwvc3Bhbj4gLSA8c3BhbiBpZD0iZXZlbnROYW1lIj4nICsgY2FzZUpzb24uZXZlbnROYW1lICsgJzwvc3Bhbj4nICsgJzxzcGFuIGNsYXNzPSJoaWRkZW4iIGlkPSJwcm9kdWN0SWQiPicgKyBjYXNlSnNvbi5wcm9kdWN0SWQgKyAnPC9zcGFuPicgKwogICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz0iaGlkZGVuIiBpZD0icHRDb2RlIj4nICsgY2FzZUpzb24ucHRDb2RlICsgJzwvc3Bhbj4nCiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAodHlwZW9mIChjYXNlSnNvbi5jYXNlTnVtYmVyKSA9PT0gInVuZGVmaW5lZCIgfHwgdHlwZW9mIChjYXNlSnNvbi5wcm9kdWN0RmFtaWx5KSA9PT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgIGNvbW1lbnRNZXRhSW5mbyA9ICIiCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb21tZW50TWV0YUluZm8gPSAnPHNwYW4gaWQ9ImNhc2VOdW1iZXIiPicgKyBjYXNlSnNvbi5jYXNlTnVtYmVyICsgJzwvc3Bhbj4gLSA8c3BhbiBpZD0icHJvZHVjdEZhbWlseSI+JyArIGNhc2VKc29uLnByb2R1Y3RGYW1pbHkgKyAnPC9zcGFuPicKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnQtbWV0YS1pbmZvIikuaHRtbChjb21tZW50TWV0YUluZm8pOwogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjYXNzaWduZWRUbyIpLmh0bWwoYXNzaWduZWRUbyk7CiAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIiNjb25maWdJZCIpLmh0bWwoY29uZmlnSWQpOwogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjYXBwbGljYXRpb24iKS5odG1sKGNhc2VKc29uLmFsZXJ0VHlwZSk7CgogICAgICAgIC8vUG9wdWxhdGUgdGhlIGV4aXN0aW5nIGNvbW1lbnRzIGFuZCBiaW5kIGV2ZW50cyB0byB0aGVtIGluIGNhc2Ugb2Ygc2luZ2xlIGNvbW1lbnQuCiAgICAgICAgaWYgKHR5cGVvZiBpc0Nhc2VEZXRhaWwgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICQoJyNsb2FkaW5nQ29tbWVudHMnKS5odG1sKCcnKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNpZ25hbC5hbGVydENvbW1lbnRzLnBvcHVsYXRlX2NvbW1lbnRzKGNvbW1lbnRNb2RhbCwgY2FzZUpzb24pOwogICAgICAgIH0KICAgICAgICAkKCIjY29tbWVudE1vZGFsIikub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgnI2NvbW1lbnRib3gnKS52YWwoJycpOwogICAgICAgICAgICAkKCcuYWRkLWNvbW1lbnRzJykuaHRtbCgnQWRkJyk7CiAgICAgICAgICAgICQoIi5jcmVhdGVkQnkiKS50ZXh0KCcnKTsKICAgICAgICB9KQogICAgfTsKCiAgICB2YXIgaW5pdGlhdGVTaW5nbGVCdWxrUm93Q29tbWVudFByb2Nlc3MgPSBmdW5jdGlvbiAoY2FzZUpzb25BcnJheSwgY29tbWVudE1vZGFsLCBhbGVydFR5cGUsIGlzQ2FzZURldGFpbCwgaXNTaWduYWwpIHsKICAgICAgICB2YXIgaW5kZXhTZXQgPSBuZXcgU2V0KCk7CiAgICAgICAgdmFyIGNoZWNrYm94U2VsZWN0b3I7CiAgICAgICAgaWYgKCQoJyNkZXRhaWxlZC12aWV3LWNoZWNrYm94JykuaXMoJzpjaGVja2VkJykpIHsKICAgICAgICAgICAgY2hlY2tib3hTZWxlY3RvciA9ICd0YWJsZSNhbGVydHNEZXRhaWxzVGFibGUgLmNvcHktc2VsZWN0OmNoZWNrZWQnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNoZWNrYm94U2VsZWN0b3IgPSAndGFibGUuRFRGQ19DbG9uZWQgLmNvcHktc2VsZWN0OmNoZWNrZWQnOwogICAgICAgIH0KICAgICAgICAkLmVhY2goJChjaGVja2JveFNlbGVjdG9yKSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgc2VsZWN0ZWRSb3dJbmRleCA9ICQodGhpcykuY2xvc2VzdCgndHInKS5pbmRleCgpOwogICAgICAgICAgICBpZiAoaXNBYnN0cmFjdFZpZXdPckNhc2VWaWV3KHNlbGVjdGVkUm93SW5kZXgpKQogICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dJbmRleCA9IHNlbGVjdGVkUm93SW5kZXggLyAyOwogICAgICAgICAgICBpbmRleFNldC5hZGQoKHNlbGVjdGVkUm93SW5kZXgpKTsKICAgICAgICB9KTsKICAgICAgICBpbmRleFNldC5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgICAgICB2YXIgYWRob2NBbGVydElkOwogICAgICAgICAgICB2YXIgbGl0ZXJhdHVyZUFsZXJ0SWQ7CiAgICAgICAgICAgIHZhciBhcnRpY2xlSWQ7CiAgICAgICAgICAgIHZhciByb3dPYmplY3QgPSB7fTsKICAgICAgICAgICAgaWYgKChhbGVydFR5cGUgPT09ICdBZ2dyZWdhdGUgQ2FzZSBBbGVydCcgfHwgYWxlcnRUeXBlID09PSAnU2luZ2xlIENhc2UgQWxlcnQnIHx8IGFsZXJ0VHlwZSA9PT0gJ0VWREFTIEFsZXJ0JyB8fCBhbGVydFR5cGUgPT09ICdMaXRlcmF0dXJlIFNlYXJjaCBBbGVydCcpICYmICFpc1NpZ25hbCkgewogICAgICAgICAgICAgICAgcm93T2JqZWN0ID0gdGFibGUucm93cyhpbmRleCkuZGF0YSgpWzBdOwogICAgICAgICAgICB9IGVsc2UgaWYgKGFsZXJ0VHlwZSA9PT0gJ0FnZ3JlZ2F0ZSBDYXNlIEFsZXJ0JykgewogICAgICAgICAgICAgICAgcm93T2JqZWN0ID0gdGFibGVBZ2dSZXZpZXcucm93cyhpbmRleCkuZGF0YSgpWzBdOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcm93T2JqZWN0ID0gdGFibGVTaW5nbGVSZXZpZXcucm93cyhpbmRleCkuZGF0YSgpWzBdOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgY2FzZU51bWJlciA9IHJvd09iamVjdC5jYXNlTnVtYmVyOwogICAgICAgICAgICB2YXIgcHJvZHVjdEZhbWlseSA9IHJvd09iamVjdC5wcm9kdWN0RmFtaWx5OwogICAgICAgICAgICB2YXIgY2FzZVZlcnNpb24gPSByb3dPYmplY3QuY2FzZVZlcnNpb247CiAgICAgICAgICAgIHZhciBwcm9kdWN0TmFtZSA9IHJvd09iamVjdC5wcm9kdWN0TmFtZTsKICAgICAgICAgICAgdmFyIGV2ZW50TmFtZSA9IHJvd09iamVjdC5wcmVmZXJyZWRUZXJtOwogICAgICAgICAgICB2YXIgcHQgPSByb3dPYmplY3QucHQ7CiAgICAgICAgICAgIHZhciBhc3NpZ25lZFRvID0gcm93T2JqZWN0LmFzc2lnbmVkVG8uaWQ7CiAgICAgICAgICAgIHZhciBwcm9kdWN0SWQgPSByb3dPYmplY3QucHJvZHVjdElkOwogICAgICAgICAgICB2YXIgcHRDb2RlID0gcm93T2JqZWN0LnB0Q29kZTsKICAgICAgICAgICAgdmFyIGNvbmZpZ0lkID0gcm93T2JqZWN0LmFsZXJ0Q29uZmlnSWQ7CiAgICAgICAgICAgIHZhciBleGVjdXRlZENvbmZpZ0lkID0gcm93T2JqZWN0LmV4ZWNDb25maWdJZDsKCiAgICAgICAgICAgIGlmIChhbGVydFR5cGUgPT09IHNpZ25hbEFsZXJ0VHlwZS5BREhPQ19BTEVSVCkgewogICAgICAgICAgICAgICAgYWRob2NBbGVydElkID0gcm93T2JqZWN0LmlkOwogICAgICAgICAgICB9IGVsc2UgaWYgKGFsZXJ0VHlwZSA9PT0gc2lnbmFsQWxlcnRUeXBlLkxJVEVSQVRVUkVfU0VBUkNIX0FMRVJUKSB7CiAgICAgICAgICAgICAgICBsaXRlcmF0dXJlQWxlcnRJZCA9IHJvd09iamVjdC5pZDsKICAgICAgICAgICAgICAgIGFydGljbGVJZCA9IHJvd09iamVjdC5hcnRpY2xlSWQKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgY2FzZUpzb24gPSB7CiAgICAgICAgICAgICAgICAiYWxlcnRUeXBlIjogYWxlcnRUeXBlLAogICAgICAgICAgICAgICAgInByb2R1Y3RGYW1pbHkiOiBwcm9kdWN0RmFtaWx5LAogICAgICAgICAgICAgICAgImNhc2VOdW1iZXIiOiBjYXNlTnVtYmVyLAogICAgICAgICAgICAgICAgInByb2R1Y3ROYW1lIjogcHJvZHVjdE5hbWUsCiAgICAgICAgICAgICAgICAiZXZlbnROYW1lIjogZXZlbnROYW1lLAogICAgICAgICAgICAgICAgInB0IjogcHQsCiAgICAgICAgICAgICAgICAicHRDb2RlIjogcHRDb2RlLAogICAgICAgICAgICAgICAgInByb2R1Y3RJZCI6IHByb2R1Y3RJZCwKICAgICAgICAgICAgICAgICJhc3NpZ25lZFRvIjogYXNzaWduZWRUbywKICAgICAgICAgICAgICAgICJleGVjdXRlZENvbmZpZ0lkIjogZXhlY3V0ZWRDb25maWdJZCwKICAgICAgICAgICAgICAgICJjb25maWdJZCI6IGNvbmZpZ0lkLAogICAgICAgICAgICAgICAgImFkaG9jQWxlcnRJZCI6IGFkaG9jQWxlcnRJZCwKICAgICAgICAgICAgICAgICJsaXRlcmF0dXJlQWxlcnRJZCI6IGxpdGVyYXR1cmVBbGVydElkLAogICAgICAgICAgICAgICAgImFydGljbGVJZCI6IGFydGljbGVJZAogICAgICAgICAgICB9OwogICAgICAgICAgICBjYXNlSnNvbkFycmF5LnB1c2goY2FzZUpzb24pCiAgICAgICAgfSk7CgogICAgICAgIC8vU2V0IHZhbHVlcyB0byB0aGUgbW9kYWwgZWxlbWVudHMuCiAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIiNsb2FkaW5nQ29tbWVudHMiKS5oaWRlKCk7CiAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50LW1ldGEtaW5mbyIpLmh0bWwoIiIpOwogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIucHJldmlvdXMtY29tbWVudHMiKS5odG1sKCIiKTsKICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRJZCIpLnZhbCgnJyk7CiAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIi5jcmVhdGVkQnkiKS50ZXh0KCcnKTsKICAgICAgICBpZiAoY29tbWVudE1vZGFsLmZpbmQoJy5hZGQtY29tbWVudHMnKS5odG1sKCkgIT0gJ1VwZGF0ZScpIHsKICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoJy5hZGQtY29tbWVudHMnKS5odG1sKCJBZGQiKTsKICAgICAgICB9CiAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoJy5hZGQtY29tbWVudHMnKS5wcm9wKCJkaXNhYmxlZCIsIGZhbHNlKTsKICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnI2NvbW1lbnRib3gnKS5vbigia2V5dXAiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmIChjb21tZW50TW9kYWwuZmluZCgnI2NvbW1lbnRib3gnKS52YWwoKS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnLmFkZC1jb21tZW50cycpLnByb3AoImRpc2FibGVkIiwgZmFsc2UpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoJy5hZGQtY29tbWVudHMnKS5wcm9wKCJkaXNhYmxlZCIsIHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciByZXN0YXJ0UmV2aWV3ID0gZnVuY3Rpb24gKGNhc2VSZXZpZXdQcmV2aW91c1VybCkgewoKICAgICAgICAvL0V2ZW50IHdoZW4gcmV2aWV3IHJlc3RhcnQgaXMgY2xpY2tlZC4KICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmNhc2UtcmVzdGFydC1yZXZpZXcnLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgdmFyIHBhcmVudF9yb3cgPSAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgndHInKTsKICAgICAgICAgICAgdmFyIGNhc2VOdW1iZXIgPSBwYXJlbnRfcm93LmZpbmQoJ3NwYW5bZGF0YS1maWVsZD0iY2FzZU51bWJlciJdJykuYXR0cigiZGF0YS1pZCIpOwogICAgICAgICAgICB2YXIgZm9sbG93VXBOdW1iZXIgPSBwYXJlbnRfcm93LmZpbmQoJ3NwYW5bZGF0YS1maWVsZD0iZm9sbG93VXBOdW1iZXIiXScpLmF0dHIoImRhdGEtaWQiKTsKICAgICAgICAgICAgdmFyIGNhc2VWZXJzaW9uID0gcGFyZW50X3Jvdy5maW5kKCdzcGFuW2RhdGEtZmllbGQ9ImNhc2VWZXJzaW9uIl0nKS5hdHRyKCJkYXRhLWlkIik7CiAgICAgICAgICAgIHZhciBwcm9kdWN0RmFtaWx5ID0gcGFyZW50X3Jvdy5maW5kKCdpbnB1dFtkYXRhLWZpZWxkPSJwcm9kdWN0RmFtaWx5Il0nKS5hdHRyKCJkYXRhLWlkIik7CiAgICAgICAgICAgIHZhciBmb2xsb3dVcE1vZGFsID0gJCgnI2ZvbGxvd1VwTW9kYWwnKTsKICAgICAgICAgICAgZm9sbG93VXBNb2RhbC5tb2RhbCgnc2hvdycpOwogICAgICAgICAgICBmb2xsb3dVcE1vZGFsLmZpbmQoIi5wcmV2aW91cy1mb2xsb3dVcCIpLnVuYmluZCgpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBnZXRQcmV2aW91c1N0YXRlID0gY2FzZVJldmlld1ByZXZpb3VzVXJsICsgIj9jYXNlTnVtYmVyPSIgKyBjYXNlTnVtYmVyICsKICAgICAgICAgICAgICAgICAgICAiJmNhc2VWZXJzaW9uPSIgKyBjYXNlVmVyc2lvbiArICImcHJvZHVjdEZhbWlseT0iICsgcHJvZHVjdEZhbWlseSArICImZm9sbG93VXBOdW1iZXI9IiArIGZvbGxvd1VwTnVtYmVyOwogICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6IGdldFByZXZpb3VzU3RhdGUsCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfcm93LmZpbmQoJ3NwYW5bZGF0YS1maWVsZD0id29ya2Zsb3dTdGF0ZSJdJykudGV4dChyZXN1bHQucHJldmlvdXNTdGF0ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudF9yb3cuZmluZCgnc3BhbltkYXRhLWZpZWxkPSJkaXNwb3NpdGlvbiJdJykudGV4dChyZXN1bHQucHJldmlvdXNEaXNwb3NpdGlvbik7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudF9yb3cuZmluZCgnc3BhbltkYXRhLWZpZWxkPSJpbmZvLXNpZ24iXScpLmFkZENsYXNzKCJoaWRkZW4iKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9sbG93VXBNb2RhbC5tb2RhbCgnZGVzdHJveScpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0pCiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBvcGVuU2ltaWxhckNhc2VzTW9kYWwgPSBmdW5jdGlvbiAoY2FzZUluZm9VcmwpIHsKCiAgICAgICAgLy9FdmVudCB0cmlnZ2VyZWQgd2hlbiBzaW1pbGFyIGNhc2VzIGNvdW50IGlzIGNsaWNrZWQuCiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5zaW1pbGFyLWNhc2VzJywgZnVuY3Rpb24gKGV2ZW50KSB7CgogICAgICAgICAgICB2YXIgc2ltaWxhckNhc2VNb2RhbCA9ICQoJyNzaW1pbGFyQ2FzZU1vZGFsJyk7CiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICB2YXIgcGFyZW50X3JvdyA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCJ0ciIpOwoKICAgICAgICAgICAgLy9GZXRjaCB0aGUgdmFsdWVzIG9mIHRoZSBldmVudC4KICAgICAgICAgICAgdmFyIGV2ZW50VmFsID0gJChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtZXZlbnQtdmFsJyk7CiAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSAkKGV2ZW50LnRhcmdldCkuYXR0cignZGF0YS1maWVsZCcpOwogICAgICAgICAgICB2YXIgZXhlY3V0ZWRDb25maWdJZCA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKCJkYXRhLWlkIik7CiAgICAgICAgICAgIHZhciBwdCA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKCJkYXRhLXB0Iik7CiAgICAgICAgICAgIHZhciBldmVudENvZGU7CiAgICAgICAgICAgIGlmIChldmVudFR5cGUpIHsKICAgICAgICAgICAgICAgIGV2ZW50Q29kZSA9IChldmVudFR5cGUuc3BsaXQoIl9jb2RlIilbMF0pOwogICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlLnNwbGl0KCJfIilbMl07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBjYXNlTnVtYmVyID0gcGFyZW50X3Jvdy5maW5kKCdzcGFuW2RhdGEtZmllbGQ9ImNhc2VOdW1iZXIiXScpLmF0dHIoImRhdGEtaWQiKTsKICAgICAgICAgICAgdmFyIGNhc2VWZXJzaW9uID0gcGFyZW50X3Jvdy5maW5kKCdzcGFuW2RhdGEtZmllbGQ9ImNhc2VWZXJzaW9uIl0nKS5hdHRyKCJkYXRhLWlkIik7CgogICAgICAgICAgICAvL1Nob3cgbW9kYWwgYW5kIHNldCBpdHMgdmFsdWVzLgogICAgICAgICAgICBzaW1pbGFyQ2FzZU1vZGFsLm1vZGFsKCdzaG93Jyk7CiAgICAgICAgICAgIHNpbWlsYXJDYXNlTW9kYWwuZmluZCgiI2V2ZW50VHlwZSIpLmh0bWwoZXZlbnRUeXBlKTsKICAgICAgICAgICAgc2ltaWxhckNhc2VNb2RhbC5maW5kKCIjZXZlbnRWYWwiKS5odG1sKGV2ZW50VmFsKTsKICAgICAgICAgICAgc2ltaWxhckNhc2VNb2RhbC5maW5kKCIjY2FzZU51bWJlckluZm8iKS52YWwoY2FzZU51bWJlcik7CiAgICAgICAgICAgIHNpbWlsYXJDYXNlTW9kYWwuZmluZCgiI2V4ZWN1dGVkQ29uZmlnSWQiKS52YWwoZXhlY3V0ZWRDb25maWdJZCk7CiAgICAgICAgICAgIHNpbWlsYXJDYXNlTW9kYWwuZmluZCgiI2Nhc2VDdXJyZW50VmVyc2lvbiIpLnZhbChjYXNlVmVyc2lvbik7CiAgICAgICAgICAgIHNpbWlsYXJDYXNlTW9kYWwuZmluZCgiI2V2ZW50Q29kZSIpLnZhbChldmVudENvZGUpOwogICAgICAgICAgICBzaW1pbGFyQ2FzZU1vZGFsLmZpbmQoIiNldmVudENvZGVWYWwiKS52YWwoZXZlbnRWYWwpOwogICAgICAgICAgICAvL01ha2UgdGhlIG1vZGFsIHRhYmxlIGFzIGRhdGF0YWJsZQoKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBzaWduYWwuc2ltaWxhckNhc2VUYWJsZS5pbml0X3NpbWlsYXJfY2FzZV90YWJsZShjYXNlSW5mb1VybCkKICAgICAgICAgICAgfSwgMTAwKTsKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIG9wZW5BdHRhY2htZW50TW9kYWwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5zaG93LWF0dGFjaG1lbnQtaWNvbicsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzOwogICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB2YXIgcGFyZW50X3JvdyA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCd0cicpOwogICAgICAgICAgICB2YXIgYWxlcnRJZCA9IHBhcmVudF9yb3cuZmluZCgnYVtkYXRhLWZpZWxkPSJhdHRhY2htZW50Il0nKS5hdHRyKCJkYXRhLWlkIik7CiAgICAgICAgICAgIHZhciBjYXNlQ29udHJvbGxlciA9IHBhcmVudF9yb3cuZmluZCgnYVtkYXRhLWZpZWxkPSJhdHRhY2htZW50Il0nKS5hdHRyKCJkYXRhLWNvbnRyb2xsZXIiKTsKICAgICAgICAgICAgdmFyIHVybCA9ICIvc2lnbmFsLyIgKyBjYXNlQ29udHJvbGxlciArICIvdXBsb2FkIjsKICAgICAgICAgICAgdmFyIGdldEF0dGFjaG1lbnRVcmwgPSAiL3NpZ25hbC8iICsgY2FzZUNvbnRyb2xsZXIgKyAiL2ZldGNoQXR0YWNobWVudD9hbGVydElkPSIgKyBhbGVydElkOwogICAgICAgICAgICAkKCcjc2hvd0F0dGFjaG1lbnRNb2RhbCAjYXR0YWNobWVudEZvcm0gI2F0dGFjaG1lbnRGb3JtSWQnKS5hdHRyKCd2YWx1ZScsIGFsZXJ0SWQpOwogICAgICAgICAgICB2YXIgY2FzZUhpc3RvcnlNb2RhbCA9ICQoJyNzaG93QXR0YWNobWVudE1vZGFsJyk7CiAgICAgICAgICAgIGNhc2VIaXN0b3J5TW9kYWwubW9kYWwoJ3Nob3cnKTsKICAgICAgICAgICAgJCgiI3Nob3dBdHRhY2htZW50TW9kYWwgZm9ybSNhdHRhY2htZW50Rm9ybSIpLnVuYmluZCgnc3VibWl0Jykub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0aGlzKTsKICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7CiAgICAgICAgICAgICAgICBpZiAoJHRoaXMuZmluZCgnLmF0dGFjaG1lbnQtZmlsZScpLnZhbCgpKSB7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMuZmluZCgiLnVwbG9hZCIpLmF0dHIoImRpc2FibGVkIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsCiAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuZmluZCgnLmF0dGFjaG1lbnQtZmlsZScpLnZhbCgnJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93QXR0YWNobWVudEljb24ocGFyZW50X3Jvdyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjc2hvd0F0dGFjaG1lbnRNb2RhbCAjYXR0YWNobWVudC10YWJsZScpLkRhdGFUYWJsZSgpLmFqYXgucmVsb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5maW5kKCIudXBsb2FkIikuYXR0cigiZGlzYWJsZWQiLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRGF0YTogZmFsc2UKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICQoJyNzaG93QXR0YWNobWVudE1vZGFsICNhdHRhY2htZW50LXRhYmxlJykuRGF0YVRhYmxlKHsKICAgICAgICAgICAgICAgIGRlc3Ryb3k6IHRydWUsCiAgICAgICAgICAgICAgICBzZWFyY2hpbmc6IGZhbHNlLAogICAgICAgICAgICAgICAgc1BhZ2luYXRpb25UeXBlOiAiYm9vdHN0cmFwIiwKICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IGZhbHNlLAogICAgICAgICAgICAgICAgbGFuZ3VhZ2U6IHsKICAgICAgICAgICAgICAgICAgICAidXJsIjogIi4uL2Fzc2V0cy9pMThuL2RhdGFUYWJsZXNfIiArIHVzZXJMb2NhbGUgKyAiLmpzb24iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImFqYXgiOiB7CiAgICAgICAgICAgICAgICAgICAgInVybCI6IGdldEF0dGFjaG1lbnRVcmwsCiAgICAgICAgICAgICAgICAgICAgImRhdGFTcmMiOiAiIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGZuRHJhd0NhbGxiYWNrOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnLnJlbW92ZS1hdHRhY2htZW50JykuY2xpY2soZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dGFjaG1lbnRSb3cgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCd0cicpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0YWNobWVudElkID0gYXR0YWNobWVudFJvdy5maW5kKCdzcGFuW2RhdGEtZmllbGQ9InJlbW92ZUF0dGFjaG1lbnQiXScpLmF0dHIoImRhdGEtYXR0YWNobWVudElkIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW1vdmVVcmwgPSAnL3NpZ25hbC8nICsgY2FzZUNvbnRyb2xsZXIgKyAnL2RlbGV0ZUF0dGFjaG1lbnQ/YXR0YWNobWVudElkPScgKyBhdHRhY2htZW50SWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHJlbW92ZVVybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHthbGVydElkOiBhbGVydElkfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkKCcucmVtb3ZlLWF0dGFjaG1lbnQnKS5sZW5ndGggPT09MSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXR0YWNobWVudEljb24oJHRoaXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNzaG93QXR0YWNobWVudE1vZGFsICNhdHRhY2htZW50LXRhYmxlJykuRGF0YVRhYmxlKCkuYWpheC5yZWxvYWQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuTm90aWZpY2F0aW9uLm5vdGlmeSgnZXJyb3InLCAndG9wIHJpZ2h0JywgIkVycm9yIiwgIkFsbCBzZWxlY3RlZCBzYWZldHkgb2JzZXJ2YXRpb25zIG11c3QgYmUgaW4gc2FtZSBkaXNwb3NpdGlvbiBmb3IgcGVyZm9ybWluZyB0aGUgYnVsayB1cGRhdGUuIiwge2F1dG9IaWRlRGVsYXk6IDEwMDAwfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiYW9Db2x1bW5zIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm1EYXRhIjogIm5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGEgaHJlZj0iL3NpZ25hbC9hdHRhY2htZW50YWJsZS9kb3dubG9hZD9pZD0nICsgcm93LmlkICsgJyI+JyArIGVzY2FwZUhUTUwocm93Lm5hbWUpICsgJzwvYT4nCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJkZXNjcmlwdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjbGFzc05hbWUiOiAnY2VsbC1icmVhaycsCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAidGltZVN0YW1wIgogICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm1EYXRhIjogIm1vZGlmaWVkQnkiCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiaWQiLAogICAgICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPHNwYW4gdGFiaW5kZXg9IjAiIHRpdGxlPSJSZW1vdmUgQXR0YWNobWVudCIgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXIiIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSByZW1vdmUtYXR0YWNobWVudCIgZGF0YS1maWVsZD0icmVtb3ZlQXR0YWNobWVudCIgZGF0YS1hdHRhY2htZW50SWQ9JyArIHJvdy5pZCArICc+PC9zcGFuPicKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAiYkxlbmd0aENoYW5nZSI6IGZhbHNlLAogICAgICAgICAgICAgICAgY29sdW1uRGVmczogW3sKICAgICAgICAgICAgICAgICAgICAidGFyZ2V0cyI6ICdfYWxsJywKICAgICAgICAgICAgICAgICAgICAicmVuZGVyIjogJC5mbi5kYXRhVGFibGUucmVuZGVyLnRleHQoKQogICAgICAgICAgICAgICAgfV0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBiaW5kR3JpZER5bmFtaWNGaWx0ZXJzID0gZnVuY3Rpb24gKGZpbHRlcnNEYXRhLCBwcmVmaXgsIGlkKSB7CiAgICAgICAgLy9BZGQgZmlsdGVycyB0byB0aGUgZGF0YSB0YWJsZS4KICAgICAgICB2YXIgZGF0YVRhYmxlc19sZW5ndGggPSAkKCcuZGF0YVRhYmxlc19sZW5ndGgnKTsKICAgICAgICBkYXRhVGFibGVzX2xlbmd0aC5hZGRDbGFzcygnY29sLXNtLTEyJyk7CiAgICAgICAgZGF0YVRhYmxlc19sZW5ndGgucGFyZW50KCkucmVtb3ZlQ2xhc3MoImNvbC14cy0yIik7CiAgICAgICAgYXBwbGljYXRpb25OYW1lID09IEFMRVJUX0NPTkZJR19UWVBFLkFESE9DX0FMRVJUID8gZGF0YVRhYmxlc19sZW5ndGgucGFyZW50KCI6bm90KCcuZGF0YVRhYmxlc193cmFwcGVyJykiKS5hZGRDbGFzcygiY29sLXhzLTkiKSA6IGRhdGFUYWJsZXNfbGVuZ3RoLnBhcmVudCgiOm5vdCgnLmRhdGFUYWJsZXNfd3JhcHBlcicpIikuYWRkQ2xhc3MoImNvbC14cy0xMCIpOwogICAgICAgIGRhdGFUYWJsZXNfbGVuZ3RoLnBhcmVudCgiOm5vdCgnLmRhdGFUYWJsZXNfd3JhcHBlcicpIikubmV4dCgpLnJlbW92ZUNsYXNzKCJjb2wteHMtMTAiKTsKICAgICAgICBhcHBsaWNhdGlvbk5hbWUgPT0gQUxFUlRfQ09ORklHX1RZUEUuQURIT0NfQUxFUlQgPyBkYXRhVGFibGVzX2xlbmd0aC5wYXJlbnQoIjpub3QoJy5kYXRhVGFibGVzX3dyYXBwZXInKSIpLm5leHQoKS5hZGRDbGFzcygiY29sLXhzLTMiKSA6IGRhdGFUYWJsZXNfbGVuZ3RoLnBhcmVudCgiOm5vdCgnLmRhdGFUYWJsZXNfd3JhcHBlcicpIikubmV4dCgpLmFkZENsYXNzKCJjb2wteHMtMiIpOwogICAgICAgIGRhdGFUYWJsZXNfbGVuZ3RoLmZpbmQoImxhYmVsIikuYWRkQ2xhc3MoJ2NvbC14cy0yJyk7CiAgICAgICAgZGF0YVRhYmxlc19sZW5ndGguZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBkdEJ1dHRvbnMgPSAnPGRpdiBjbGFzcz0iZGF0YVRhYmxlLXRvcC1kaXNwb3NpdGlvbiBjb2wteHMtMTAiPic7CiAgICAgICAgICAgICQuZWFjaChmaWx0ZXJzRGF0YSwgZnVuY3Rpb24gKGluZGV4LCBvYmopIHsKICAgICAgICAgICAgICAgIGlmIChvYmouY2xvc2VkIHx8IG9iai5pc0Nsb3NlZCkgewogICAgICAgICAgICAgICAgICAgIGR0QnV0dG9ucyArPSAnPGRpdiBjbGFzcz0iY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBjaGVja2JveC1pbmxpbmUgbS1sLTMgY2hlY2tib3gtcG9zLWFicyI+JzsKICAgICAgICAgICAgICAgICAgICBkdEJ1dHRvbnMgKz0gJzxpbnB1dCBpZD0iZmlsdGVyJyArIGluZGV4ICsgJyIgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJkeW5hbWljLWZpbHRlcnMiIG5hbWU9InJlbGF0ZWRSZXN1bHRzIiBkYXRhLWNsb3NlZD0iJyArIG9iai5pc0Nsb3NlZCArICciIHZhbHVlPSInICsgb2JqLnZhbHVlICsgJyIgLz4gPGxhYmVsIGNsYXNzPSJtLXItMzAiICBmb3I9ImZpbHRlcicgKyBpbmRleCArICciPicgKyBvYmoudmFsdWUgKyAnPC9sYWJlbD48L2Rpdj4nCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGR0QnV0dG9ucyArPSAnPGRpdiBjbGFzcz0iY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBjaGVja2JveC1pbmxpbmUgbS1sLTMgY2hlY2tib3gtcG9zLWFicyI+JzsKICAgICAgICAgICAgICAgICAgICBkdEJ1dHRvbnMgKz0gJzxpbnB1dCBpZD0iZmlsdGVyJyArIGluZGV4ICsgJyIgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJkeW5hbWljLWZpbHRlcnMiIG5hbWU9InJlbGF0ZWRSZXN1bHRzIiBkYXRhLWNsb3NlZD0iJyArIG9iai5pc0Nsb3NlZCArICciIGNoZWNrZWQ9ImNoZWNrZWQiIHZhbHVlPSInICsgb2JqLnZhbHVlICsgJyIgLz4gPGxhYmVsIGNsYXNzPSJtLXItMzAiIGZvcj0iZmlsdGVyJyArIGluZGV4ICsgJyI+JyArIG9iai52YWx1ZSArICc8L2xhYmVsPjwvZGl2PicKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGR0QnV0dG9ucyArPSAnPC9kaXY+JzsKICAgICAgICAgICAgZHRCdXR0b25zID0gZHRCdXR0b25zICsgJzwvZGl2Pic7CiAgICAgICAgICAgIGlmICh0aGlzLmlkICE9PSAnYXJjaGl2ZWRBbGVydHNUYWJsZV9sZW5ndGgnICYmIHRoaXMuaWQgIT09ICdhY3Rpdml0aWVzVGFibGVfbGVuZ3RoJykKICAgICAgICAgICAgICAgICQodGhpcykuYXBwZW5kKGR0QnV0dG9ucyk7CiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuZHluYW1pYy1maWx0ZXJzJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGFsZXJ0RGV0YWlsc1RhYmxlOwogICAgICAgICAgICAgICAgdmFyIGZyZXFTZWxlY3RlZCA9ICIiOwogICAgICAgICAgICAgICAgaWYgKCQoIiNmcmVxdWVuY3lOYW1lcyIpKSB7CiAgICAgICAgICAgICAgICAgICAgZnJlcVNlbGVjdGVkID0gJCgiI2ZyZXF1ZW5jeU5hbWVzIikudmFsKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyQXJyYXkgPSBbXTsKICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJWYWx1ZXMgPSBbXTsKICAgICAgICAgICAgICAgICQoJy5keW5hbWljLWZpbHRlcnMnKS5lYWNoKGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclZhbHVlcy5wdXNoKCQodGhpcykudmFsKCkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBmaWx0ZXJBcnJheS5wdXNoKCQodGhpcykuaXMoJzpjaGVja2VkJykpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHByZWZpeCArICJmaWx0ZXJzX3N0b3JlIiwgSlNPTi5zdHJpbmdpZnkoZmlsdGVyQXJyYXkpKTsKICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0ocHJlZml4ICsgImZpbHRlcnNfdmFsdWUiLCBKU09OLnN0cmluZ2lmeShmaWx0ZXJWYWx1ZXMpKTsKICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0ocHJlZml4ICsgImlkIiwgaWQpOwogICAgICAgICAgICAgICAgdmFyIHVybDsKICAgICAgICAgICAgICAgIGlmIChhcHBsaWNhdGlvbk5hbWUgPT0gJ0xpdGVyYXR1cmUgU2VhcmNoIEFsZXJ0JykgewogICAgICAgICAgICAgICAgICAgIGFsZXJ0RGV0YWlsc1RhYmxlID0gJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLkRhdGFUYWJsZSgpOwogICAgICAgICAgICAgICAgICAgIHVybCA9IGxpc3RDb25maWdVcmwgKyAiP2ZpbHRlcnM9IiArIGZpbHRlclZhbHVlcy5qb2luKCIsIikKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgYWxlcnREZXRhaWxzVGFibGUgPSAkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuRGF0YVRhYmxlKCk7CiAgICAgICAgICAgICAgICAgICAgdXJsID0gbGlzdENvbmZpZ1VybCArICImZnJlcXVlbmN5PSIgKyBmcmVxU2VsZWN0ZWQgKyAiJmlzRmlsdGVyUmVxdWVzdD10cnVlJmZpbHRlcnM9IiArIEpTT04uc3RyaW5naWZ5KGZpbHRlclZhbHVlcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhbGVydERldGFpbHNUYWJsZS5hamF4LnVybCh1cmwpLmxvYWQoKQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICB9OwoKICAgIHZhciBpc0FsZXJ0UGVyc2lzdGVkSW5TZXNzaW9uU3RvcmFnZSA9IGZ1bmN0aW9uIChwcmVmaXgpIHsKICAgICAgICB2YXIgYyA9IHNpZ25hbC51dGlscy5nZXRRdWVyeVN0cmluZygiY29uZmlnSWQiKTsKICAgICAgICByZXR1cm4gYyA/IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0ocHJlZml4ICsgImlkIikgPT0gYyA6IGZhbHNlCiAgICB9OwoKICAgIHZhciByZW1vdmVGaWx0ZXJzRnJvbVNlc3Npb25TdG9yYWdlID0gZnVuY3Rpb24gKHByZWZpeCkgewogICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0ocHJlZml4ICsgImZpbHRlcnNfc3RvcmUiKTsKICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKHByZWZpeCArICJmaWx0ZXJzX3ZhbHVlIik7CiAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShwcmVmaXggKyAiaWQiKTsKICAgIH07CgogICAgdmFyIG9wZW5TYXZlVmlld01vZGFsID0gZnVuY3Rpb24gKGZpbHRlckluZGV4LCBhcHBsaWNhdGlvbk5hbWUsIHZpZXdJZCkgewogICAgICAgIHZhciBzeXN0ZW1EZWZhdWx0ID0gWyJTeXN0ZW0gVmlldyJdOwogICAgICAgIHZhciB2aWV3SW5mbzsKCiAgICAgICAgLy9zYXZpbmcgbmV3IHZpZXcKICAgICAgICAkKCIuc2F2ZVZpZXciKS51bmJpbmQoJ2NsaWNrJyk7CiAgICAgICAgJCgnLnNhdmVWaWV3Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2aWV3SW5mbyA9IGdlbmVyYXRlVmlld0luZm8oZmlsdGVySW5kZXgpOwoKICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19maWx0ZXJzJykudmFsKEpTT04uc3RyaW5naWZ5KHZpZXdJbmZvLmZpbHRlck1hcCkpOwogICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X2NvbHVtbkxpc3QnKS52YWwodmlld0luZm8ubm90VmlzaWJsZUNvbHVtbik7CiAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfYWxlcnRUeXBlJykudmFsKGFwcGxpY2F0aW9uTmFtZSk7CiAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfc29ydGluZycpLnZhbChKU09OLnN0cmluZ2lmeSh2aWV3SW5mby5zb3J0ZWRDb2x1bW4pKTsKICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19hZHZhbmNlZF9maWx0ZXInKS52YWwodmlld0luZm8uYWR2YW5jZWRGaWx0ZXIpOwogICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICNjdXJyZW50X3ZpZXdfaWQnKS52YWwodmlld0lkKTsKICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAuc2F2ZV9idXR0b25zJykuc2hvdygpOwogICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsJykubW9kYWwoJ3Nob3cnKTsKICAgICAgICB9KQoKICAgICAgICAvL3VwZGF0aW5nIGV4aXN0aW5nIHZpZXcKICAgICAgICAkKCIudXBkYXRlVmlldyIpLnVuYmluZCgnY2xpY2snKTsKICAgICAgICAkKCcudXBkYXRlVmlldycpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmlld0luZm8gPSBnZW5lcmF0ZVZpZXdJbmZvKGZpbHRlckluZGV4KTsKICAgICAgICAgICAgaWYgKCQuaW5BcnJheSgkKCcudmlld1NlbGVjdCA6c2VsZWN0ZWQnKS50ZXh0KCkucmVwbGFjZSgiKGRlZmF1bHQpIiwgIiIpLnRyaW0oKSwgc3lzdGVtRGVmYXVsdCkgIT0gLTEpIHsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfZmlsdGVycycpLnZhbChKU09OLnN0cmluZ2lmeSh2aWV3SW5mby5maWx0ZXJNYXApKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfY29sdW1uTGlzdCcpLnZhbCh2aWV3SW5mby5ub3RWaXNpYmxlQ29sdW1uKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfYWxlcnRUeXBlJykudmFsKGFwcGxpY2F0aW9uTmFtZSk7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X3NvcnRpbmcnKS52YWwoSlNPTi5zdHJpbmdpZnkodmlld0luZm8uc29ydGVkQ29sdW1uKSk7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X2FkdmFuY2VkX2ZpbHRlcicpLnZhbCh2aWV3SW5mby5hZHZhbmNlZEZpbHRlcik7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICNjdXJyZW50X3ZpZXdfaWQnKS52YWwodmlld0lkKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgLnNhdmVfYnV0dG9ucycpLnNob3coKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwnKS5tb2RhbCgnc2hvdycpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgT2JqZWN0KCk7CiAgICAgICAgICAgICAgICByZXF1ZXN0WyduYW1lJ10gPSAkKCcudmlld1NlbGVjdCA6c2VsZWN0ZWQnKS50ZXh0KCkucmVwbGFjZSgiKGRlZmF1bHQpIiwgIiIpLnRyaW0oKTsKICAgICAgICAgICAgICAgIHJlcXVlc3RbJ2ZpbHRlck1hcCddID0gSlNPTi5zdHJpbmdpZnkodmlld0luZm8uZmlsdGVyTWFwKTsKICAgICAgICAgICAgICAgIHJlcXVlc3RbJ2NvbHVtbkxpc3QnXSA9IHZpZXdJbmZvLm5vdFZpc2libGVDb2x1bW4udG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgIHJlcXVlc3RbJ2FsZXJ0VHlwZSddID0gYXBwbGljYXRpb25OYW1lOwogICAgICAgICAgICAgICAgcmVxdWVzdFsnaWQnXSA9ICQoJy52aWV3U2VsZWN0JykudmFsKCk7CiAgICAgICAgICAgICAgICByZXF1ZXN0Wydzb3J0aW5nJ10gPSBKU09OLnN0cmluZ2lmeSh2aWV3SW5mby5zb3J0ZWRDb2x1bW4pOwogICAgICAgICAgICAgICAgcmVxdWVzdFsnYWR2YW5jZWRGaWx0ZXInXSA9IHZpZXdJbmZvLmFkdmFuY2VkRmlsdGVyOwogICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6IHVwZGF0ZVZpZXdVcmwsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlcXVlc3QsCiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIiwKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZVVSTCA9ICQobG9jYXRpb24pLmF0dHIoImhyZWYiKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhZ2VVUkwuaW5kZXhPZigidmlld0lkIikgIT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHBhZ2VVUkwuc2xpY2UoMCwgcGFnZVVSTC5pbmRleE9mKCJ2aWV3SWQiKSArIDcpICsgZGF0YS52aWV3SWQKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYWdlVVJMLmluZGV4T2YoIiMiKSAhPSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VVUkwgPSBwYWdlVVJMLnNsaWNlKDAsIHBhZ2VVUkwuaW5kZXhPZigiIyIpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gcGFnZVVSTCArICImdmlld0lkPSIgKyBkYXRhLnZpZXdJZAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuZXJyb3JNZXNzYWdlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dFcnJvck5vdGlmaWNhdGlvbihkYXRhLmVycm9yTWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIC8vc2VsZWN0aW5nIGFub3RoZXIgdmlldwogICAgICAgICQoJy52aWV3U2VsZWN0JykudW5iaW5kKCdjbGljaycpOwogICAgICAgICQoJy52aWV3U2VsZWN0Jykub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHBhZ2VVUkwgPSAkKGxvY2F0aW9uKS5hdHRyKCJocmVmIik7CiAgICAgICAgICAgIHZhciBzZWxlY3RlZFZpZXcgPSAkKCcudmlld1NlbGVjdCcpLnZhbCgpOwogICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdpc1ZpZXdDYWxsJywgJ3RydWUnKTsKICAgICAgICAgICAgaWYgKHBhZ2VVUkwuaW5kZXhPZigidmlld0lkIikgIT0gLTEpIHsKICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gcGFnZVVSTC5zbGljZSgwLCBwYWdlVVJMLmluZGV4T2YoInZpZXdJZCIpICsgNykgKyBzZWxlY3RlZFZpZXcKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIChwYWdlVVJMLmluZGV4T2YoIiMiKSAhPSAtMSkgewogICAgICAgICAgICAgICAgICAgIHBhZ2VVUkwgPSBwYWdlVVJMLnNsaWNlKDAsIHBhZ2VVUkwuaW5kZXhPZigiIyIpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBwYWdlVVJMICsgIiZ2aWV3SWQ9IiArIHNlbGVjdGVkVmlldwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIC8vZGVsZXRpbmcgb3IgZWRpdGluZyBzZWxlY3RlZCB2aWV3CiAgICAgICAgJCgnLmVkaXRWaWV3JykudW5iaW5kKCdjbGljaycpOwogICAgICAgICQoJy5lZGl0VmlldycpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmlld0luZm8gPSBnZW5lcmF0ZVZpZXdJbmZvKGZpbHRlckluZGV4KTsKCiAgICAgICAgICAgIGlmICgkLmluQXJyYXkoJCgnLnZpZXdTZWxlY3QgOnNlbGVjdGVkJykudGV4dCgpLnJlcGxhY2UoIihkZWZhdWx0KSIsICIiKS50cmltKCksIHN5c3RlbURlZmF1bHQpID09IC0xKSB7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X25hbWUnKS52YWwoJCgnLnZpZXdTZWxlY3QgOnNlbGVjdGVkJykudGV4dCgpLnJlcGxhY2UoIihkZWZhdWx0KSIsICIiKSk7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X2RlZmF1bHQnKS5wcm9wKCdjaGVja2VkJywgKCQoJy52aWV3U2VsZWN0IDpzZWxlY3RlZCcpLnRleHQoKS5pbmRleE9mKCIoZGVmYXVsdCkiKSAhPSAtMSkpOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19pZCcpLnZhbCgkKCcudmlld1NlbGVjdCA6c2VsZWN0ZWQnKS52YWwoKSk7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X2ZpbHRlcnMnKS52YWwoSlNPTi5zdHJpbmdpZnkodmlld0luZm8uZmlsdGVyTWFwKSk7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X2NvbHVtbkxpc3QnKS52YWwodmlld0luZm8ubm90VmlzaWJsZUNvbHVtbik7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X3NvcnRpbmcnKS52YWwoSlNPTi5zdHJpbmdpZnkodmlld0luZm8uc29ydGVkQ29sdW1uKSk7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X2FkdmFuY2VkX2ZpbHRlcicpLnZhbCh2aWV3SW5mby5hZHZhbmNlZEZpbHRlcik7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X2FsZXJ0VHlwZScpLnZhbChhcHBsaWNhdGlvbk5hbWUpOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAuZWRpdF9idXR0b25zJykuc2hvdygpOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCcpLm1vZGFsKCdzaG93Jyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKCcjYWxlcnQtdmlldy1tb2RhbCcpLm1vZGFsKCdzaG93Jyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KQogICAgfTsKCiAgICB2YXIgZ2VuZXJhdGVWaWV3SW5mbyA9IGZ1bmN0aW9uIChmaWx0ZXJJbmRleCkgewogICAgICAgIHZhciBvVGFibGUgPSAkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuRGF0YVRhYmxlKCk7CgogICAgICAgIC8vZ2VuZXJhdGUgZmlsdGVyIHZhbHVlIG1hcAogICAgICAgIHZhciBmaWx0ZXJNYXAgPSBuZXcgT2JqZWN0KCk7CiAgICAgICAgJC5lYWNoKGZpbHRlckluZGV4LCBmdW5jdGlvbiAoaWR4LCBvYmopIHsKICAgICAgICAgICAgdmFyIGZpbHRlclZhbCA9IHlhZGNmLmV4R2V0Q29sdW1uRmlsdGVyVmFsKG9UYWJsZSwgb2JqKTsKICAgICAgICAgICAgaWYgKGZpbHRlclZhbCkgewogICAgICAgICAgICAgICAgZmlsdGVyTWFwW29ial0gPSBmaWx0ZXJWYWwKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAvL2dlbmVyYXRlIGNvbHVtbnMgdmlzaWJsZSBsaXN0CiAgICAgICAgdmFyIG5vdFZpc2libGVDb2x1bW4gPSAkKCcjY29sdW1uSW5kZXgnKS52YWwoKTsKCiAgICAgICAgLy9nZW5lcmF0ZSBzb3J0aW5nIGNvbHVtbiBpbmZvCiAgICAgICAgdmFyIHNvcnRlZENvbHVtbiA9IG5ldyBPYmplY3QoKTsKICAgICAgICBpZiAoJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLmRhdGFUYWJsZSgpLmZuU2V0dGluZ3MoKS5hYVNvcnRpbmdbMF0pIHsKICAgICAgICAgICAgdmFyIHNvcnRlZENvbCA9ICQoJyNhbGVydHNEZXRhaWxzVGFibGUnKS5kYXRhVGFibGUoKS5mblNldHRpbmdzKCkuYWFTb3J0aW5nWzBdWzBdOwogICAgICAgICAgICB2YXIgY29sdW1uTmFtZSA9ICQoJyNhbGVydHNEZXRhaWxzVGFibGUnKS5maW5kKCJ0aCIpLmVxKHNvcnRlZENvbCkuYXR0cigiZGF0YS1maWVsZCIpOwogICAgICAgICAgICB2YXIgaW5kZXggPSAwOwogICAgICAgICAgICBjb2x1bW5TZXEuZXZlcnkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIHNlcU5hbWUgPSBjb2x1bW5TZXFbaW5kZXhdLm5hbWU7CiAgICAgICAgICAgICAgICBpZiAoY29sdW1uTmFtZSA9PSBzZXFOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgc29ydGVkQ29sID0gY29sdW1uU2VxW2luZGV4XS5zZXE7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaW5kZXgrKzsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIHNvcnRlZERpciA9ICQoJyNhbGVydHNEZXRhaWxzVGFibGUnKS5kYXRhVGFibGUoKS5mblNldHRpbmdzKCkuYWFTb3J0aW5nWzBdWzFdOwogICAgICAgICAgICBzb3J0ZWRDb2x1bW5bc29ydGVkQ29sXSA9IHNvcnRlZERpcjsKICAgICAgICB9CgogICAgICAgIC8vZ2VuZXJhdGUgYWR2YW5jZWQgZmlsdGVyIGluZm8KICAgICAgICB2YXIgYWR2YW5jZWRGaXRlcklkID0gJCgnLmFkdmFuY2VkLWZpbHRlci1kcm9wZG93bicpLnZhbCgpOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICdmaWx0ZXJNYXAnOiBmaWx0ZXJNYXAsCiAgICAgICAgICAgICdub3RWaXNpYmxlQ29sdW1uJzogbm90VmlzaWJsZUNvbHVtbiwKICAgICAgICAgICAgJ3NvcnRlZENvbHVtbic6IHNvcnRlZENvbHVtbiwKICAgICAgICAgICAgJ2FkdmFuY2VkRmlsdGVyJzogYWR2YW5jZWRGaXRlcklkCiAgICAgICAgfQogICAgfTsKCiAgICB2YXIgY3JlYXRlU29ydGluZ01hcCA9IGZ1bmN0aW9uIChpbmZvS2V5LCB2aWV3TmFtZSkgewogICAgICAgIHZhciBzb3J0aW5nTWFwID0gW107CiAgICAgICAgdmFyIHNvcnRpbmcgPSB7fTsKICAgICAgICB2YXIgc2Vzc2lvblN0b3JlZFZhbDsKICAgICAgICBpZiAoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSh2aWV3TmFtZSkgPT0gJCgnLnZpZXdTZWxlY3QgOnNlbGVjdGVkJykudGV4dCgpLnJlcGxhY2UoIihkZWZhdWx0KSIsICIiKS50cmltKCkpIHsKICAgICAgICAgICAgc2Vzc2lvblN0b3JlZFZhbCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oaW5mb0tleSk7CiAgICAgICAgfQogICAgICAgIGlmIChzZXNzaW9uU3RvcmVkVmFsKSB7CiAgICAgICAgICAgIHNvcnRpbmcgPSAkLnBhcnNlSlNPTihzZXNzaW9uU3RvcmVkVmFsKTsKICAgICAgICB9IGVsc2UgaWYgKCQoIiNzb3J0ZWRDb2x1bW4iKS52YWwoKSAhPSAiIiAmJiAkKCIjc29ydGVkQ29sdW1uIikudmFsKCkgIT0gInt9IiAmJiBjYWxsaW5nU2NyZWVuID09ICdyZXZpZXcnKSB7CiAgICAgICAgICAgIHNvcnRpbmcgPSAkLnBhcnNlSlNPTigkKCcjc29ydGVkQ29sdW1uJykudmFsKCkpOwogICAgICAgIH0KICAgICAgICAkLmVhY2goc29ydGluZywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgc29ydGluZ01hcC5wdXNoKFtwYXJzZUludChrZXkpLCB2YWx1ZV0pCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHNvcnRpbmdNYXAKICAgIH07CgogICAgdmFyIGNyZWF0ZUZpbHRlck1hcCA9IGZ1bmN0aW9uIChpbmZvS2V5LCB2aWV3TmFtZSkgewogICAgICAgIHZhciBmaWx0ZXJzVmFsdWUgPSBbXTsKICAgICAgICB2YXIgZmlsdGVyTWFwID0ge307CiAgICAgICAgdmFyIHNlc3Npb25TdG9yZWRWYWw7CiAgICAgICAgaWYgKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0odmlld05hbWUpID09ICQoJy52aWV3U2VsZWN0IDpzZWxlY3RlZCcpLnRleHQoKS5yZXBsYWNlKCIoZGVmYXVsdCkiLCAiIikudHJpbSgpKSB7CiAgICAgICAgICAgIHNlc3Npb25TdG9yZWRWYWwgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGluZm9LZXkpOwogICAgICAgIH0KICAgICAgICBpZiAoc2Vzc2lvblN0b3JlZFZhbCAmJiBzZXNzaW9uU3RvcmVkVmFsICE9IHt9KSB7CiAgICAgICAgICAgIGZpbHRlck1hcCA9ICQucGFyc2VKU09OKHNlc3Npb25TdG9yZWRWYWwpOwogICAgICAgIH0gZWxzZSBpZiAoJCgnI2ZpbHRlck1hcCcpLnZhbCgpICE9ICIiICYmICQoJyNmaWx0ZXJNYXAnKS52YWwoKSAhPSAie30iKSB7CiAgICAgICAgICAgIGZpbHRlck1hcCA9ICQucGFyc2VKU09OKCQoJyNmaWx0ZXJNYXAnKS52YWwoKSk7CiAgICAgICAgfQogICAgICAgICQuZWFjaChmaWx0ZXJNYXAsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiAgICAgICAgICAgIHZhciBmaWx0ZXJBcnIgPSBbcGFyc2VJbnQoa2V5KSwgdmFsdWVdOwogICAgICAgICAgICBmaWx0ZXJzVmFsdWUucHVzaChmaWx0ZXJBcnIpCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGZpbHRlcnNWYWx1ZQogICAgfTsKCiAgICB2YXIgY3JlYXRlTGlzdE9mSW5kZXggPSBmdW5jdGlvbiAoaW5mb0tleSwgaXNFdmRhcywgdmlld05hbWUpIHsKICAgICAgICB2YXIgbG9pID0gW107CiAgICAgICAgdmFyIGNvbHVtbkluZGV4ID0gW10KICAgICAgICB2YXIgc2Vzc2lvblN0b3JlZFZhbDsKICAgICAgICBpZiAoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSh2aWV3TmFtZSkgPT0gJCgnLnZpZXdTZWxlY3QgOnNlbGVjdGVkJykudGV4dCgpLnJlcGxhY2UoIihkZWZhdWx0KSIsICIiKS50cmltKCkpIHsKICAgICAgICAgICAgc2Vzc2lvblN0b3JlZFZhbCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oaW5mb0tleSk7CiAgICAgICAgfQogICAgICAgIGlmIChjYWxsaW5nU2NyZWVuID09ICdyZXZpZXcnKSB7CiAgICAgICAgICAgIGlmIChzZXNzaW9uU3RvcmVkVmFsKSB7CiAgICAgICAgICAgICAgICBjb2x1bW5JbmRleCA9IHNlc3Npb25TdG9yZWRWYWwuc3BsaXQoJywnKQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29sdW1uSW5kZXggPSAkKCcjY29sdW1uSW5kZXgnKS52YWwoKS5zcGxpdCgnLCcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICQuZWFjaChjb2x1bW5JbmRleCwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKGlzRXZkYXMpIHsKICAgICAgICAgICAgICAgICAgICBsb2kucHVzaChwYXJzZUludCh0aGlzKSkKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbG9pLnB1c2gocGFyc2VJbnQodGhpcykgKyAxKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxvaQogICAgfTsKCiAgICB2YXIgc2V0U29ydE9yZGVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICQoIiNhbGVydHNEZXRhaWxzVGFibGVSb3ciKS5vbignbW91c2Vkb3duJywgJ3RoJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpbmRleCA9ICQodGhpcykuYXR0cigiZGF0YS1jb2x1bW4taW5kZXgiKTsKICAgICAgICAgICAgZGlyID0gJ2FzYyc7CiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdzb3J0aW5nX2FzYycpKSB7CiAgICAgICAgICAgICAgICBkaXIgPSAnZGVzYycKICAgICAgICAgICAgfSBlbHNlIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdzb3J0aW5nX2Rlc2MnKSkgewogICAgICAgICAgICAgICAgZGlyID0gJ2FzYycKICAgICAgICAgICAgfQogICAgICAgICAgICBpc1ZpZXdJbnN0YW5jZSA9IDA7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBvcGVuQWxlcnRUYWdNb2RhbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmVkaXRBbGVydFRhZ3MnLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIHZhciBwYXJlbnRfcm93ID0gJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJ3RyJyk7CiAgICAgICAgICAgIHZhciBpbmRleCA9ICQodGhpcykuY2xvc2VzdCgndHInKS5pbmRleCgpOwogICAgICAgICAgICB2YXIgcm93T2JqZWN0ID0gdGFibGUucm93cyhpbmRleCkuZGF0YSgpWzBdOwogICAgICAgICAgICB2YXIgYWxlcnRJZCA9IHJvd09iamVjdC5pZDsKICAgICAgICAgICAgdmFyIGV4ZWNDb25maWdJZCA9IHBhcmVudF9yb3cuZmluZCgnLmV4ZWNDb25maWdJZCcpLmF0dHIoInZhbHVlIik7CiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6IGZldGNoVGFnc1VybCwKICAgICAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgICAgICBhbGVydElkOiBhbGVydElkCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgIHZhciBhbGVydFRhZ01vZGFsT2JqID0gJCgnI2FsZXJ0VGFnTW9kYWwnKTsKICAgICAgICAgICAgICAgICAgICBhbGVydFRhZ01vZGFsT2JqLmZpbmQoJyNzaW5nbGVBbGVydFRhZ3MnKS5zZWxlY3QyKHsKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJBZGQgQ2F0ZWdvcmllcyIsCiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICB0YWdzOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByZXN1bHQudGFnTGlzdAoKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBhbGVydFRhZ01vZGFsT2JqLm1vZGFsKCdzaG93Jyk7CiAgICAgICAgICAgICAgICAgICAgYWxlcnRUYWdNb2RhbE9iai5maW5kKCcjc2luZ2xlQWxlcnRUYWdzJykudmFsKHJlc3VsdC5hbGVydFRhZ0xpc3QpOwogICAgICAgICAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI3NpbmdsZUFsZXJ0VGFncycpLnRyaWdnZXIoJ2NoYW5nZScpOwogICAgICAgICAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmouZmluZCgiLmFkZFRhZ3MiKS51bmJpbmQoKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNhdmVUYWdVcmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRUYWdzOiBKU09OLnN0cmluZ2lmeShhbGVydFRhZ01vZGFsT2JqLmZpbmQoJyNzaW5nbGVBbGVydFRhZ3MnKS52YWwoKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRJZDogYWxlcnRJZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjQ29uZmlnSWQ6IGV4ZWNDb25maWdJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuYWpheC5yZWxvYWQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBvcGVuU2luZ2xlQWxlcnRUYWdNb2RhbCA9IGZ1bmN0aW9uICh0YWJsZU9iaiwgdGFnc09iaikgewogICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuZWRpdEFsZXJ0VGFncycsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICB2YXIgcGFyZW50X3JvdyA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCd0cicpOwogICAgICAgICAgICB2YXIgaW5kZXggPSAkKHRoaXMpLmNsb3Nlc3QoJ3RyJykuaW5kZXgoKTsKICAgICAgICAgICAgaWYgKGlzQWJzdHJhY3RWaWV3T3JDYXNlVmlldyhpbmRleCkpIHsKICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kZXggLyAyCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJvd09iamVjdCA9IHRhYmxlT2JqLnJvd3MoaW5kZXgpLmRhdGEoKVswXTsKICAgICAgICAgICAgdmFyIGFsZXJ0SWQgPSByb3dPYmplY3QuaWQ7CiAgICAgICAgICAgIHZhciBleGVjQ29uZmlnSWQgPSBwYXJlbnRfcm93LmZpbmQoJy5leGVjQ29uZmlnSWQnKS5hdHRyKCJ2YWx1ZSIpOwogICAgICAgICAgICB2YXIgYWxlcnRUYWdNb2RhbE9iaiA9ICQoJyNhbGVydFRhZ01vZGFsJyk7CiAgICAgICAgICAgIHZhciAkc2luZ2xlQ2FzZUFsZXJ0VGFncyA9IGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI3NpbmdsZUFsZXJ0VGFncycpOwogICAgICAgICAgICB2YXIgJGdsb2JhbFRhZ3MgPSBhbGVydFRhZ01vZGFsT2JqLmZpbmQoJyNnbG9iYWxUYWdzJyk7CiAgICAgICAgICAgIGFwcGx5U2VsZWN0MkZvclRhZ3MoJHNpbmdsZUNhc2VBbGVydFRhZ3MsIGZldGNoVGFnc1VybCwgJ0Nhc2UgU2VyaWVzIENhdGVnb3JpZXMnLCB0cnVlKTsKICAgICAgICAgICAgYXBwbHlTZWxlY3QyRm9yVGFncygkZ2xvYmFsVGFncywgZmV0Y2hUYWdzVXJsLCAnR2xvYmFsIENhdGVnb3JpZXMnLCBmYWxzZSk7CiAgICAgICAgICAgICRzaW5nbGVDYXNlQWxlcnRUYWdzLmZpbmQoJ29wdGlvbicpLnJlbW92ZSgpCiAgICAgICAgICAgICRnbG9iYWxUYWdzLmZpbmQoJ29wdGlvbicpLnJlbW92ZSgpCiAgICAgICAgICAgICRzaW5nbGVDYXNlQWxlcnRUYWdzLnZhbChudWxsKS50cmlnZ2VyKCJjaGFuZ2UiKTsKICAgICAgICAgICAgJGdsb2JhbFRhZ3MudmFsKG51bGwpLnRyaWdnZXIoImNoYW5nZSIpOwogICAgICAgICAgICAkLmVhY2gocm93T2JqZWN0LmNhc2VTZXJpZXNUYWdzLCBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7CiAgICAgICAgICAgICAgICB2YXIgb3B0aW9uID0gbmV3IE9wdGlvbih2YWx1ZSwgdmFsdWUsIHRydWUsIHRydWUpOwogICAgICAgICAgICAgICAgJHNpbmdsZUNhc2VBbGVydFRhZ3MuYXBwZW5kKG9wdGlvbik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkLmVhY2gocm93T2JqZWN0Lmdsb2JhbFRhZ3MsIGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHsKICAgICAgICAgICAgICAgIHZhciBvcHRpb24gPSBuZXcgT3B0aW9uKHZhbHVlLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAkZ2xvYmFsVGFncy5hcHBlbmQob3B0aW9uKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI3NpbmdsZUFsZXJ0VGFncycpLnRyaWdnZXIoJ2NoYW5nZScpOwogICAgICAgICAgICBhbGVydFRhZ01vZGFsT2JqLmZpbmQoJyNnbG9iYWxUYWdzJykudHJpZ2dlcignY2hhbmdlJyk7CiAgICAgICAgICAgIHZhciBlbmFibGVDYXNlU2VyaWVzVGFncyA9IHJvd09iamVjdC5pc0Nhc2VTZXJpZXNHZW5lcmF0ZWQ7CiAgICAgICAgICAgIGlmICghZW5hYmxlQ2FzZVNlcmllc1RhZ3MpIHsKICAgICAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI3NpbmdsZUFsZXJ0VGFncycpLmF0dHIoJ2Rpc2FibGVkJywgJycpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmoubW9kYWwoJ3Nob3cnKTsKICAgICAgICAgICAgYWxlcnRUYWdNb2RhbE9iai5maW5kKCIuYWRkVGFncyIpLnVuYmluZCgpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiBzYXZlVGFnVXJsLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRUYWdzOiBKU09OLnN0cmluZ2lmeShhbGVydFRhZ01vZGFsT2JqLmZpbmQoJyNzaW5nbGVBbGVydFRhZ3MnKS52YWwoKSksCiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFRhZ3M6IEpTT04uc3RyaW5naWZ5KGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI2dsb2JhbFRhZ3MnKS52YWwoKSksCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZWRDYXNlU2VyaWVzVGFnczogSlNPTi5zdHJpbmdpZnkodGFnc09iai5kZWxldGVkQ2FzZVNlcmllc1RhZ3MpLAogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVkR2xvYmFsVGFnczogSlNPTi5zdHJpbmdpZnkodGFnc09iai5kZWxldGVkR2xvYmFsVGFncyksCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGVkQ2FzZVNlcmllc1RhZ3M6IEpTT04uc3RyaW5naWZ5KHRhZ3NPYmouYWRkZWRDYXNlU2VyaWVzVGFncyksCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGVkR2xvYmFsVGFnczogSlNPTi5zdHJpbmdpZnkodGFnc09iai5hZGRlZEdsb2JhbFRhZ3MpLAogICAgICAgICAgICAgICAgICAgICAgICBhbGVydElkOiBhbGVydElkLAogICAgICAgICAgICAgICAgICAgICAgICBleGVjQ29uZmlnSWQ6IGV4ZWNDb25maWdJZAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocGF5bG9hZCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF5bG9hZC5zdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlT2JqLmFqYXgucmVsb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLk5vdGlmaWNhdGlvbi5ub3RpZnkoJ3N1Y2Nlc3MnLCAndG9wIHJpZ2h0JywgIlN1Y2Nlc3MiLCBwYXlsb2FkLm1lc3NhZ2UsIHthdXRvSGlkZURlbGF5OiAyMDAwfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLk5vdGlmaWNhdGlvbi5ub3RpZnkoJ2Vycm9yJywgJ3RvcCByaWdodCcsICJFcnJvciIsIHBheWxvYWQubWVzc2FnZSwge2F1dG9IaWRlRGVsYXk6IDIwMDB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkKCcjc2luZ2xlLWNhc2UtYWxlcnQtc3Bpbm5lcicpLmFkZENsYXNzKCdoaWRkZW4nKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICQoJyNzaW5nbGUtY2FzZS1hbGVydC1zcGlubmVyJykucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIHBvcHVsYXRlQWR2YW5jZWRGaWx0ZXJTZWxlY3QgPSBmdW5jdGlvbiAoYWxlcnRUeXBlKSB7CgogICAgICAgICQoIi5hZHZhbmNlZC1maWx0ZXItZHJvcGRvd24iKS5zZWxlY3QyKHsKICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICQuaTE4bi5fKCdzZWxlY3RPbmUnKSwKICAgICAgICAgICAgYWxsb3dDbGVhcjogdHJ1ZSwKICAgICAgICAgICAgYWpheDogewogICAgICAgICAgICAgICAgdXJsOiBmZXRjaEFkdkZpbHRlclVybCwKICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCiAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgIHF1aWV0TWlsbGlzOiA1MCwKICAgICAgICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uIChwYXJhbXMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICBhbGVydFR5cGU6IGFsZXJ0VHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgdGVybTogcGFyYW1zLnRlcm0gfHwgJycsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhcmFtcy5wYWdlIHx8IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogcGFyYW1zLm1heCB8fCAzMAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcHJvY2Vzc1Jlc3VsdHM6IGZ1bmN0aW9uIChkYXRhLCBwYXJhbXMpIHsKICAgICAgICAgICAgICAgICAgICBwYXJhbXMucGFnZSA9IHBhcmFtcy5wYWdlIHx8IDE7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0czogJC5tYXAoZGF0YS5saXN0LCBmdW5jdGlvbiAoZmlsdGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGZpbHRlci5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBmaWx0ZXIuaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmU6IChwYXJhbXMucGFnZSAqIDMwKSA8IGRhdGEudG90YWxDb3VudAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAvL3NlbGVjdCBhZHZhbmNlZCBmaWx0ZXIgYmFzZWQgb24gY3VycmVudCB2aWV3CiAgICAgICAgaWYgKCQoJyNhZHZhbmNlZEZpbHRlclZpZXcnKS52YWwoKSkgewogICAgICAgICAgICB2YXIgYWR2YW5jZWRGaWx0ZXJWaWV3ID0gJC5wYXJzZUpTT04oJCgnI2FkdmFuY2VkRmlsdGVyVmlldycpLnZhbCgpKTsKICAgICAgICAgICAgdmFyIG9wdGlvbiA9IG5ldyBPcHRpb24oYWR2YW5jZWRGaWx0ZXJWaWV3Lm5hbWUsIGFkdmFuY2VkRmlsdGVyVmlldy5pZCwgdHJ1ZSwgdHJ1ZSk7CiAgICAgICAgICAgICQoIi5hZHZhbmNlZC1maWx0ZXItZHJvcGRvd24iKS5hcHBlbmQob3B0aW9uKS50cmlnZ2VyKCdjaGFuZ2UnKTsKICAgICAgICB9CgogICAgICAgICQoJyNhZGRBZHZhbmNlZEZpbHRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc2lnbmFsLmFkdmFuY2VkRmlsdGVyLmluaXRpYWxpemVBZHZhbmNlZEZpbHRlcnMoJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwnKSk7CiAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNzZWxlY3RPcGVyYXRvcicpLmVtcHR5KCkuYXBwZW5kKCc8b3B0aW9uIHNlbGVjdGVkPSJzZWxlY3RlZCIgdmFsdWU9IiI+U2VsZWN0IE9wZXJhdG9yPC9vcHRpb24+Jyk7CiAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNuYW1lJykudmFsKCcnKTsKICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI2Rlc2NyaXB0aW9uJykudmFsKCcnKTsKICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI3F1ZXJ5SlNPTicpLnZhbCgnJyk7CiAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNhbGVydFR5cGUnKS52YWwoJycpOwogICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAjYnVpbGRlckFsbCcpLmZpbmQoJy5leHByZXNzaW9uJykucmVtb3ZlKCk7CiAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsIC5kZWxldGVBZHZGaWx0ZXInKS5hZGRDbGFzcygnaGlkZScpOwogICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAuZmlsdGVyc1dpdGhvdXRTYXZpbmcnKS5yZW1vdmVDbGFzcygnaGlkZScpOwogICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCcpLm1vZGFsKCdzaG93Jyk7CgogICAgICAgIH0pOwoKICAgICAgICAkKCcjZWRpdEFkdmFuY2VkRmlsdGVyJykudW5iaW5kKCkub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgYWR2YW5jZWRGaWx0ZXJJZCA9ICQoJy5hZHZhbmNlZC1maWx0ZXItZHJvcGRvd24nKS52YWwoKTsKICAgICAgICAgICAgaWYgKGFkdmFuY2VkRmlsdGVySWQpIHsKICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiBmZXRjaEFkdmFuY2VkRmlsdGVySW5mb1VybCwKICAgICAgICAgICAgICAgICAgICBkYXRhOiB7J2FkdmFuY2VkRmlsdGVyLmlkJzogYWR2YW5jZWRGaWx0ZXJJZH0sCiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNzZWxlY3RPcGVyYXRvcicpLmVtcHR5KCkuYXBwZW5kKCc8b3B0aW9uIHNlbGVjdGVkPSJzZWxlY3RlZCIgdmFsdWU9IiI+U2VsZWN0IE9wZXJhdG9yPC9vcHRpb24+Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNuYW1lJykudmFsKHJlc3VsdC5uYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI2Rlc2NyaXB0aW9uJykudmFsKHJlc3VsdC5kZXNjcmlwdGlvbik7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNxdWVyeUpTT04nKS52YWwocmVzdWx0LkpTT05RdWVyeSk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNhbGVydFR5cGUnKS52YWwoYWxlcnRUeXBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI2ZpbHRlcklkJykudmFsKGFkdmFuY2VkRmlsdGVySWQpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAuZmlsdGVyc1dpdGhvdXRTYXZpbmcnKS5hZGRDbGFzcygnaGlkZScpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAuZGVsZXRlQWR2RmlsdGVyJykucmVtb3ZlQ2xhc3MoJ2hpZGUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgLm1vZGFsLXRpdGxlJykuaHRtbCgiRWRpdCBGaWx0ZXIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsLmFkdmFuY2VkRmlsdGVyLmluaXRpYWxpemVBZHZhbmNlZEZpbHRlcnMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwnKS5tb2RhbCgnc2hvdycpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgICQoIi5hZHZhbmNlZC1maWx0ZXItZHJvcGRvd24iKS5vbigiY2hhbmdlIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdGFibGUuYWpheC5yZWxvYWQoKQogICAgICAgIH0pOwogICAgfTsKCiAgICByZXR1cm4gewogICAgICAgIG9wZW5BbGVydENvbW1lbnRNb2RhbDogb3BlbkFsZXJ0Q29tbWVudE1vZGFsLAogICAgICAgIG9wZW5DYXNlSGlzdG9yeU1vZGFsOiBvcGVuQ2FzZUhpc3RvcnlNb2RhbCwKICAgICAgICByZXN0YXJ0UmV2aWV3OiByZXN0YXJ0UmV2aWV3LAogICAgICAgIG9wZW5TaW1pbGFyQ2FzZXNNb2RhbDogb3BlblNpbWlsYXJDYXNlc01vZGFsLAogICAgICAgIGFwcGx5QnVzaW5lc3NSdWxlczogYXBwbHlCdXNpbmVzc1J1bGVzLAogICAgICAgIHNob3dBdHRhY2htZW50TW9kYWw6IG9wZW5BdHRhY2htZW50TW9kYWwsCiAgICAgICAgYmluZEdyaWREeW5hbWljRmlsdGVyczogYmluZEdyaWREeW5hbWljRmlsdGVycywKICAgICAgICBlbmFibGVNZW51VG9vbHRpcHM6IGVuYWJsZU1lbnVUb29sdGlwcywKICAgICAgICBkaXNhYmxlVG9vbHRpcHM6IGRpc2FibGVUb29sdGlwcywKICAgICAgICBzb3J0SWNvbkhhbmRsZXI6IHNvcnRJY29uSGFuZGxlciwKICAgICAgICBpc0FsZXJ0UGVyc2lzdGVkSW5TZXNzaW9uU3RvcmFnZTogaXNBbGVydFBlcnNpc3RlZEluU2Vzc2lvblN0b3JhZ2UsCiAgICAgICAgcmVtb3ZlRmlsdGVyc0Zyb21TZXNzaW9uU3RvcmFnZTogcmVtb3ZlRmlsdGVyc0Zyb21TZXNzaW9uU3RvcmFnZSwKICAgICAgICBvcGVuU2F2ZVZpZXdNb2RhbDogb3BlblNhdmVWaWV3TW9kYWwsCiAgICAgICAgY3JlYXRlU29ydGluZ01hcDogY3JlYXRlU29ydGluZ01hcCwKICAgICAgICBjcmVhdGVGaWx0ZXJNYXA6IGNyZWF0ZUZpbHRlck1hcCwKICAgICAgICBjcmVhdGVMaXN0T2ZJbmRleDogY3JlYXRlTGlzdE9mSW5kZXgsCiAgICAgICAgb3BlbkFsZXJ0VGFnTW9kYWw6IG9wZW5BbGVydFRhZ01vZGFsLAogICAgICAgIHNldFNvcnRPcmRlcjogc2V0U29ydE9yZGVyLAogICAgICAgIG9wZW5TaW5nbGVBbGVydFRhZ01vZGFsOiBvcGVuU2luZ2xlQWxlcnRUYWdNb2RhbCwKICAgICAgICBnZW5lcmF0ZVZpZXdJbmZvOiBnZW5lcmF0ZVZpZXdJbmZvLAogICAgICAgIHBvcHVsYXRlQWR2YW5jZWRGaWx0ZXJTZWxlY3Q6IHBvcHVsYXRlQWR2YW5jZWRGaWx0ZXJTZWxlY3QKICAgIH0KCn0pKCk7CgpmdW5jdGlvbiBzaG93RXJyb3JNZXNzYWdlSW5Nb2RhbCgkbW9kYWwsIHRleHQpIHsKICAgIGNsZWFyX2Vycm9ycygpOwogICAgaWYgKHRleHQpIHsKICAgICAgICB0ZXh0ID0gdGV4dDsKICAgIH0gZWxzZSB7CiAgICAgICAgdGV4dCA9ICdQbGVhc2UgZmlsbCAgdGhlIHJlcXVpcmVkIEZpZWxkcyc7CiAgICB9CiAgICB2YXIgYWxlcnRIdG1sID0gZ2V0RXJyb3JNZXNzYWdlSHRtbCh0ZXh0KTsKICAgICRtb2RhbC5maW5kKCcubW9kYWwtYm9keScpLnByZXBlbmQoYWxlcnRIdG1sKTsKfQoKZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlSHRtbChtc2cpIHsKICAgIHZhciBhbGVydEh0bWwgPSAnPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtZGFuZ2VyIGFsZXJ0LWRpc21pc3NpYmxlIiByb2xlPSJhbGVydCI+ICcgKwogICAgICAgICc8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9ImFsZXJ0Ij4gJyArCiAgICAgICAgJzxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPiAnICsKICAgICAgICAnPHNwYW4gY2xhc3M9InNyLW9ubHkiPjxnOm1lc3NhZ2UgY29kZT0iZGVmYXVsdC5idXR0b24uY2xvc2UubGFiZWwiIC8+PC9zcGFuPiAnICsKICAgICAgICAnPC9idXR0b24+ICcgKyBtc2c7CiAgICAnPC9kaXY+JzsKICAgIHJldHVybiBhbGVydEh0bWw7Cn0KCnZhciBjbGVhcl9lcnJvcnMgPSBmdW5jdGlvbiAoKSB7CiAgICAkKCcubW9kYWwgLm1vZGFsLWJvZHkgLmFsZXJ0JykucmVtb3ZlKCk7Cn07CgpmdW5jdGlvbiBzZWFyY2gobmFtZUtleSwgbXlBcnJheSkgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBteUFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKG15QXJyYXlbaV0ubmFtZSA9PT0gbmFtZUtleSkgewogICAgICAgICAgICByZXR1cm4gbXlBcnJheVtpXTsKICAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIHBvcHVsYXRlVG9waWNEZXRhaWwoJG1vZGFsLCB0b3BpY09iaikgewogICAgJG1vZGFsLmZpbmQoJyNzdGFydERhdGUnKS52YWwodG9waWNPYmouc3RhcnREYXRlKTsKICAgICRtb2RhbC5maW5kKCcjZW5kRGF0ZScpLnZhbCh0b3BpY09iai5lbmREYXRlKTsKICAgICRtb2RhbC5maW5kKCcucHJvZHVjdC1zcGFuJykudGV4dChnZXRQcm9kdWN0TmFtZUxpc3QoSlNPTi5wYXJzZSh0b3BpY09iai5wcm9kdWN0cykpKTsKICAgICRtb2RhbC5maW5kKCcjc3RhcnREYXRlJykuYXR0cigiZGlzYWJsZWQiLCAiIik7CiAgICAkbW9kYWwuZmluZCgnI2VuZERhdGUnKS5hdHRyKCJkaXNhYmxlZCIsICIiKTsKICAgIGlmICh0b3BpY09iai5wcm9kdWN0cykgewogICAgICAgICRtb2RhbC5maW5kKCcjcHJvZHVjdCcpLmF0dHIoImRpc2FibGVkIiwgIiIpOwogICAgfQp9CgpmdW5jdGlvbiBkZXBvcHVsYXRlVG9waWNEZXRhaWwoJG1vZGFsKSB7CiAgICB2YXIgcHJvZHVjdEpzb24gPSAkbW9kYWwuZmluZCgnLnByb2R1Y3QtanNvbi1jb250YWluZXInKS52YWwoKTsKICAgICRtb2RhbC5maW5kKCcjc3RhcnREYXRlJykudmFsKCIiKTsKICAgICRtb2RhbC5maW5kKCcjZW5kRGF0ZScpLnZhbCgiIik7CiAgICAkbW9kYWwuZmluZCgnI3Byb2R1Y3QnKS52YWwoIiIpOwogICAgJG1vZGFsLmZpbmQoJy5wcm9kdWN0LXNwYW4nKS50ZXh0KGdldFByb2R1Y3ROYW1lTGlzdChKU09OLnBhcnNlKHByb2R1Y3RKc29uKSkpOwogICAgJG1vZGFsLmZpbmQoJyNzdGFydERhdGUnKS5yZW1vdmVBdHRyKCJkaXNhYmxlZCIpOwogICAgJG1vZGFsLmZpbmQoJyNlbmREYXRlJykucmVtb3ZlQXR0cigiZGlzYWJsZWQiKTsKICAgICRtb2RhbC5maW5kKCcjcHJvZHVjdCcpLnJlbW92ZUF0dHIoImRpc2FibGVkIik7Cn0KCmZ1bmN0aW9uIGdlbmVyYXRlUHJvZHVjdEpzb24ocHJvZHVjdElkLCBwcm9kdWN0TmFtZSwgbGV2ZWwpIHsKICAgIHZhciB0b3BpY1Byb2R1Y3RWYWx1ZXMgPSB7IjEiOiBbXSwgIjIiOiBbXSwgIjMiOiBbXSwgIjQiOiBbXSwgIjUiOiBbXX07CiAgICB0b3BpY1Byb2R1Y3RWYWx1ZXNbbGV2ZWxdLnB1c2goe25hbWU6IHByb2R1Y3ROYW1lLCBpZDogcHJvZHVjdElkfSk7CiAgICByZXR1cm4gdG9waWNQcm9kdWN0VmFsdWVzOwp9CgpmdW5jdGlvbiBnZXRQcm9kdWN0TmFtZUxpc3Qob2JqKSB7CiAgICB2YXIgcHJvZHVjdEFycmF5ID0gW107CiAgICB2YXIgb2JqQXJyYXkgPSBvYmpbJzMnXTsKICAgICQuZWFjaChvYmpBcnJheSwgZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkgewogICAgICAgIHByb2R1Y3RBcnJheS5wdXNoKHZhbHVlLm5hbWUpOwogICAgfSk7CiAgICByZXR1cm4gcHJvZHVjdEFycmF5LmpvaW4oJywnKTsKfQoKZnVuY3Rpb24gZ2V0UHJvZHVjdEpzb24oYXBwbGljYXRpb25OYW1lLCByb3cpIHsKICAgIHZhciBwcm9kdWN0SnNvbjsKICAgIGlmIChhcHBsaWNhdGlvbk5hbWUgPT0gIkFkLUhvYyBBbGVydCIpIHsKICAgICAgICBpZiAocm93LmZpbmQoJy5yb3ctcHJvZHVjdC1qc29uLWNvbnRhaW5lcicpLnZhbCgpKQogICAgICAgICAgICBwcm9kdWN0SnNvbiA9IEpTT04ucGFyc2Uocm93LmZpbmQoJy5yb3ctcHJvZHVjdC1qc29uLWNvbnRhaW5lcicpLnZhbCgpKTsKICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHByb2R1Y3ROYW1lID0gcm93LmZpbmQoJ3NwYW5bZGF0YS1maWVsZD0icHJvZHVjdE5hbWUiXScpLmF0dHIoImRhdGEtaWQiKTsKICAgICAgICB2YXIgcHJvZHVjdElkID0gcm93LmZpbmQoJy5yb3ctcHJvZHVjdC1pZCcpLnZhbCgpOwogICAgICAgIHZhciBsZXZlbCA9IHJvdy5maW5kKCcucm93LWxldmVsLWlkJykudmFsKCk7CiAgICAgICAgaWYgKCFsZXZlbCkgewogICAgICAgICAgICBsZXZlbCA9IDM7CiAgICAgICAgfQogICAgICAgIHByb2R1Y3RKc29uID0gZ2VuZXJhdGVQcm9kdWN0SnNvbihwcm9kdWN0SWQsIHByb2R1Y3ROYW1lLCBsZXZlbCk7CiAgICB9CiAgICByZXR1cm4gcHJvZHVjdEpzb247Cn0KCmZ1bmN0aW9uIGFwcGx5U2VsZWN0MkZvclRhZ3MoJHNlbGVjdG9yLCB1cmwsIHBsYWNlSG9sZGVyVGV4dCwgaXNDYXNlU2VyaWVzVGFnKSB7CiAgICAkc2VsZWN0b3Iuc2VsZWN0Mih7CiAgICAgICAgbWluaW11bUlucHV0TGVuZ3RoOiAwLAogICAgICAgIG11bHRpcGxlOiB0cnVlLAogICAgICAgIHRhZ3M6IHRydWUsCiAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlSG9sZGVyVGV4dCwKICAgICAgICBhbGxvd0NsZWFyOiB0cnVlLAogICAgICAgIHdpZHRoOiAiMTAwJSIsCiAgICAgICAgY3JlYXRlVGFnOiBmdW5jdGlvbiAodGFnKSB7CgogICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgb3B0aW9uIGlzIGFscmVhZHkgdGhlcmUKICAgICAgICAgICAgZm91bmQgPSBmYWxzZTsKICAgICAgICAgICAgJHNlbGVjdG9yLmZpbmQoIm9wdGlvbiIpLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKCQudHJpbSh0YWcudGVybSkudG9VcHBlckNhc2UoKSA9PT0gJC50cmltKCQodGhpcykudGV4dCgpKS50b1VwcGVyQ2FzZSgpKSB7CiAgICAgICAgICAgICAgICAgICAgcHJldlRhZyA9ICQodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIGlmIGl0J3Mgbm90IHRoZXJlLCB0aGVuIHNob3cgdGhlIHN1Z2dlc3Rpb24KICAgICAgICAgICAgaWYgKCFmb3VuZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBpZDogJC50cmltKHRhZy50ZXJtKSwKICAgICAgICAgICAgICAgICAgICB0ZXh0OiAkLnRyaW0odGFnLnRlcm0pCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBpZDogJC50cmltKHByZXZUYWcudGV4dCgpKSwKICAgICAgICAgICAgICAgICAgICB0ZXh0OiAkLnRyaW0ocHJldlRhZy50ZXh0KCkpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBhamF4OiB7CiAgICAgICAgICAgIHF1aWV0TWlsbGlzOiAyNTAsCiAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICBkYXRhOiBmdW5jdGlvbiAocGFyYW1zKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHRlcm06IHBhcmFtcy50ZXJtLAogICAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhcmFtcy5wYWdlIHx8IDEsCiAgICAgICAgICAgICAgICAgICAgbWF4OiAzMCwKICAgICAgICAgICAgICAgICAgICBsYW5nOiB1c2VyTG9jYWxlLAogICAgICAgICAgICAgICAgICAgIGlzQ2FzZVNlcmllc1RhZzogaXNDYXNlU2VyaWVzVGFnCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9LAogICAgICAgICAgICBwcm9jZXNzUmVzdWx0czogZnVuY3Rpb24gKGRhdGEsIHBhcmFtcykgewogICAgICAgICAgICAgICAgcGFyYW1zLnBhZ2UgPSBwYXJhbXMucGFnZSB8fCAxOwogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiBkYXRhLmxpc3QsCiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbjogewogICAgICAgICAgICAgICAgICAgICAgICBtb3JlOiAocGFyYW1zLnBhZ2UgKiAzMCkgPCBkYXRhLnRvdGFsQ291bnQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7Cn0KCmZ1bmN0aW9uIHNob3dDb21tZW50SWNvbihjdXJyZW50Um93KSB7CiAgICB2YXIgJGJ0bkdyb3VwID0gJChjdXJyZW50Um93KS5jbG9zZXN0KCd0cicpLmZpbmQoJ3RkLmRyb3BEb3duIC5idG4tZ3JvdXAnKTsKICAgIGlmICgkKCRidG5Hcm91cCkuZmluZCgnLmNvbW1lbnQnKS5sZW5ndGggPT09IDApIHsKICAgICAgICAkKCRidG5Hcm91cCkuZmluZCgnLmRyb3Bkb3duLXRvZ2dsZScpLmFmdGVyKCc8aSBjbGFzcz0ibWRpIG1kaS1jaGF0IGJsdWUtMiBmb250LTEzIHBvcy1hYiBjb21tZW50IiB0aXRsZT0iJyArICQuaTE4bi5fKCdjb21tZW50QXZhaWxhYmxlJykgKyAnIj48L2k+Jyk7CiAgICB9Cn0KCmZ1bmN0aW9uIHJlbW92ZUNvbW1lbnRJY29uKGN1cnJlbnRSb3cpIHsKICAgIHZhciAkYnRuR3JvdXAgPSAkKGN1cnJlbnRSb3cpLmNsb3Nlc3QoJ3RyJykuZmluZCgndGQuZHJvcERvd24gLmJ0bi1ncm91cCcpOwogICAgJCgkYnRuR3JvdXApLmZpbmQoJy5kcm9wZG93bi10b2dnbGUnKS5uZXh0KCdpJykucmVtb3ZlKCk7Cn0KCmZ1bmN0aW9uIHJlbW92ZUF0dGFjaG1lbnRJY29uKGN1cnJlbnRSb3cpIHsKICAgIHZhciAkYnRuR3JvdXAgPSAkKGN1cnJlbnRSb3cpLmNsb3Nlc3QoJ3RyJykuZmluZCgndGQuZHJvcERvd24gLmJ0bi1ncm91cCcpOwogICAgaWYgKCQoJGJ0bkdyb3VwKS5maW5kKCcuY29tbWVudCcpLmxlbmd0aCA9PT0gMCkgewogICAgICAgICQoJGJ0bkdyb3VwKS5maW5kKCcuZHJvcGRvd24tdG9nZ2xlJykubmV4dCgnaScpLnJlbW92ZSgpOwogICAgfSBlbHNlIHsKICAgICAgICAkKCRidG5Hcm91cCkuZmluZCgnLmNvbW1lbnQnKS5uZXh0KCdpJykucmVtb3ZlKCk7CiAgICB9Cn0KCmZ1bmN0aW9uIHNob3dBdHRhY2htZW50SWNvbih0clJvdykgewogICAgdmFyICRidG5Hcm91cCA9ICQodHJSb3cpLmZpbmQoJ3RkLmRyb3BEb3duIC5idG4tZ3JvdXAnKTsKICAgIGlmICgkKCRidG5Hcm91cCkuZmluZCgnLmF0dGFjaCcpLmxlbmd0aCA9PT0gMCkgewogICAgICAgIGlmICgkKCRidG5Hcm91cCkuZmluZCgnLmNvbW1lbnQnKS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgJCgkYnRuR3JvdXApLmZpbmQoJy5kcm9wZG93bi10b2dnbGUnKS5hZnRlcignIDxpIGNsYXNzPSJtZGkgbWRpLWF0dGFjaG1lbnQgYmx1ZS0xIGZvbnQtMTMgcG9zLWFiIGF0dGFjaCIgdGl0bGU9IicgKyAkLmkxOG4uXygnYXR0YWNobWVudEF2YWlsYWJsZScpICsgJyI+PC9pPiAnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkKCRidG5Hcm91cCkuZmluZCgnLmNvbW1lbnQnKS5hZnRlcignIDxpIGNsYXNzPSJtZGkgbWRpLWF0dGFjaG1lbnQgYmx1ZS0xIGZvbnQtMTMgcG9zLWFiIGF0dGFjaCIgdGl0bGU9IicgKyAkLmkxOG4uXygnYXR0YWNobWVudEF2YWlsYWJsZScpICsgJyI+PC9pPiAnKTsKICAgICAgICB9CiAgICB9Cn0KCnZhciBpc1NhZmV0eUxlYWRBbGxvd2VkID0gZnVuY3Rpb24gKGxpc3RQcm9kdWN0SWRzLCBzZWxlY3RlZFByb2R1Y3RJZCkgewogICAgcmV0dXJuIGxpc3RQcm9kdWN0SWRzLmluZGV4T2Yoc2VsZWN0ZWRQcm9kdWN0SWQpICE9PSAtMQp9OwoKdmFyIHNldENvbHVtblNlcSA9IGZ1bmN0aW9uIChtYXBTZXEpIHsKICAgIGNvbHVtblNlcSA9IG1hcFNlcQp9Cgp2YXIgc2lnbmFsID0gc2lnbmFsIHx8IHt9CgpzaWduYWwuYWxlcnRDb21tZW50cyA9IChmdW5jdGlvbiAoKSB7CgogICAgdmFyIGxpc3RDb21tZW50cyA9IGZ1bmN0aW9uIChjYXNlSnNvbikgewoKICAgICAgICAvL01vZGFsIG9iamVjdAogICAgICAgIHZhciBjb21tZW50TW9kYWwgPSAkKCcjY29tbWVudE1vZGFsJyk7CgogICAgICAgIC8vUG9wdWxhdGUgdGhlIGV4aXN0aW5nIGNvbW1lbnRzIGFuZCBiaW5kIGV2ZW50cyB0byB0aGVtLgogICAgICAgIHBvcHVsYXRlQ29tbWVudHMoY29tbWVudE1vZGFsLCBjYXNlSnNvbik7CgogICAgICAgIC8vU2V0IHZhbHVlcyB0byB0aGUgbW9kYWwgZWxlbWVudHMuCiAgICAgICAgdmFyIGNvbW1lbnRNZXRhSW5mbyA9ICIiCiAgICAgICAgaWYgKGNhc2VKc29uLmFsZXJ0VHlwZSA9PSAiQWdncmVnYXRlIENhc2UgQWxlcnQiKSB7CiAgICAgICAgICAgIGNvbW1lbnRNZXRhSW5mbyA9ICc8c3BhbiBpZD0icHJvZHVjdE5hbWUiPicgKyBjYXNlSnNvbi5wcm9kdWN0TmFtZSArICc8L3NwYW4+IC0gPHNwYW4gaWQ9ImV2ZW50TmFtZSI+JyArIGNhc2VKc29uLmV2ZW50TmFtZSArICc8L3NwYW4+JwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbW1lbnRNZXRhSW5mbyA9ICc8c3BhbiBpZD0iY2FzZU51bWJlciI+JyArIGNhc2VKc29uLmNhc2VOdW1iZXIgKyAnPC9zcGFuPiAtIDxzcGFuIGlkPSJwcm9kdWN0RmFtaWx5Ij4nICsgY2FzZUpzb24ucHJvZHVjdEZhbWlseSArICc8L3NwYW4+JwogICAgICAgIH0KICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnQtbWV0YS1pbmZvIikuaHRtbChjb21tZW50TWV0YUluZm8pOwogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjYXBwbGljYXRpb24iKS5odG1sKGNhc2VKc29uLmFsZXJ0VHlwZSk7CiAgICAgICAgY29tbWVudE1vZGFsLm1vZGFsKCdzaG93Jyk7CiAgICAgICAgYmluZFNhdmVDb21tZW50KGNvbW1lbnRNb2RhbCk7CiAgICB9OwoKICAgIHZhciBwb3B1bGF0ZUNvbW1lbnRzID0gZnVuY3Rpb24gKGNvbW1lbnRNb2RhbCwgY2FzZUpzb24sIG9uU2lnbmFsU2NyZWVuKSB7CiAgICAgICAgdmFyIHVwZGF0ZWRDb21tZW50cyA9ICQoIiNjb21tZW50Ym94IikudmFsKCk7CiAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgdXJsOiAiL3NpZ25hbC9hbGVydENvbW1lbnQvbGlzdENvbW1lbnRzIiwKICAgICAgICAgICAgZGF0YTogY2FzZUpzb24sCiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI25vLWNvbW1lbnRzIikuYWRkQ2xhc3MoImhpZGUiKTsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnI2NvbW1lbnRib3gnKS5yZW1vdmVDbGFzcygiaGlkZSIpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykuaHRtbCgiVXBkYXRlIik7CiAgICAgICAgICAgICAgICAgICAgaWYodXBkYXRlZENvbW1lbnRzLmxlbmd0aCA+PSByZXN1bHQuY29tbWVudHMubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50Ym94IikudmFsKHVwZGF0ZWRDb21tZW50cyk7CiAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudGJveCIpLnZhbChyZXN1bHQuY29tbWVudHMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRJZCIpLnZhbChyZXN1bHQuaWQpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIuY3JlYXRlZEJ5IikudGV4dCgiTGFzdCBNb2RpZmllZCBieSAiICsgcmVzdWx0Lm1vZGlmaWVkQnkgKyAiIG9uICIgKyByZXN1bHQuZGF0ZVVwZGF0ZWQpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykucHJvcCgiZGlzYWJsZWQiLCB0cnVlKTsKCiAgICAgICAgICAgICAgICB9ZWxzZSBpZih0eXBlb2YgaXNDb21tZW50QWRkZWQgIT0gJ3VuZGVmaW5lZCcgJiYgaXNDb21tZW50QWRkZWQgJiYgb25TaWduYWxTY3JlZW4pewogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudElkIikudmFsKCcnKTsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnLmFkZC1jb21tZW50cycpLmh0bWwoIkFkZCIpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudGJveCIpLnZhbCgnJyk7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIiNuby1jb21tZW50cyIpLnJlbW92ZUNsYXNzKCJoaWRlIik7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoJy5hZGQtY29tbWVudHMnKS5wcm9wKCJkaXNhYmxlZCIsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIuY3JlYXRlZEJ5IikudGV4dCgnJyk7CgogICAgICAgICAgICAgICAgfWVsc2UgaWYodHlwZW9mIGlzQ29tbWVudEFkZGVkICE9ICd1bmRlZmluZWQnICYmIGlzQ29tbWVudEFkZGVkKXsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRJZCIpLnZhbCgnJyk7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoJy5hZGQtY29tbWVudHMnKS5odG1sKCJBZGQiKTsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRib3giKS52YWwoJycpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjbm8tY29tbWVudHMiKS5yZW1vdmVDbGFzcygiaGlkZSIpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykucHJvcCgiZGlzYWJsZWQiLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnI2NvbW1lbnRib3gnKS5hZGRDbGFzcygiaGlkZSIpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIuY3JlYXRlZEJ5IikudGV4dCgnJyk7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRJZCIpLnZhbCgnJyk7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIi5jcmVhdGVkQnkiKS50ZXh0KCcnKTsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnLmFkZC1jb21tZW50cycpLmh0bWwoIkFkZCIpOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykucHJvcCgiZGlzYWJsZWQiLCB0cnVlKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnI2NvbW1lbnRib3gnKS5vbigia2V5dXAiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYoY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50SWQiKS52YWwoKT09IiIgJiYgY29tbWVudE1vZGFsLmZpbmQoJyNjb21tZW50Ym94JykudmFsKCk9PSIiKQogICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnLmFkZC1jb21tZW50cycpLnByb3AoImRpc2FibGVkIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykucHJvcCgiZGlzYWJsZWQiLCBmYWxzZSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiVW5hYmxlIHRvIGxvYWQgcHJldmlvdXMgY29tbWVudHMuIik7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIGJpbmRTYXZlQ29tbWVudCA9IGZ1bmN0aW9uIChjb21tZW50TW9kYWwpIHsKCiAgICAgICAgLy9BZGQgY2xpY2sgZXZlbnQgdG8gdGhlIGFkZCBjb21tZW50IGJ1dHRvbi4KICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiLmFkZC1jb21tZW50cyIpLnVuYmluZCgpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGNhc2VKc29uT2JqQXJyYXkgPSBbXTsKICAgICAgICAgICAgdmFyIGFwcFR5cGUgPSAkKCIjYXBwbGljYXRpb24iKS5odG1sKCk7CiAgICAgICAgICAgIHZhciB2YWxpZGF0ZWRTaWduYWxJZCA9ICQoIiN2YWxpZGF0ZWRTaWduYWxJZCIpLmh0bWwoKTsKICAgICAgICAgICAgdmFyIHRvcGljSWQgPSAkKCIjdG9waWNJZCIpLmh0bWwoKTsKCiAgICAgICAgICAgIGlmIChhcHBUeXBlID09ICcnKSB7CiAgICAgICAgICAgICAgICBhcHBUeXBlID0gY29tbWVudE1vZGFsLmZpbmQoIiNhcHBsaWNhdGlvbiIpLmh0bWwoKTsKICAgICAgICAgICAgICAgIHZhbGlkYXRlZFNpZ25hbElkID0gY29tbWVudE1vZGFsLmZpbmQoIiN2YWxpZGF0ZWRTaWduYWxJZCIpLmh0bWwoKTsKICAgICAgICAgICAgICAgIHRvcGljSWQgPSBjb21tZW50TW9kYWwuZmluZCgiI3RvcGljSWQiKS5odG1sKCkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGNhc2VKc29uT2JqOwogICAgICAgICAgICB2YXIgdXJsOwogICAgICAgICAgICB2YXIgZGF0YTsKICAgICAgICAgICAgLy9DYXNlIEpTT04uCiAgICAgICAgICAgIGNhc2VKc29uT2JqID0gewogICAgICAgICAgICAgICAgImFsZXJ0VHlwZSI6IGFwcFR5cGUsCiAgICAgICAgICAgICAgICAicHJvZHVjdE5hbWUiOiBjb21tZW50TW9kYWwuZmluZCgiI3Byb2R1Y3ROYW1lIikuaHRtbCgpLAogICAgICAgICAgICAgICAgImV2ZW50TmFtZSI6IGNvbW1lbnRNb2RhbC5maW5kKCIjZXZlbnROYW1lIikuaHRtbCgpLAogICAgICAgICAgICAgICAgImNvbW1lbnRzIjogY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50Ym94IikudmFsKCksCiAgICAgICAgICAgICAgICAidmFsaWRhdGVkU2lnbmFsSWQiOiB2YWxpZGF0ZWRTaWduYWxJZCwKICAgICAgICAgICAgICAgICJhc3NpZ25lZFRvIjogY29tbWVudE1vZGFsLmZpbmQoIiNhc3NpZ25lZFRvIikuaHRtbCgpLAogICAgICAgICAgICAgICAgImV4ZWN1dGVkQ29uZmlnSWQiOiBjb21tZW50TW9kYWwuZmluZCgiI2V4ZWN1dGVkQ29uZmlnSWQiKS5odG1sKCksCiAgICAgICAgICAgICAgICAiY29uZmlnSWQiIDogY29tbWVudE1vZGFsLmZpbmQoIiNjb25maWdJZCIpLmh0bWwoKSwKICAgICAgICAgICAgICAgICJ0b3BpY0lkIjogY29tbWVudE1vZGFsLmZpbmQoIiN0b3BpY0lkIikuaHRtbCgpLAogICAgICAgICAgICAgICAgInByb2R1Y3RGYW1pbHkiOiBjb21tZW50TW9kYWwuZmluZCgiI3Byb2RGYW1pbHkiKS5odG1sKCksCiAgICAgICAgICAgICAgICAiY2FzZU51bWJlciI6IGNvbW1lbnRNb2RhbC5maW5kKCIjY2FzZU5vIikuaHRtbCgpLAogICAgICAgICAgICAgICAgInByb2R1Y3RJZCI6IHBhcnNlSW50KGNvbW1lbnRNb2RhbC5maW5kKCIjcHJvZHVjdElkIikuaHRtbCgpKSwKICAgICAgICAgICAgICAgICJwdENvZGUiOiBwYXJzZUludChjb21tZW50TW9kYWwuZmluZCgiI3B0Q29kZSIpLmh0bWwoKSkKCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNhc2VKc29uT2JqQXJyYXkucHVzaChjYXNlSnNvbk9iaik7CiAgICAgICAgICAgIGlmKGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudElkIikudmFsKCkpewogICAgICAgICAgICAgICAgdXJsID0gIi9zaWduYWwvYWxlcnRDb21tZW50L3VwZGF0ZUNvbW1lbnQiOwogICAgICAgICAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICAiYWxlcnRUeXBlIjogYXBwVHlwZSwKICAgICAgICAgICAgICAgICAgICAiY29tbWVudCI6IGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudGJveCIpLnZhbCgpLAogICAgICAgICAgICAgICAgICAgICJpZCI6IGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudElkIikudmFsKCksCiAgICAgICAgICAgICAgICAgICAgImV4ZWN1dGVkQ29uZmlnSWQiOiBjb21tZW50TW9kYWwuZmluZCgiI2V4ZWN1dGVkQ29uZmlnSWQiKS5odG1sKCksCiAgICAgICAgICAgICAgICAgICAgInZhbGlkYXRlZFNpZ25hbElkIjogdmFsaWRhdGVkU2lnbmFsSWQKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgdXJsID0gIi9zaWduYWwvYWxlcnRDb21tZW50L3NhdmVDb21tZW50IjsKICAgICAgICAgICAgICAgIGRhdGEgPSB7ImNhc2VKc29uT2JqQXJyYXkiOiBKU09OLnN0cmluZ2lmeShjYXNlSnNvbk9iakFycmF5KX0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSwKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuc3VjY2VzcykgewogICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2lzVXBkYXRlZCIpLnZhbCgidHJ1ZSIpOwogICAgICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZUNvbW1lbnRzKGNvbW1lbnRNb2RhbCwgY2FzZUpzb25PYmpBcnJheVswXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjb21tZW50Ym94JykudmFsKCcnKS5ibHVyKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBiaW5kRWRpdENvbW1lbnQgPSBmdW5jdGlvbiAoY29tbWVudE1vZGFsKSB7CgogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIucHJldmlvdXMtY29tbWVudHMiKS5maW5kKCcuZWRpdC1jb21tZW50JykuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmZpbmQoIi51cGRhdGUtY29tbWVudCIpLnJlbW92ZUNsYXNzKCJoaWRkZW4iKTsKICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5maW5kKCIuY29tbWVudC1hcmVhIikuYXR0cignZGlzYWJsZWQnLCBmYWxzZSk7CiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoImhpZGRlbiIpCiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBiaW5kRGVsZXRlQ29tbWVudCA9IGZ1bmN0aW9uIChjb21tZW50TW9kYWwsIGNhc2VKc29uKSB7CgogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIucHJldmlvdXMtY29tbWVudHMiKS5maW5kKCcuZGVsZXRlLWNvbW1lbnQnKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBpZCA9IHsKICAgICAgICAgICAgICAgICJpZCI6ICQodGhpcykucGFyZW50KCkuZmluZCgiLmNvbW1lbnRJZCIpLnZhbCgpLAogICAgICAgICAgICAgICAgInZhbGlkYXRlZFNpZ25hbElkIjogJCgiI3ZhbGlkYXRlZFNpZ25hbElkIikudGV4dCgpLAogICAgICAgICAgICAgICAgImFkaG9jQWxlcnRJZCIgOiBjYXNlSnNvbi5hZGhvY0FsZXJ0SWQKICAgICAgICAgICAgfTsKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHVybDogIi9zaWduYWwvYWxlcnRDb21tZW50L2RlbGV0ZUNvbW1lbnQiLAogICAgICAgICAgICAgICAgZGF0YTogaWQsCiAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgcG9wdWxhdGVDb21tZW50cyhjb21tZW50TW9kYWwsIGNhc2VKc29uKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIGJpbmRVcGRhdGVDb21tZW50ID0gZnVuY3Rpb24gKGNvbW1lbnRNb2RhbCwgY2FzZUpzb24pIHsKCgogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIucHJldmlvdXMtY29tbWVudHMiKS5maW5kKCcudXBkYXRlLWNvbW1lbnQnKS5jbGljayhmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmZpbmQoIi5nbHlwaGljb24tcGVuY2lsIikucmVtb3ZlQ2xhc3MoImhpZGRlbiIpOwogICAgICAgICAgICB2YXIgY29tbWVudERhdGEgPSB7CiAgICAgICAgICAgICAgICAiY29tbWVudCI6ICQodGhpcykucGFyZW50KCkuZmluZCgiLmNvbW1lbnQtYXJlYSIpLnZhbCgpLAogICAgICAgICAgICAgICAgImlkIjogJCh0aGlzKS5wYXJlbnQoKS5maW5kKCIuY29tbWVudElkIikudmFsKCksCiAgICAgICAgICAgICAgICAidmFsaWRhdGVkU2lnbmFsSWQiOiAkKCIjdmFsaWRhdGVkU2lnbmFsSWQiKS50ZXh0KCksCiAgICAgICAgICAgICAgICAidG9waWNJZCI6ICQoIiN0b3BpY0lkIikuaHRtbCgpLAogICAgICAgICAgICAgICAgImV4ZWN1dGVkQ29uZmlnSWQiOiBjYXNlSnNvbi5leGVjdXRlZENvbmZpZ0lkLAogICAgICAgICAgICAgICAgImFkaG9jQWxlcnRJZCIgOiBjYXNlSnNvbi5hZGhvY0FsZXJ0SWQKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6ICIvc2lnbmFsL2FsZXJ0Q29tbWVudC91cGRhdGVDb21tZW50IiwKICAgICAgICAgICAgICAgIGRhdGE6IGNvbW1lbnREYXRhLAogICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlLAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3VsdCkgewoKICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZUNvbW1lbnRzKGNvbW1lbnRNb2RhbCwgY2FzZUpzb24pOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfTsKCiAgICByZXR1cm4gewogICAgICAgIGxpc3RfY29tbWVudHM6IGxpc3RDb21tZW50cywKICAgICAgICBwb3B1bGF0ZV9jb21tZW50czogcG9wdWxhdGVDb21tZW50cywKICAgICAgICBzYXZlX2NvbW1lbnQ6IGJpbmRTYXZlQ29tbWVudAogICAgfQp9KSgpOwoKCi8vPSByZXF1aXJlIGFwcC9wdnMvY29tbW9uL3J4X2NvbW1vbi5qcwovLz0gcmVxdWlyZSBhcHAvcHZzL2NvbW1vbi9yeF9hbGVydF91dGlscy5qcwovLz0gcmVxdWlyZSBhcHAvcHZzL2NvbW1vbi9yeF9saXN0X3V0aWxzLmpzCi8vPSByZXF1aXJlIGFwcC9wdnMvYWN0aXZpdHkvYWN0aXZpdGllcy5qcwovLz0gcmVxdWlyZSBhcHAvcHZzL2NvbW1vbi9yeF9oYW5kbGViYXJfZXh0LmpzCi8vPSByZXF1aXJlIGFwcC9wdnMvZGF0YVRhYmxlQWN0aW9uQnV0dG9ucy5qcwovLz0gcmVxdWlyZSBhcHAvcHZzL2FsZXJ0c19yZXZpZXcvYWxlcnRfcmV2aWV3Ci8vPSByZXF1aXJlIGFwcC9wdnMvYWxlcnRDb21tZW50cy9hbGVydENvbW1lbnRzLmpzCgp2YXIgdXNlckxvY2FsID0gImVuIjsKdmFyIGFwcGxpY2F0aW9uTmFtZSA9ICJBZC1Ib2MgQWxlcnQiOwp2YXIgYXBwbGljYXRpb25MYWJlbCA9ICJBZC1Ib2MgQWxlcnQiOwp2YXIgdGFibGU7CnZhciBkaXIgPSAnJzsKdmFyIGluZGV4ID0gLTE7CnZhciBjb21tZW50TGlzdDsKCiQuZm4uZGF0YVRhYmxlLmV4dC5vcmRlclsnZG9tLXByaW9yaXR5J10gPSBmdW5jdGlvbiAoc2V0dGluZ3MsIGNvbCkgewogICAgdmFyIGpzb24gPSAkLnBhcnNlSlNPTihwcmlvcml0aWVzKTsKICAgIHJldHVybiB0aGlzLmFwaSgpLmNvbHVtbihjb2wsIHtvcmRlcjogJ2luZGV4J30pLm5vZGVzKCkubWFwKGZ1bmN0aW9uICh0ZCwgaSkgewogICAgICAgIHZhciBwcmlvcml0eSA9ICQoJ2EnLCB0ZClbMF0uZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb24ubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgaWYgKGpzb25baV1bMF0gPT0gcHJpb3JpdHkpCiAgICAgICAgICAgICAgICByZXR1cm4ganNvbltpXVsxXTsKICAgICAgICB9CiAgICB9KTsKfTsKCiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsKICAgIHZhciBhbGVydERldGFpbHNUYWJsZTsKICAgIGFzc2lnbmVkVG9EYXRhID0gW107CgogICAgdmFyIGNoZWNrZWRJZExpc3QgPSBbXTsKICAgIHZhciBjaGVja2VkUm93TGlzdCA9IFtdOwogICAgc2lnbmFsLmFsZXJ0UmV2aWV3LnNldFNvcnRPcmRlcigpOwoKCiAgICB2YXIgaW5pdEFsZXJ0RGV0YWlsc1RhYmxlID0gZnVuY3Rpb24gKCkgewoKICAgICAgICB2YXIgaXNGaWx0ZXJSZXF1ZXN0ID0gdHJ1ZTsKICAgICAgICB2YXIgZmlsdGVyVmFsdWVzID0gW107CiAgICAgICAgdmFyIHByZWZpeCA9ICJhZGhvY18iOwogICAgICAgIGlmICh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UpIHsKICAgICAgICAgICAgaWYgKHNpZ25hbC5hbGVydFJldmlldy5pc0FsZXJ0UGVyc2lzdGVkSW5TZXNzaW9uU3RvcmFnZShwcmVmaXgpKSB7CiAgICAgICAgICAgICAgICBmaWx0ZXJWYWx1ZXMgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0ocHJlZml4ICsgImZpbHRlcnNfdmFsdWUiKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzaWduYWwuYWxlcnRSZXZpZXcucmVtb3ZlRmlsdGVyc0Zyb21TZXNzaW9uU3RvcmFnZShwcmVmaXgpOwogICAgICAgICAgICAgICAgaXNGaWx0ZXJSZXF1ZXN0ID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRhYmxlID0gJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLkRhdGFUYWJsZSh7CiAgICAgICAgICAgICJzUGFnaW5hdGlvblR5cGUiOiAiYm9vdHN0cmFwIiwKICAgICAgICAgICAgImxhbmd1YWdlIjogewogICAgICAgICAgICAgICAgInVybCI6ICIuLi9hc3NldHMvaTE4bi9kYXRhVGFibGVzXyIgKyB1c2VyTG9jYWxlICsgIi5qc29uIgogICAgICAgICAgICB9LAogICAgICAgICAgICAicm93Q2FsbGJhY2siOiBmdW5jdGlvbiAocm93LCBkYXRhLCBpbmRleCkgewogICAgICAgICAgICAgICAgLy9CaW5kIEFzc2lnbmVkVG8gU2VsZWN0IEJveAogICAgICAgICAgICAgICAgYXNzaWduZWRUb0RhdGEucHVzaCh7bmFtZTogZGF0YS5hc3NpZ25lZFRvVmFsdWUubmFtZSwgaWQ6IGRhdGEuYXNzaWduZWRUb1ZhbHVlLmlkfSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZuRHJhd0NhbGxiYWNrOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBzaWduYWwubGlzdF91dGlscy5mbGFnX2hhbmRsZXIoImFkSG9jQWxlcnQiLCAidG9nZ2xlRmxhZyIpOwogICAgICAgICAgICAgICAgJCgiLmFzc2lnbmVkVG9TZWxlY3QiKS5lYWNoKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgICAgICAgICAgICAgc2lnbmFsLnVzZXJfZ3JvdXBfdXRpbHMuYmluZF9hc3NpZ25fdG8oJCh0aGlzKSwgc2VhcmNoVXNlckdyb3VwTGlzdFVybCwgYXNzaWduZWRUb0RhdGFbaV0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBzaWduYWwuYWxlcnRSZXZpZXcuc29ydEljb25IYW5kbGVyKCkKICAgICAgICAgICAgICAgIGNvbEVsbGlwc2lzKCk7CiAgICAgICAgICAgICAgICB3ZWJVaVBvcEluaXQoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGZuSW5pdENvbXBsZXRlOiBmdW5jdGlvbiAoc2V0dGluZ3MsIGpzb24pIHsKICAgICAgICAgICAgICAgIGFzc2lnbmVkVG9EYXRhID0gW107CiAgICAgICAgICAgICAgICBzaWduYWwuYWxlcnRSZXZpZXcuYmluZEdyaWREeW5hbWljRmlsdGVycyhqc29uLmZpbHRlcnMsIHByZWZpeCwganNvbi5jb25maWdJZCk7CgogICAgICAgICAgICAgICAgdmFyIHRoZURhdGFUYWJsZSA9ICQoJyNhbGVydHNEZXRhaWxzVGFibGUnKS5EYXRhVGFibGUoKTsKCiAgICAgICAgICAgICAgICAkKCIjY2xvc2VkQ2hlY2tCb3giKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiBGaWx0ZXJzIGZvciBnaXJkIHRvIGJlIGludHJvZHVjZWQuCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAkKCIjdG9nZ2xlLWNvbHVtbi1maWx0ZXJzIikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlbGUgPSAkKCcueWFkY2YtZmlsdGVyLXdyYXBwZXInKTsKICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXRFbGUgPSAkKCcueWFkY2YtZmlsdGVyJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZS5pcygnOnZpc2libGUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICBlbGUuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsZS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RWxlLmZpcnN0KCkuZm9jdXMoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdGhlRGF0YVRhYmxlLmRyYXcoKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgJCgnLnlhZGNmLWZpbHRlci13cmFwcGVyJykuaGlkZSgpOwogICAgICAgICAgICAgICAgdGhlRGF0YVRhYmxlLmRyYXcoKTsKICAgICAgICAgICAgICAgIHNpZ25hbC5maWVsZE1hbmFnZW1lbnQuaW5pdCgkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuRGF0YVRhYmxlKCksICcjYWxlcnRzRGV0YWlsc1RhYmxlJywgNCk7CiAgICAgICAgICAgICAgICBiaW5kQXNzaWduVG9TZWxlY3Rpb24oc2VhcmNoVXNlckdyb3VwTGlzdFVybCwgYXNzaWduVG9Hcm91cFVybCwgdGFibGUpOwogICAgICAgICAgICAgICAgYWRkR3JpZFNob3J0Y3V0cygnI2FsZXJ0c0RldGFpbHNUYWJsZScpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgImFqYXgiOiB7CiAgICAgICAgICAgICAgICAidXJsIjogbGlzdENvbmZpZ1VybCArICcmaXNGaWx0ZXJSZXF1ZXN0PScgKyBpc0ZpbHRlclJlcXVlc3QgKyAnJmZpbHRlcnM9JyArIEpTT04uc3RyaW5naWZ5KGZpbHRlclZhbHVlcyksCiAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsCiAgICAgICAgICAgICAgICAiZGF0YSI6IGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgICAgICAgICAgZC5kaXNwb3NpdGlvbiA9ICQoJyNkaXNwb3NpdGlvbkZpbHRlcicpLnZhbCgpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImRhdGFTcmMiOiAiZGF0YSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImFhU29ydGluZyI6IFtdLAogICAgICAgICAgICAiYkxlbmd0aENoYW5nZSI6IHRydWUsCiAgICAgICAgICAgICJpRGlzcGxheUxlbmd0aCI6IDUwLAogICAgICAgICAgICAiYlByb2Nlc3NpbmciOiB0cnVlLAogICAgICAgICAgICAiY29sUmVvcmRlciI6IHsKICAgICAgICAgICAgICAgICJyZWFsdGltZSI6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJNU0dfTE9BRElORyI6ICcnLAogICAgICAgICAgICAib0xhbmd1YWdlIjogewogICAgICAgICAgICAgICAgInNQcm9jZXNzaW5nIjogJzxkaXYgY2xhc3M9ImdyaWQtbG9hZGluZyI+PGltZyBzcmM9Ii9zaWduYWwvYXNzZXRzL3NwaW5uZXIuZ2lmIiB3aWR0aD0iMzAiIGFsaWduPSJtaWRkbGUiIC8+PC9kaXY+JywKICAgICAgICAgICAgICAgICJzWmVyb1JlY29yZHMiOiAiTm8gZGF0YSBhdmFpbGFibGUgaW4gdGFibGUiLCAic0VtcHR5VGFibGUiOiAiTm8gZGF0YSBhdmFpbGFibGUgaW4gdGFibGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJhTGVuZ3RoTWVudSI6IFtbNTAsIDEwMCwgMjAwLCAxMDAwLCAtMV0sIFs1MCwgMTAwLCAyMDAsIDEwMDAsICJBbGwiXV0sCiAgICAgICAgICAgIHNlYXJjaGluZzogdHJ1ZSwKICAgICAgICAgICAgImFvQ29sdW1ucyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAic2VsZWN0ZWQiLAogICAgICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxpbnB1dCB0eXBlPSJjaGVja2JveCIgY2xhc3M9ImFsZXJ0LWNoZWNrLWJveCBlZGl0b3ItYWN0aXZlIGNvcHktc2VsZWN0IiBkYXRhLWZpZWxkPSJhbGVydElkIiBkYXRhLWlkPScgKyByb3cuaWQgKyAnIC8+JzsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJjbGFzc05hbWUiOiAiIiwKICAgICAgICAgICAgICAgICAgICAib3JkZXJhYmxlIjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgInZpc2libGUiOiB0cnVlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJkcm9wZG93biIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ICJjb2wtbWluLTIwIiwKICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbkJ1dHRvbiA9ICc8ZGl2IHN0eWxlPSJkaXNwbGF5OiBibG9jazsiIGNsYXNzPSJidG4tZ3JvdXAgZHJvcGRvd24gZGF0YVRhYmxlSGlkZUNlbGxDb250ZW50IiBhbGlnbj0iY2VudGVyIj4gXAogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIHRhYmluZGV4PSIwIj4gXAogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iY3Vyc29yOiBwb2ludGVyO2ZvbnQtc2l6ZTogMTI1JTsiIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLW9wdGlvbi12ZXJ0aWNhbCI+PC9zcGFuPjxzcGFuIGNsYXNzPSJzci1vbmx5Ij5Ub2dnbGUgRHJvcGRvd248L3NwYW4+IFwKICAgICAgICAgICAgICAgICAgICAgICAgPC9hPic7CgogICAgICAgICAgICAgICAgICAgICAgICBpZihyb3cubm90ZXMgIT0gJycpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uQnV0dG9uICs9ICAnPGkgY2xhc3M9Im1kaSBtZGktY2hhdCBibHVlLTIgZm9udC0xMyBwb3MtYWIgY29tbWVudCIgdGl0bGU9IicgKyAkLmkxOG4uXygnY29tbWVudEF2YWlsYWJsZScpICsgJyI+PC9pPic7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkJ1dHRvbiArPSAnPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IG1lbnUtY29zeSIgcm9sZT0ibWVudSI+PGxpIHJvbGU9InByZXNlbnRhdGlvbiI+PGEgdGFiaW5kZXg9IjAiIGNsYXNzPSJyZXZpZXctcm93LWljb24gY29tbWVudC1pY29uIiBkYXRhLWluZm89InJvdyI+PHNwYW4gY2xhc3M9ImZhIGZhLWNvbW1lbnQgbS1yLTEwIiA+PC9zcGFuPicgKyAkLmkxOG4uXygnY29tbWVudHMnKSArICc8L2E+PC9saT4nOwogICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25CdXR0b24gKz0gJzwvdWw+PC9kaXY+JzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbkJ1dHRvbjsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJvcmRlcmFibGUiOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAidmlzaWJsZSI6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ImRyb3BEb3duIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAicHJpb3JpdHkiLAogICAgICAgICAgICAgICAgICAgICJhVGFyZ2V0cyI6IFsicHJpb3JpdHkiXSwKICAgICAgICAgICAgICAgICAgICAib3JkZXJEYXRhVHlwZSI6ICJkb20tcHJpb3JpdHkiLAogICAgICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNQcmlvcnR5Q2hhbmdlQWxsb3dlZCA9IChpc1Byb2R1Y3RTZWN1cml0eSA9PSAndHJ1ZScgJiYgaXNTYWZldHlMZWFkQWxsb3dlZChhbGxvd2VkUHJvZHVjdHNBc1NhZmV0eUxlYWQsIHJvdy5wcm9kdWN0SWQpKSB8fCBpc1Byb2R1Y3RTZWN1cml0eSA9PSAnZmFsc2UnCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWduYWwudXRpbHMucmVuZGVyKCdwcmlvcml0eScsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW9yaXR5VmFsdWU6IHJvdy5wcmlvcml0eS52YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW9yaXR5Q2xhc3M6IHJvdy5wcmlvcml0eS5pY29uQ2xhc3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ByaW9yaXR5Q2hhbmdlQWxsb3dlZDogaXNQcmlvcnR5Q2hhbmdlQWxsb3dlZAogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICdjbGFzc05hbWUnOiAndGV4dC1jZW50ZXIgY29sLW1pbi0zMCBwcmlvcml0eVBhcmVudCcsCiAgICAgICAgICAgICAgICAgICAgInZpc2libGUiOiB0cnVlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJuYW1lIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3NOYW1lIjogImNvbC1taW4tMTAwIiwKICAgICAgICAgICAgICAgICAgICBtUmVuZGVyOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xFbGVtZW50ID0gJzxkaXYgY2xhc3M9ImNvbC1jb250YWluZXIiPjxkaXYgY2xhc3M9ImNvbC1oZWlnaHQiPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEVsZW1lbnQgKz0gIjxpbnB1dCB0eXBlPSdoaWRkZW4nIGNsYXNzPSdyb3ctcHJvZHVjdC1qc29uLWNvbnRhaW5lcicgdmFsdWU9JyIgKyByb3cucHJvZHVjdFNlbGVjdGlvbkpzb24gKyAiJy8+IiAsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEVsZW1lbnQgKz0gIjxhIGhyZWY9Jy9zaWduYWwvYWRIb2NBbGVydC9hbGVydERldGFpbD9pZD0iICsgcm93LmlkICsgIic+IiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc2NhcGVIVE1MKHJvdy5uYW1lKSArICI8L2E+IjsKICAgICAgICAgICAgICAgICAgICAgICAgY29sRWxlbWVudCArPSAnPGEgdGFiaW5kZXg9IjAiIHRpdGxlPSInICsgJC5pMThuLl8oJ2FwcExhYmVsLnZpZXdBbGwnKSArICciIGNsYXNzPSJpY28tZG90cyB2aWV3LWFsbCIgbW9yZS1kYXRhPSInICsgcm93Lm5hbWUgKyAnIj48aSBjbGFzcz0ibWRpIG1kaS1kb3RzLWhvcml6b250YWwgZm9udC0yMCBibHVlLTEiPiA8L2k+PC9hPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEVsZW1lbnQgKz0gJzwvZGl2PjwvZGl2Pic7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xFbGVtZW50OwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZpc2libGUiOiB0cnVlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJwcm9kdWN0U2VsZWN0aW9uIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3NOYW1lIjogImNvbC1taW4tMTUwIiwKICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICI8c3BhbiBkYXRhLWZpZWxkID0ncHJvZHVjdE5hbWUnIGRhdGEtaWQ9JyIgKyByb3cucHJvZHVjdFNlbGVjdGlvbiArICInPiIgKyAocm93LnByb2R1Y3RTZWxlY3Rpb24pICsgIjwvc3Bhbj4iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmlzaWJsZSI6IHNpZ25hbC5maWVsZE1hbmFnZW1lbnQudmlzaWJsZUNvbHVtbnMoJ3Byb2R1Y3RTZWxlY3Rpb24nKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiZXZlbnRTZWxlY3Rpb24iLAogICAgICAgICAgICAgICAgICAgICJjbGFzc05hbWUiOiAiY29sLW1pbi0xMDAiLAogICAgICAgICAgICAgICAgICAgICJ2aXNpYmxlIjogc2lnbmFsLmZpZWxkTWFuYWdlbWVudC52aXNpYmxlQ29sdW1ucygnZXZlbnRTZWxlY3Rpb24nKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiaXNzdWVUcmFja2VkIiwKICAgICAgICAgICAgICAgICAgICAidmlzaWJsZSI6IHNpZ25hbC5maWVsZE1hbmFnZW1lbnQudmlzaWJsZUNvbHVtbnMoJ2lzc3VlVHJhY2tlZCcpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJudW1PZkljc3JzIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3NOYW1lIjogImNvbC1taW4tNzUiLAogICAgICAgICAgICAgICAgICAgICJ2aXNpYmxlIjogc2lnbmFsLmZpZWxkTWFuYWdlbWVudC52aXNpYmxlQ29sdW1ucygnbnVtT2ZJY3NycycpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJpbml0RGF0YVNyYyIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ICJjb2wtbWluLTEwMCIsCiAgICAgICAgICAgICAgICAgICAgInZpc2libGUiOiBzaWduYWwuZmllbGRNYW5hZ2VtZW50LnZpc2libGVDb2x1bW5zKCdpbml0RGF0YVNyYycpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICdzaWduYWxzQW5kVG9waWNzJywKICAgICAgICAgICAgICAgICAgICAiY2xhc3NOYW1lIjogImNvbC1taW4tMTUwIGNvbC1tYXgtMjAwIHNpZ25hbEluZm9ybWF0aW9uIiwKICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpZ25hbEFuZFRvcGljcyA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gocm93LnNpZ25hbHNBbmRUb3BpY3MsIGZ1bmN0aW9uKGksIG9iail7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gc2lnbmFsRGV0YWlsVXJsICsgJz9pZD0nICsgb2JqWydzaWduYWxJZCddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsQW5kVG9waWNzID0gc2lnbmFsQW5kVG9waWNzICsgJzxzcGFuIGNsYXNzPSJjbGljayI+PGEgIGNsYXNzPSJjZWxsLWJyZWFrIiBocmVmPSInICsgdXJsICsgJyI+JyArIGVzY2FwZUhUTUwob2JqWyduYW1lJ10pICsgJzwvYT48L3NwYW4+Jm5ic3A7JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsQW5kVG9waWNzID0gc2lnbmFsQW5kVG9waWNzICsgIiwiCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBpZihzaWduYWxBbmRUb3BpY3MubGVuZ3RoID4gMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGRpdj4nICsgc2lnbmFsQW5kVG9waWNzLnN1YnN0cmluZygwLCBzaWduYWxBbmRUb3BpY3MubGVuZ3RoIC0gMSkgKyAnPC9kaXY+JzsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICctJzsKCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmlzaWJsZSI6IHNpZ25hbC5maWVsZE1hbmFnZW1lbnQudmlzaWJsZUNvbHVtbnMoJ3NpZ25hbHNBbmRUb3BpY3MnKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiY3VycmVudERpc3Bvc2l0aW9uIiwKICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNpZ25hbC51dGlscy5yZW5kZXIoJ2Rpc3Bvc2l0aW9uJywgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZERpc3Bvc2l0aW9uOiBkaXNwb3NpdGlvbkluY29taW5nT3V0Z29pbmdNYXBbcm93LmRpc3Bvc2l0aW9uXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnREaXNwb3NpdGlvbjogcm93LmRpc3Bvc2l0aW9uLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VKdXN0aWZpY2F0aW9uOiBmb3JjZUp1c3RpZmljYXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkYXRpb25TdGF0ZUFjaGlldmVkOiByb3cuaXNWYWxpZGF0aW9uU3RhdGVBY2hpZXZlZAogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2aXNpYmxlIjogc2lnbmFsLmZpZWxkTWFuYWdlbWVudC52aXNpYmxlQ29sdW1ucygnY3VycmVudERpc3Bvc2l0aW9uJyksCiAgICAgICAgICAgICAgICAgICAgImNsYXNzIjogJ2NvbC1tYXgtMjUwIGRpc3Bvc2l0aW9uQWN0aW9uJwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiZGlzcG9zaXRpb24iLAogICAgICAgICAgICAgICAgICAgICJjbGFzc05hbWUiOiAiY29sLW1heC0yNTAgY3VycmVudERpc3Bvc2l0aW9uIiwKICAgICAgICAgICAgICAgICAgICAibVJlbmRlciI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdy5kaXNwb3NpdGlvbjsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2aXNpYmxlIjogc2lnbmFsLmZpZWxkTWFuYWdlbWVudC52aXNpYmxlQ29sdW1ucygnZGlzcG9zaXRpb24nKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiYXNzaWduZWRUbyIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ICJjb2wtbWluLTEwMCBjb2wtbWF4LTE1MCIsCiAgICAgICAgICAgICAgICAgICAgIm1SZW5kZXIiOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWduYWwubGlzdF91dGlscy5hc3NpZ25lZF90b19jb21wKHJvdy5pZCwgcm93LmFzc2lnbmVkVG9WYWx1ZSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2aXNpYmxlIjogc2lnbmFsLmZpZWxkTWFuYWdlbWVudC52aXNpYmxlQ29sdW1ucygnYXNzaWduZWRUbycpLAogICAgICAgICAgICAgICAgICAgICJvcmRlcmFibGUiOiBmYWxzZQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAiZGV0ZWN0ZWREYXRlIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3NOYW1lIjogImNvbC1taW4tMTAwIiwKICAgICAgICAgICAgICAgICAgICAidmlzaWJsZSI6IHNpZ25hbC5maWVsZE1hbmFnZW1lbnQudmlzaWJsZUNvbHVtbnMoJ2RldGVjdGVkRGF0ZScpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJkdWVJbiIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ICJjb2wtbWluLTEwMCBkdWVJbiIsCiAgICAgICAgICAgICAgICAgICAgIm1SZW5kZXIiOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWduYWwubGlzdF91dGlscy5kdWVfaW5fY29tcChyb3cuZHVlSW4pCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmlzaWJsZSI6IHNpZ25hbC5maWVsZE1hbmFnZW1lbnQudmlzaWJsZUNvbHVtbnMoJ2R1ZUluJykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgc2Nyb2xsWDogdHJ1ZSwKICAgICAgICAgICAgY29sdW1uRGVmczogW3sKICAgICAgICAgICAgICAgICJ0YXJnZXRzIjogJ19hbGwnLAogICAgICAgICAgICAgICAgInJlbmRlciI6ICQuZm4uZGF0YVRhYmxlLnJlbmRlci50ZXh0KCkKICAgICAgICAgICAgfV0KICAgICAgICB9KTsKICAgICAgICBuZXcgJC5mbi5kYXRhVGFibGUuRml4ZWRDb2x1bW5zKHRhYmxlLCB7CiAgICAgICAgICAgIGxlZnRDb2x1bW5zOiA0LAogICAgICAgICAgICByaWdodENvbHVtbnM6IDAsCiAgICAgICAgICAgIGhlaWdodE1hdGNoOiAnYXV0bycKICAgICAgICB9KTsKCiAgICAgICAgdGFibGUub24oICd4aHInLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGNvbW1lbnRMaXN0ID0gdGFibGUuYWpheC5qc29uKCkuY29tbWVudExpc3Q7CiAgICAgICAgfSk7CgogICAgICAgIGluaXRfZmlsdGVyKHRhYmxlKTsKICAgICAgICByZXR1cm4gdGFibGUKICAgIH07CgogICAgdmFyIGluaXRfZmlsdGVyID0gZnVuY3Rpb24gKGRhdGFfdGFibGUpIHsKCiAgICAgICAgdmFyIGZpbHRlck9wdGlvbnMgPSBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbHVtbl9udW1iZXI6IDMsCiAgICAgICAgICAgICAgICBmaWx0ZXJfdHlwZTogJ3RleHQnLAogICAgICAgICAgICAgICAgZmlsdGVyX3Jlc2V0X2J1dHRvbl90ZXh0OiBmYWxzZSwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWxheTogNjAwLAogICAgICAgICAgICAgICAgZmlsdGVyX2RlZmF1bHRfbGFiZWw6ICcnCiAgICAgICAgICAgIH0sICAvL25hbWUKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29sdW1uX251bWJlcjogNCwKICAgICAgICAgICAgICAgIGZpbHRlcl90eXBlOiAndGV4dCcsCiAgICAgICAgICAgICAgICBmaWx0ZXJfcmVzZXRfYnV0dG9uX3RleHQ6IGZhbHNlLAogICAgICAgICAgICAgICAgZmlsdGVyX2RlbGF5OiA2MDAsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVmYXVsdF9sYWJlbDogJycKICAgICAgICAgICAgfSwgIC8vcHJvZHVjdAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb2x1bW5fbnVtYmVyOiA1LAogICAgICAgICAgICAgICAgZmlsdGVyX3R5cGU6ICd0ZXh0JywKICAgICAgICAgICAgICAgIGZpbHRlcl9yZXNldF9idXR0b25fdGV4dDogZmFsc2UsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVsYXk6IDYwMCwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWZhdWx0X2xhYmVsOiAnJwogICAgICAgICAgICB9LCAgLy9ldmVudAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb2x1bW5fbnVtYmVyOiA2LAogICAgICAgICAgICAgICAgZmlsdGVyX3R5cGU6ICd0ZXh0JywKICAgICAgICAgICAgICAgIGZpbHRlcl9yZXNldF9idXR0b25fdGV4dDogZmFsc2UsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVsYXk6IDYwMCwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWZhdWx0X2xhYmVsOiAnJwogICAgICAgICAgICB9LCAgLy9pc3N1ZXMgdHJhY2tlZAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb2x1bW5fbnVtYmVyOiA3LAogICAgICAgICAgICAgICAgZmlsdGVyX3R5cGU6ICd0ZXh0JywKICAgICAgICAgICAgICAgIGZpbHRlcl9yZXNldF9idXR0b25fdGV4dDogZmFsc2UsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVsYXk6IDYwMCwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWZhdWx0X2xhYmVsOiAnJwogICAgICAgICAgICB9LCAgLy9udW0gaWNzcgogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb2x1bW5fbnVtYmVyOiA4LAogICAgICAgICAgICAgICAgZmlsdGVyX3R5cGU6ICd0ZXh0JywKICAgICAgICAgICAgICAgIGZpbHRlcl9yZXNldF9idXR0b25fdGV4dDogZmFsc2UsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVsYXk6IDYwMCwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWZhdWx0X2xhYmVsOiAnJwogICAgICAgICAgICB9LCAgLy9pbml0IGRhdGFzb3VyY2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29sdW1uX251bWJlcjogOSwKICAgICAgICAgICAgICAgIGZpbHRlcl90eXBlOiAndGV4dCcsCiAgICAgICAgICAgICAgICBmaWx0ZXJfcmVzZXRfYnV0dG9uX3RleHQ6IGZhbHNlLAogICAgICAgICAgICAgICAgZmlsdGVyX2RlbGF5OiA2MDAsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVmYXVsdF9sYWJlbDogJycKICAgICAgICAgICAgfSwgLy9zaWduYWwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29sdW1uX251bWJlcjogMTAsCiAgICAgICAgICAgICAgICBmaWx0ZXJfdHlwZTogJ3RleHQnLAogICAgICAgICAgICAgICAgZmlsdGVyX3Jlc2V0X2J1dHRvbl90ZXh0OiBmYWxzZSwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWxheTogNjAwLAogICAgICAgICAgICAgICAgZmlsdGVyX2RlZmF1bHRfbGFiZWw6ICcnCiAgICAgICAgICAgIH0sIC8vZGlzcG9zaXRpb24KICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29sdW1uX251bWJlcjogMTIsCiAgICAgICAgICAgICAgICBmaWx0ZXJfdHlwZTogJ3RleHQnLAogICAgICAgICAgICAgICAgZmlsdGVyX3Jlc2V0X2J1dHRvbl90ZXh0OiBmYWxzZSwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWxheTogNjAwLAogICAgICAgICAgICAgICAgZmlsdGVyX2RlZmF1bHRfbGFiZWw6ICcnCiAgICAgICAgICAgIH0sIC8vZGV0ZWN0ZWQgZGF0ZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb2x1bW5fbnVtYmVyOiAxMywKICAgICAgICAgICAgICAgIGZpbHRlcl90eXBlOiAndGV4dCcsCiAgICAgICAgICAgICAgICBmaWx0ZXJfcmVzZXRfYnV0dG9uX3RleHQ6IGZhbHNlLAogICAgICAgICAgICAgICAgZmlsdGVyX2RlbGF5OiA2MDAsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVmYXVsdF9sYWJlbDogJycKICAgICAgICAgICAgfSwgLy9kZXRlY3RlZCBkYXRlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbHVtbl9udW1iZXI6IDE0LAogICAgICAgICAgICAgICAgZmlsdGVyX3R5cGU6ICd0ZXh0JywKICAgICAgICAgICAgICAgIGZpbHRlcl9yZXNldF9idXR0b25fdGV4dDogZmFsc2UsCiAgICAgICAgICAgICAgICBmaWx0ZXJfZGVsYXk6IDYwMCwKICAgICAgICAgICAgICAgIGZpbHRlcl9kZWZhdWx0X2xhYmVsOiAnJwogICAgICAgICAgICB9ICAvL2R1ZSBpbgogICAgICAgIF07CiAgICAgICAgeWFkY2YuaW5pdChkYXRhX3RhYmxlLCBmaWx0ZXJPcHRpb25zKTsKICAgIH07CgoKICAgICQoJ2kjY29weVNlbGVjdGlvbicpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICBzaG93QWxsU2VsZWN0ZWRDYXNlTnVtYmVycygpCiAgICB9KTsKCiAgICB2YXIgc2hvd0FsbFNlbGVjdGVkQ2FzZU51bWJlcnMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJCgnI2NvcHlDYXNlTnVtYmVyTW9kZWwnKS5tb2RhbCh7CiAgICAgICAgICAgIHNob3c6IHRydWUKICAgICAgICB9KTsKCiAgICAgICAgdmFyIG51bWJlcnMgPSBfLm1hcCgkKCdpbnB1dC5jb3B5LXNlbGVjdDpjaGVja2VkJykucGFyZW50KCkucGFyZW50KCkuZmluZCgndGQ6bnRoLWNoaWxkKDQpJyksIGZ1bmN0aW9uIChpdCkgewogICAgICAgICAgICByZXR1cm4gJChpdCkudGV4dCgpCiAgICAgICAgfSk7CiAgICAgICAgJCgiI2Nhc2VOdW1iZXJzIikudGV4dChudW1iZXJzKTsKICAgIH07CgogICAgdmFyIGluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgc2lnbmFsLmZpZWxkTWFuYWdlbWVudC5wb3B1bGF0ZUNvbHVtbkxpc3QoZ3JpZENvbHVtbnNWaWV3VXJsLCBncmlkQ29sdW1uc1ZpZXdVcGRhdGVVcmwpOwogICAgICAgIGFsZXJ0RGV0YWlsc1RhYmxlID0gaW5pdEFsZXJ0RGV0YWlsc1RhYmxlKCk7CiAgICAgICAgJCgnaSNjb3B5U2VsZWN0aW9uJykuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICBzaG93QWxsU2VsZWN0ZWRDYXNlTnVtYmVycygpCiAgICAgICAgfSk7CgogICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdpbnB1dCNzZWxlY3QtYWxsJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAkKCIuY29weS1zZWxlY3QiKS5wcm9wKCdjaGVja2VkJywgdGhpcy5jaGVja2VkKTsKICAgICAgICB9KTsKICAgICAgICBiaW5kQ29tbWVudE5vdGVzKCk7CiAgICB9OwoKICAgIGluaXQoKTsKCgogICAgJCgnI2V4cG9ydFR5cGVzIGFbaHJlZl0nKS5jbGljayhmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciBjbGlja2VkVVJMID0gZS5jdXJyZW50VGFyZ2V0LmhyZWY7CiAgICAgICAgdmFyIGlkcyA9IFtdOwogICAgICAgICQoJ2lucHV0LmNvcHktc2VsZWN0OmNoZWNrZWQnKS5tYXAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZHMucHVzaCgkKHRoaXMpLmF0dHIoJ2RhdGEtaWQnKSk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIGlzRmlsdGVyUmVxdWVzdCA9IHRydWU7CiAgICAgICAgdmFyIGZpbHRlclZhbHVlcyA9IFtdOwogICAgICAgIHZhciBwcmVmaXggPSAiYWRob2NfIjsKICAgICAgICAkKCcuZHluYW1pYy1maWx0ZXJzJykuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpjaGVja2VkJykpIHsKICAgICAgICAgICAgICAgIGZpbHRlclZhbHVlcy5wdXNoKCQodGhpcykudmFsKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgdmFyIHVwZGF0ZWRFeHBvcnRVcmwgPSBjbGlja2VkVVJMICsgJyZpc0ZpbHRlclJlcXVlc3Q9JyArIGlzRmlsdGVyUmVxdWVzdCArICcmZmlsdGVycz0nICsgSlNPTi5zdHJpbmdpZnkoZmlsdGVyVmFsdWVzKSArICImaWRzPSIgKyBpZHMgKyAiJmNhbGxpbmdTY3JlZW49IiArIGNhbGxpbmdTY3JlZW47CiAgICAgICAgdmFyIGZpbHRlcl9wYXJhbXMgPSAiIjsKICAgICAgICAkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuRGF0YVRhYmxlKCkuY29sdW1ucygpLmV2ZXJ5KCBmdW5jdGlvbiAoKQogICAgICAgIHsKICAgICAgICAgICAgaWYodGhpcy5zZWFyY2goKSAhPT0gIiIpIHsKICAgICAgICAgICAgICAgIGZpbHRlcl9wYXJhbXMgPSBmaWx0ZXJfcGFyYW1zICsgIiYiK3RoaXMuZGF0YVNyYygpICsgIj0iICsgdGhpcy5zZWFyY2goKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXBkYXRlZEV4cG9ydFVybCArIGZpbHRlcl9wYXJhbXM7CiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICB9KTsKCiAgICAkKCIjY29tbWVudHNNb2RhbCIpLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgJCgnI2NvbW1lbnROb3RlcycpLnZhbCgiIik7CiAgICAgICAgJCgnI2NvbW1lbnROb3RlcycpLnZhbCgiIik7CiAgICAgICAgJCgiLmNyZWF0ZWRCeSIpLnRleHQoIiIpOwogICAgICAgICQoJy5hZGRBZGhvY0NvbW1lbnQnKS5odG1sKCJBZGQiKTsKICAgIH0pCgp9KTsKCnZhciBiaW5kQ29tbWVudE5vdGVzID0gZnVuY3Rpb24gKCkgewogICAgJChkb2N1bWVudCkub24oImNsaWNrIiwgIi5jb21tZW50LWljb24iLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyICR0aGlzID0gdGhpczsKICAgICAgICB2YXIgc2VsZWN0ZWRSb3dJZHMgPSBbXTsKICAgICAgICB2YXIgc2VsZWN0ZWRSb3dDb3VudCA9ICQoJ3RhYmxlLkRURkNfQ2xvbmVkIC5jb3B5LXNlbGVjdDpjaGVja2VkJykubGVuZ3RoOwogICAgICAgIHZhciBjb21tZW50TW9kYWwgPSAkKCcjY29tbWVudHNNb2RhbCcpOwogICAgICAgIGlmIChzZWxlY3RlZFJvd0NvdW50ID4gMSAmJiAkKHRoaXMpLmNsb3Nlc3QoJ3RyJykuZmluZCgiLmNvcHktc2VsZWN0IikucHJvcCgiY2hlY2tlZCIpKSB7CiAgICAgICAgICAgICQoY29tbWVudE1vZGFsKS5maW5kKCdkaXYuYnVsa09wdGlvbnNTZWN0aW9uJykuc2hvdygpOwogICAgICAgICAgICAkKGNvbW1lbnRNb2RhbCkuZmluZCgnZGl2LmJ1bGtPcHRpb25zU2VjdGlvbiBzcGFuLmNvdW50JykuaHRtbChzZWxlY3RlZFJvd0NvdW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkKGNvbW1lbnRNb2RhbCkuZmluZCgnZGl2LmJ1bGtPcHRpb25zU2VjdGlvbicpLmhpZGUoKTsKICAgICAgICB9CgogICAgICAgICQoJ2Rpdi5idWxrT3B0aW9uc1NlY3Rpb24gaW5wdXRbbmFtZT1idWxrT3B0aW9uc10nKS51bmJpbmQoKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBzd2l0Y2ggKCQodGhpcykudmFsKCkpIHsKICAgICAgICAgICAgICAgIGNhc2UgJ2FsbFNlbGVjdGVkJzoKICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFJvd0lkcyA9IGluaXRpYXRlQnVsa1Jvd0NvbW1lbnRQcm9jZXNzKCk7CiAgICAgICAgICAgICAgICAgICAgYmluZEFkZENvbW1lbnROb3Rlcyhjb21tZW50TW9kYWwsIHNlbGVjdGVkUm93SWRzLCJidWxrIik7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICdjdXJyZW50JzoKICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFJvd0lkcyA9IFtdOwogICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUm93SWRzLnB1c2goaW5pdGlhdGVTaW5nbGVSb3dDb21tZW50UHJvY2VzcygkdGhpcykpOwogICAgICAgICAgICAgICAgICAgIGJpbmRBZGRDb21tZW50Tm90ZXMoY29tbWVudE1vZGFsLCBzZWxlY3RlZFJvd0lkcywicm93Iik7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBpZiAoJCh0aGlzKS5kYXRhKCdpbmZvJykgPT09ICdyb3cnKSB7CiAgICAgICAgICAgIHNlbGVjdGVkUm93SWRzLnB1c2goaW5pdGlhdGVTaW5nbGVSb3dDb21tZW50UHJvY2VzcygkdGhpcykpOwogICAgICAgICAgICBiaW5kQWRkQ29tbWVudE5vdGVzKGNvbW1lbnRNb2RhbCwgc2VsZWN0ZWRSb3dJZHMsInJvdyIsJHRoaXMpOwogICAgICAgIH0KICAgICAgICBjb21tZW50TW9kYWwubW9kYWwoJ3Nob3cnKTsKICAgIH0pOwp9OwoKdmFyIGluaXRpYXRlU2luZ2xlUm93Q29tbWVudFByb2Nlc3MgPSBmdW5jdGlvbiAoJHRoaXMpIHsKICAgIHZhciBzZWxlY3RlZFJvd0luZGV4ID0gJCgkdGhpcykucGFyZW50cygndHInKS5pbmRleCgpOwogICAgdmFyIGFkaG9jQWxlcnRJZCA9IHRhYmxlLnJvdyhzZWxlY3RlZFJvd0luZGV4KS5kYXRhKCkuaWQ7CiAgICB2YXIgdXBkYXRlZENvbW1lbnRzID0gJCgnI2NvbW1lbnROb3RlcycpLnZhbCgpOwogICAgJC5hamF4KHsKICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgZGF0YTogeydhZGhvY0FsZXJ0LmlkJzogYWRob2NBbGVydElkfSwKICAgICAgICB1cmw6IGZldGNoQ29tbWVudFVybCwKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgIHZhciBjb21tZW50TW9kYWwgPSAkKCcjY29tbWVudHNNb2RhbCcpOwogICAgICAgICAgICBpZiAocmVzdWx0LmNvbW1lbnQpIHsKICAgICAgICAgICAgICAgIGlmKHVwZGF0ZWRDb21tZW50cy5sZW5ndGggPj0gcmVzdWx0LmNvbW1lbnQubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnI2NvbW1lbnROb3RlcycpLnZhbCh1cGRhdGVkQ29tbWVudHMpOwogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoJyNjb21tZW50Tm90ZXMnKS52YWwocmVzdWx0LmNvbW1lbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIi5jcmVhdGVkQnkiKS50ZXh0KCJMYXN0IE1vZGlmaWVkIGJ5ICIgKyByZXN1bHQuY3JlYXRlZEJ5ICsgIiBvbiAiICsgcmVzdWx0LmRhdGVVcGRhdGVkKTsKICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkQWRob2NDb21tZW50JykuaHRtbCgiVXBkYXRlIik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKCiAgICByZXR1cm4gc2VsZWN0ZWRSb3dJbmRleAp9OwoKdmFyIGluaXRpYXRlQnVsa1Jvd0NvbW1lbnRQcm9jZXNzID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGluZGV4U2V0ID0gbmV3IFNldCgpOwogICAgdmFyIHNlbGVjdGVkUm93SWRzID0gW107CiAgICAkLmVhY2goJCgndGFibGUuRFRGQ19DbG9uZWQgLmNvcHktc2VsZWN0OmNoZWNrZWQnKSwgZnVuY3Rpb24gKCkgewogICAgICAgIGluZGV4U2V0LmFkZCgoJCh0aGlzKS5jbG9zZXN0KCd0cicpLmluZGV4KCkpKTsKICAgIH0pOwoKICAgIGluZGV4U2V0LmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7CiAgICAgICAgc2VsZWN0ZWRSb3dJZHMucHVzaChpbmRleCk7CiAgICB9KTsKICAgIHJldHVybiBzZWxlY3RlZFJvd0lkczsKfTsKCnZhciBiaW5kQWRkQ29tbWVudE5vdGVzID0gZnVuY3Rpb24gKGNvbW1lbnRNb2RhbCwgc2VsZWN0ZWRSb3dJZHMsZGF0YUluZm8sY3VycmVudFJvdykgewogICAgdmFyIHNlbGVjdGVkQWRob2NBbGVydElkcyA9IFtdOwogICAgc2VsZWN0ZWRSb3dJZHMuZm9yRWFjaChmdW5jdGlvbiAocm93SWQpIHsKICAgICAgICBzZWxlY3RlZEFkaG9jQWxlcnRJZHMucHVzaCh0YWJsZS5yb3cocm93SWQpLmRhdGEoKS5pZCkKICAgIH0pOwogICAgY29tbWVudE1vZGFsLmZpbmQoJy5hZGRBZGhvY0NvbW1lbnQnKS51bmJpbmQoKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICAnc2VsZWN0ZWRBZGhvY0FsZXJ0SWRzJzogSlNPTi5zdHJpbmdpZnkoc2VsZWN0ZWRBZGhvY0FsZXJ0SWRzKSwKICAgICAgICAgICAgICAgICdjb21tZW50JzogJCgiI2NvbW1lbnROb3RlcyIpLnZhbCgpCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHVybDogc2F2ZUNvbW1lbnRVcmwsCiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcykgewogICAgICAgICAgICAgICAgICAgIHZhciBjb21tZW50TW9kYWwgPSAkKCcjY29tbWVudHNNb2RhbCcpOwogICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuY29tbWVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnI2NvbW1lbnROb3RlcycpLnZhbChyZXN1bHQuY29tbWVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIuY3JlYXRlZEJ5IikudGV4dCgiTGFzdCBNb2RpZmllZCBieSAiICsgcmVzdWx0LmNyZWF0ZWRCeSArICIgb24gIiArIHJlc3VsdC5kYXRlVXBkYXRlZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkQWRob2NDb21tZW50JykuaHRtbCgiVXBkYXRlIik7CiAgICAgICAgICAgICAgICAgICAgICAgICQuTm90aWZpY2F0aW9uLm5vdGlmeSgnc3VjY2VzcycsICd0b3AgcmlnaHQnLCAiU3VjY2VzcyIsICJDb21tZW50cyBhZGRlZCBzdWNjZXNzZnVsbHkuIiwge2F1dG9IaWRlRGVsYXk6IDEwMDAwfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChkYXRhSW5mbyA9PT0gInJvdyIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmNvbW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbW1lbnRJY29uKGN1cnJlbnRSb3cpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNvbW1lbnRJY29uKGN1cnJlbnRSb3cpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrYm94U2VsZWN0b3IgPSAndGFibGUuRFRGQ19DbG9uZWQgLmNvcHktc2VsZWN0OmNoZWNrZWQnOwogICAgICAgICAgICAgICAgICAgICQuZWFjaCgkKGNoZWNrYm94U2VsZWN0b3IpLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuY29tbWVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbW1lbnRJY29uKHRoaXMpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ29tbWVudEljb24odGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9KQp9OwoKZnVuY3Rpb24gYmluZEFzc2lnblRvU2VsZWN0aW9uKHNlYXJjaFVzZXJHcm91cExpc3RVcmwsIGFzc2lnblRvR3JvdXBVcmwsIHRhYmxlKSB7CiAgICAkKCIuYXNzaWduZWRUb1NlbGVjdCIpLmVhY2goZnVuY3Rpb24gKGkpIHsKICAgICAgICBzaWduYWwudXNlcl9ncm91cF91dGlscy5iaW5kX2Fzc2lnbl90bygkKHRoaXMpLCBzZWFyY2hVc2VyR3JvdXBMaXN0VXJsLCBhc3NpZ25lZFRvRGF0YVtpXSk7CiAgICB9KTsKICAgIHNpZ25hbC51c2VyX2dyb3VwX3V0aWxzLmJpbmRfYXNzaWduVG9fc2VsZWN0aW9uKGFzc2lnblRvR3JvdXBVcmwsIHRhYmxlKTsKfQoKCg==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="119555921" offset="0" length="16384" />
        <PacketInfo time="119555937" offset="16384" length="10382" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>