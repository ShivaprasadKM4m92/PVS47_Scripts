<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="171">
  <HTTPTask id="847" hostname="10.100.22.24:8181" path="/signal/assets/app/pvs/alerts_review/alert_review-6f0e965ada1970820b45111524a91fb0.js" url="http://10.100.22.24:8181/signal/assets/app/pvs/alerts_review/alert_review-6f0e965ada1970820b45111524a91fb0.js" ip="10.100.22.24" port="8181" connectionId="26" origin="Primary" frame="1" startDateTime="2020-05-25T16:45:47.972+05:30" startTime="9190593" endTime="9191187">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTAuMTAwLjIyLjI0OjgxODE=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzgxLjAuNDA0NC4xMzggU2FmYXJpLzUzNy4zNg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvZGV0YWlscz9pZD04NDc5</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U0VTU0lPTj04NjVkZTBjYy1iMmY3LTRlMGMtYjYzNC1kZDQ3ODE3ZmY5YTE=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC9zaWduYWwvYXNzZXRzL2FwcC9wdnMvYWxlcnRzX3Jldmlldy9hbGVydF9yZXZpZXctNmYwZTk2NWFkYTE5NzA4MjBiNDUxMTE1MjRhOTFmYjAuanMgSFRUUC8xLjENCkhvc3Q6IDEwLjEwMC4yMi4yNDo4MTgxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODEuMC40MDQ0LjEzOCBTYWZhcmkvNTM3LjM2DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cDovLzEwLjEwMC4yMi4yNDo4MTgxL3NpZ25hbC92YWxpZGF0ZWRTaWduYWwvZGV0YWlscz9pZD04NDc5DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNCkNvb2tpZTogU0VTU0lPTj04NjVkZTBjYy1iMmY3LTRlMGMtYjYzNC1kZDQ3ODE3ZmY5YTENCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="SESSION" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ODY1ZGUwY2MtYjJmNy00ZTBjLWI2MzQtZGQ0NzgxN2ZmOWEx</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>16900</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Last-Modified" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>VGh1LCAyMSBNYXkgMjAyMCAwODoxODowMCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="ETag" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ImFwcC9wdnMvYWxlcnRzX3Jldmlldy9hbGVydF9yZXZpZXctNmYwZTk2NWFkYTE5NzA4MjBiNDUxMTE1MjRhOTFmYjAuanMi</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTY5MDA=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW9uLCAyNSBNYXkgMjAyMCAxMToxMDoxMiBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIA0KTGFzdC1Nb2RpZmllZDogVGh1LCAyMSBNYXkgMjAyMCAwODoxODowMCBHTVQNCkVUYWc6ICJhcHAvcHZzL2FsZXJ0c19yZXZpZXcvYWxlcnRfcmV2aWV3LTZmMGU5NjVhZGExOTcwODIwYjQ1MTExNTI0YTkxZmIwLmpzIg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpDYWNoZS1Db250cm9sOiBwdWJsaWMsIG1heC1hZ2U9MzE1MzYwMDANCkNvbnRlbnQtRW5jb2Rpbmc6IGd6aXANCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04DQpDb250ZW50LUxlbmd0aDogMTY5MDANCkRhdGU6IE1vbiwgMjUgTWF5IDIwMjAgMTE6MTA6MTIgR01UDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>dmFyIHNpZ25hbCA9IHNpZ25hbCB8fCB7fTsKCi8vIGEgY29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIHBhcnNpbmcgc3RyaW5nIG5hbWVzcGFjZXMgYW5kCi8vIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGluZyBuZXN0ZWQgbmFtZXNwYWNlcwpmdW5jdGlvbiBleHRlbmQoIG5zLCBuc19zdHJpbmcgKSB7CiAgICB2YXIgcGFydHMgPSBuc19zdHJpbmcuc3BsaXQoJy4nKSwKICAgICAgICBwYXJlbnQgPSBucywKICAgICAgICBwbCwgaTsKICAgIGlmIChwYXJ0c1swXSA9PSAic2lnbmFsIikgewogICAgICAgIHBhcnRzID0gcGFydHMuc2xpY2UoMSk7CiAgICB9CiAgICBwbCA9IHBhcnRzLmxlbmd0aDsKICAgIGZvciAoaSA9IDA7IGkgPCBwbDsgaSsrKSB7CiAgICAgICAgLy9jcmVhdGUgYSBwcm9wZXJ0eSBpZiBpdCBkb2VzbnQgZXhpc3QKICAgICAgICBpZiAodHlwZW9mIHBhcmVudFtwYXJ0c1tpXV0gPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgcGFyZW50W3BhcnRzW2ldXSA9IHt9OwogICAgICAgIH0KICAgICAgICBwYXJlbnQgPSBwYXJlbnRbcGFydHNbaV1dOwogICAgfQogICAgcmV0dXJuIHBhcmVudDsKfQoKLy9Qcm90b3R5cGUgbWV0aG9kcwpEYXRlLnByb3RvdHlwZS5hZGREYXlzID0gZnVuY3Rpb24oZGF5cykgewogICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7CiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBkYXlzKTsKICAgIHJldHVybiBkYXRlOwp9OwoKQXJyYXkucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKGYpe2YgIT0gdmFsdWV9KTsKfTsKClNDQV9XT1JLRkxPV19TVEFUVVNfRU5VTSA9IHsgTkVXOiAnTmV3JywKICAgIEFTU09DSUFURV9SRVZJRVdFRDogJ0Fzc29jaWF0ZVJldmlld2VkJywKICAgIFBIWVNJQ0lBTl9SRVZJRVdFRDogJ1BoeXNpY2lhblJldmlld2VkJywKICAgIFJFUVVJUkVEX0VWQUxVQVRJT046ICdSZXF1aXJlZEV2YWx1YXRpb24nLAogICAgQ09OVElOVUVEX01PTklUT1JJTkc6ICdDb250aW51ZWRNb25pdG9yaW5nJwp9OwoKU0NBX0RJU1BPU0lUSU9OX0VOVU0gPSB7CiAgICBWQUxJREFURURfU0lHTkFMIDogJ1ZhbGlkYXRlZFNpZ25hbCcsCiAgICBWQUxJREFURURfTk9OX0NPTkZJUk1FRF9TSUdOQUwgOiAnVmFsaWRhdGVkTm9uQ29uZmlybWVkU2lnbmFsJywKICAgIFZBTElEQVRFRF9VTkRFUl9JTlZFU1RJR0FUSU9OIDogJ1ZhbGlkYXRlZFVuZGVySW52ZXN0aWdhdGlvbicsCiAgICBDT01NVU5JQ0FURURfU0lHTkFMIDogJ0NvbW11bmljYXRlZFNpZ25hbCcsCiAgICBOT05fVkFMSUQ6ICdOb25WYWxpZCcKfTsKClNDQV9QUklPUklUWV9FTlVNID0gewogICAgSElHSDogIkhpZ2giLAogICAgTUVESVVNOiAiTWVkaXVtIiwKICAgIExPVzogIkxPVyIKfTsKCkRBVEVfRk1UX1RaID0gIllZWVktTU0tREQiOwoKc2lnbmFsLnV0aWxzID0gKGZ1bmN0aW9uKCkgewoKICAgIHZhciBzdGFja2VkID0gZnVuY3Rpb24odG9wVmFsdWUsIGJvdHRvbVZhbHVlKSB7CiAgICAgICAgdmFyIHRvcENvbXAgPSAiIjsKICAgICAgICB2YXIgYm90dG9tQ29tcCA9ICIiOwoKICAgICAgICBpZihfLmlzRnVuY3Rpb24odG9wVmFsdWUpKSB7CiAgICAgICAgICAgIHRvcENvbXAgPSB0b3BWYWx1ZSgpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdG9wQ29tcCA9ICc8ZGl2IGNsYXNzPSJzdGFja2VkLWNlbGwtY2VudGVyLXRvcCI+JyArIHRvcFZhbHVlICsgJzwvZGl2PicKICAgICAgICB9CgogICAgICAgIGlmIChfLmlzRnVuY3Rpb24oYm90dG9tVmFsdWUpKSB7CiAgICAgICAgICAgIGJvdHRvbUNvbXAgPSBib3R0b21WYWx1ZSgpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYm90dG9tQ29tcCA9ICc8ZGl2IGNsYXNzPSJzdGFja2VkLWNlbGwtY2VudGVyLWJvdHRvbSI+JyArIGJvdHRvbVZhbHVlICsgJzwvZGl2PicKICAgICAgICB9CgogICAgICAgIHJldHVybiB0b3BDb21wICsgYm90dG9tQ29tcAogICAgfTsKCiAgICAvLyBBbmQgdGhpcyBpcyB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgY3VzdG9tIGZ1bmN0aW9uIOKAiwogICAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uKHRtcGxfbmFtZSwgdG1wbF9kYXRhKSB7CgogICAgICAgIGlmICggIXJlbmRlci50bXBsX2NhY2hlICkgewoKCgogICAgICAgICAgICByZW5kZXIudG1wbF9jYWNoZSA9IHt9OwogICAgICAgIH0KICAgICAgICBpZiAoIXJlbmRlci50bXBsX2NhY2hlW3RtcGxfbmFtZV0pIHsKICAgICAgICAgICAgdmFyIHRtcGxfZGlyID0gJy9zaWduYWwvYXNzZXRzL2FwcC9wdnMvaGJzLXRlbXBsYXRlcyc7CiAgICAgICAgICAgIHZhciB0bXBsX3VybCA9IHRtcGxfZGlyICsgJy8nICsgdG1wbF9uYW1lICsgJy5oYnMnOwoKICAgICAgICAgICAgdmFyIHRtcGxfc3RyaW5nID0gIiI7CiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6IHRtcGxfdXJsLAogICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSwKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICB0bXBsX3N0cmluZyA9IGRhdGEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZW5kZXIudG1wbF9jYWNoZVt0bXBsX25hbWVdID0gSGFuZGxlYmFycy5jb21waWxlKHRtcGxfc3RyaW5nKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZW5kZXIudG1wbF9jYWNoZVt0bXBsX25hbWVdKHRtcGxfZGF0YSkKICAgIH07CgogICAgdmFyIGhic19wYXJ0aWFsID0gZnVuY3Rpb24odG1wbF9uYW1lKSB7CiAgICAgICAgaWYgKCFoYnNfcGFydGlhbC50bXBsX2NhY2hlKSB7CiAgICAgICAgICAgIGhic19wYXJ0aWFsLnRtcGxfY2FjaGUgPSB7fQogICAgICAgIH0KCiAgICAgICAgaWYgKCFoYnNfcGFydGlhbC50bXBsX2NhY2hlW3RtcGxfbmFtZV0pIHsKICAgICAgICAgICAgIHZhciB0bXBsX2RpciA9ICcvc2lnbmFsL2Fzc2V0cy9hcHAvcHZzL2hicy10ZW1wbGF0ZXMnOwogICAgICAgICAgICB2YXIgdG1wbF91cmwgPSB0bXBsX2RpciArICcvJyArIHRtcGxfbmFtZSArICcuaGJzJzsKCiAgICAgICAgICAgIHZhciB0bXBsX3N0cmluZyA9ICIiOwogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdXJsOiB0bXBsX3VybCwKICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgdG1wbF9zdHJpbmcgPSBkYXRhCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaGJzX3BhcnRpYWwudG1wbF9jYWNoZVt0bXBsX25hbWVdID0gdG1wbF9zdHJpbmcKICAgICAgICB9CgogICAgICAgIHJldHVybiBoYnNfcGFydGlhbC50bXBsX2NhY2hlW3RtcGxfbmFtZV0KICAgIH07CgogICAgdmFyIGNvbXBvc2VVcmwgPSBmdW5jdGlvbihjb250cm9sbGVyLCBhY3Rpb24sIHBhcmFtcykgewogICAgICAgIHZhciB1cmwgPSAiL3NpZ25hbC8iICsgY29udHJvbGxlciArICIvIiArIGFjdGlvbiArIChfLmlzTnVsbChwYXJhbXMpID8gJycgOiAnPycgKyBjb21wb3NlUGFyYW1zKHBhcmFtcykpOwoKICAgICAgICByZXR1cm4gdXJsCiAgICB9OwoKICAgIC8vVE9ETyA6IE5lZWQgdG8gY2hhbmdlIHRoaXMgdG8gaGFuZGxlYmFyIGZvcm0sIFdpbGwgYmUgZG9uZSBsYXRlcgogICAgdmFyIHBvc3RVcmwgPSBmdW5jdGlvbiAocGF0aCwgcGFyYW1zLCBuZXdXaW5kb3cpIHsKCiAgICAgICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTsKICAgICAgICBmb3JtLm1ldGhvZCA9ICJwb3N0IjsKICAgICAgICBmb3JtLmFjdGlvbiA9IHBhdGg7CiAgICAgICAgZm9ybS5lbmN0eXBlID0gImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCI7CiAgICAgICAgaWYgKG5ld1dpbmRvdykgZm9ybS50YXJnZXQgPSAiX2JsYW5rIjsKCiAgICAgICAgdmFyIHRva2VuID0gJCgibWV0YVtuYW1lPSdfY3NyZiddIikuYXR0cigiY29udGVudCIpOwogICAgICAgIHZhciBwYXJhbWV0ZXIgPSAkKCJtZXRhW25hbWU9J19jc3JmX3BhcmFtZXRlciddIikuYXR0cigiY29udGVudCIpOwogICAgICAgIHBhcmFtc1twYXJhbWV0ZXJdID0gdG9rZW47CiAgICAgICAgZm9yIChsZXQga2V5IGluIHBhcmFtcykgewogICAgICAgICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGhpZGRlbkZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKICAgICAgICAgICAgICAgIGhpZGRlbkZpZWxkLnR5cGUgPSAnaGlkZGVuJzsKICAgICAgICAgICAgICAgIGhpZGRlbkZpZWxkLm5hbWUgPSBrZXk7CiAgICAgICAgICAgICAgICBoaWRkZW5GaWVsZC52YWx1ZSA9IHBhcmFtc1trZXldOwogICAgICAgICAgICAgICAgZm9ybS5hcHBlbmRDaGlsZChoaWRkZW5GaWVsZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTsKICAgICAgICBmb3JtLnN1Ym1pdCgpOwogICAgfQoKICAgIHZhciBjb21wb3NlUGFyYW1zID0gZnVuY3Rpb24obykgewogICAgICAgIHJldHVybiBfLm1hcChfLnBhaXJzKG8pLCBmdW5jdGlvbihwKXtyZXR1cm4gcC5qb2luKCc9Jyl9ICkuam9pbignJicpCiAgICB9OwoKICAgIHZhciBjYXBpdGFsSXQgPSBmdW5jdGlvbihzKSB7CiAgICAgICAgcmV0dXJuIHMgJiYgc1swXS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKTsKICAgIH07CgogICAgdmFyIGJyZWFrSXQgPSBmdW5jdGlvbihzKSB7CiAgICAgICAgcmV0dXJuIHMgPyBzLnNwbGl0KC8oPz1bQS1aXSkvKS5qb2luKCcgJykgOiBzCiAgICB9OwoKICAgIHZhciBlbmFibGVfbG9hZF9idXR0b24gPSBmdW5jdGlvbihlbGUsIGVuYWJsZWQpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgICAgIHZhciB0YXJnZXRFbGUgPSBlbGUuZmluZCgnLmdseXBoaWNvbicpOwogICAgICAgICAgICBpZiAoZW5hYmxlZCkgewogICAgICAgICAgICAgICAgJCh0YXJnZXRFbGUpLmFkZENsYXNzKCdyZWZyZXNoLWFuaW1hdGUnKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQodGFyZ2V0RWxlKS5yZW1vdmVDbGFzcygncmVmcmVzaC1hbmltYXRlJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwogICAgdmFyIHNldEluTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24ocHJvcCwgZGF0YSkgewogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHByb3AsIGRhdGEpOwogICAgfTsKCiAgICB2YXIgZ2V0RnJvbUxvY2FsU3RvcmFnZSA9IGZ1bmN0aW9uKHByb3ApIHsKICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvcCk7CiAgICB9OwoKICAgIHZhciBzZXRKU09OSW5Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbihwcm9wLCBkYXRhKSB7CiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocHJvcCwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpOwogICAgfTsKCiAgICB2YXIgZ2V0SlNPTkZyb21Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiAocHJvcCkgewogICAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb3ApKTsKICAgIH07CgogICAgdmFyIGxvY2FsU3RvcmFnZVV0aWwgPSB7CiAgICAgICAgc2V0UHJvcCA6IHNldEluTG9jYWxTdG9yYWdlLAogICAgICAgIGdldFByb3AgOiBnZXRGcm9tTG9jYWxTdG9yYWdlLAogICAgICAgIHNldEpTT04gOiBzZXRKU09OSW5Mb2NhbFN0b3JhZ2UsCiAgICAgICAgZ2V0SlNPTiA6IGdldEpTT05Gcm9tTG9jYWxTdG9yYWdlCiAgICB9OwoKICAgIHZhciBnZXRRdWVyeVN0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBrZXkgPSBmYWxzZSwgcmVzID0ge30sIGl0bSA9IG51bGw7CiAgICAgICAgLy8gZ2V0IHRoZSBxdWVyeSBzdHJpbmcgd2l0aG91dCB0aGUgPwogICAgICAgIHZhciBxcyA9IGxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSk7CiAgICAgICAgLy8gY2hlY2sgZm9yIHRoZSBrZXkgYXMgYW4gYXJndW1lbnQKICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdLmxlbmd0aCA+IDEpCiAgICAgICAgICAgIGtleSA9IGFyZ3VtZW50c1swXTsKICAgICAgICAvLyBtYWtlIGEgcmVnZXggcGF0dGVybiB0byBncmFiIGtleS92YWx1ZQogICAgICAgIHZhciBwYXR0ZXJuID0gLyhbXiY9XSspPShbXiZdKikvZzsKICAgICAgICAvLyBsb29wIHRoZSBpdGVtcyBpbiB0aGUgcXVlcnkgc3RyaW5nLCBlaXRoZXIKICAgICAgICAvLyBmaW5kIGEgbWF0Y2ggdG8gdGhlIGFyZ3VtZW50LCBvciBidWlsZCBhbiBvYmplY3QKICAgICAgICAvLyB3aXRoIGtleS92YWx1ZSBwYWlycwogICAgICAgIHdoaWxlIChpdG0gPSBwYXR0ZXJuLmV4ZWMocXMpKSB7CiAgICAgICAgICAgIGlmIChrZXkgIT09IGZhbHNlICYmIGRlY29kZVVSSUNvbXBvbmVudChpdG1bMV0pID09PSBrZXkpCiAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGl0bVsyXSk7CiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gZmFsc2UpCiAgICAgICAgICAgICAgICByZXNbZGVjb2RlVVJJQ29tcG9uZW50KGl0bVsxXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KGl0bVsyXSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4ga2V5ID09PSBmYWxzZSA/IHJlcyA6IG51bGw7CiAgICB9OwoKICAgIHJldHVybiB7CiAgICAgICAgcmVuZGVyIDogcmVuZGVyLAogICAgICAgIHN0YWNrZWQ6IHN0YWNrZWQsCiAgICAgICAgY29tcG9zZVVybDogY29tcG9zZVVybCwKICAgICAgICBwb3N0VXJsOiBwb3N0VXJsLAogICAgICAgIGNvbXBvc2VQYXJhbXM6IGNvbXBvc2VQYXJhbXMsCiAgICAgICAgY2FwaXRhbEl0OiBjYXBpdGFsSXQsCiAgICAgICAgYnJlYWtJdDogYnJlYWtJdCwKICAgICAgICBoYnNfcGFydGlhbDogaGJzX3BhcnRpYWwsCiAgICAgICAgZW5hYmxlX2xvYWRfYnV0dG9uOiBlbmFibGVfbG9hZF9idXR0b24sCiAgICAgICAgbG9jYWxTdG9yYWdlVXRpbDogbG9jYWxTdG9yYWdlVXRpbCwKICAgICAgICBnZXRRdWVyeVN0cmluZzogZ2V0UXVlcnlTdHJpbmcKICAgIH0KfSkoKTsKCgoKdmFyIHNpZ25hbCA9IHNpZ25hbCB8fCB7fTsKCnNpZ25hbC5saXN0X3V0aWxzID0gKGZ1bmN0aW9uICgpIHsKICAgIHZhciBmbGFnX2l0ID0gZnVuY3Rpb24gKGZsYWcsIGlkKSB7CiAgICAgICAgdmFyIHRoZUh0bWwgPSAnPGkgY2xhc3M9ImZhIGZhLWZsYWctbyB0ZXh0LW11dGVkIHJ4LWxpc3QtZmxhZyIgZGF0YS1pZD0iJyArIGlkICsgJyI+PC9pPicKICAgICAgICBpZiAoZmxhZykgewogICAgICAgICAgICB0aGVIdG1sID0gJzxpIGNsYXNzPSJmYSBmYS1mbGFnIHRleHQtcHJpbWFyeSByeC1saXN0LWZsYWciIGRhdGEtaWQ9IicgKyBpZCArICciPjwvaT4nCiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGVIdG1sCiAgICB9OwoKICAgIHZhciBmbGFnX2hhbmRsZXIgPSBmdW5jdGlvbiAoY29udHJvbGxlciwgYWN0aW9uKSB7CiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5yeC1saXN0LWZsYWcnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICB2YXIgZWxlID0gZS50YXJnZXQ7CiAgICAgICAgICAgIHZhciBpZCA9ICQoZWxlKS5hdHRyKCdkYXRhLWlkJyk7CgogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdXJsOiAiL3NpZ25hbC8iICsgY29udHJvbGxlciArICIvIiArIGFjdGlvbiArICI/aWQ9IiArIGlkLAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZmxhZ2dlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAkKGVsZSkucmVtb3ZlQ2xhc3MoJ2ZhLWZsYWctbycpLnJlbW92ZUNsYXNzKCd0ZXh0LW11dGVkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlKS5hZGRDbGFzcygnZmEtZmxhZycpLmFkZENsYXNzKCd0ZXh0LXByaW1hcnknKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkKGVsZSkuYWRkQ2xhc3MoJ2ZhLWZsYWctbycpLmFkZENsYXNzKCd0ZXh0LW11dGVkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlKS5yZW1vdmVDbGFzcygnZmEtZmxhZycpLnJlbW92ZUNsYXNzKCd0ZXh0LXByaW1hcnknKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICB9KQogICAgfTsKCiAgICB2YXIgcHJpb3JpdHlfbGluayA9IGZ1bmN0aW9uIChwcmlvcml0eSwgaWQpIHsKICAgICAgICB2YXIgaWNvbl91cmwgPSBjb21wb3NlX3ByaW9yaXR5X2ljb24ocHJpb3JpdHkpOwogICAgICAgIHJldHVybiAnPGEgaHJlZj0iIyIgY2xhc3M9ImNoYW5nZS1wcmlvcml0eSI+PGltZyBkYXRhLWZpZWxkPSJwcmlvcml0eSIgZGF0YS1pbmZvPSJyb3ciIGRhdGEtaWQ9IicgKwogICAgICAgICAgICBpZCArICciIGRhdGEtdmFsdWU9IicgKyBwcmlvcml0eSArICciIHNyYz0iJyArIGljb25fdXJsICsgJyIvPjwvYT4nCiAgICB9OwoKICAgIHZhciBjb21wb3NlX3ByaW9yaXR5X2ljb24gPSBmdW5jdGlvbiAocHJpb3JpdHkpIHsKICAgICAgICB2YXIgaWNvbl91cmwgPSAiL3NpZ25hbC9hc3NldHMvaWNvbnMvZGVmYXVsdF9wcmlvcml0eS5wbmciOwoKICAgICAgICBpZiAoXy5jb250YWlucyhbJ2hpZ2gnLCAnbG93JywgJ21lZGl1bSddLCBwcmlvcml0eS50b0xvd2VyQ2FzZSgpKSkgewogICAgICAgICAgICBpY29uX3VybCA9ICIvc2lnbmFsL2Fzc2V0cy9pY29ucy8iICsgcHJpb3JpdHkudG9Mb3dlckNhc2UoKSArICJfcHJpb3JpdHkucG5nIjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGljb25fdXJsOwogICAgfTsKCiAgICB2YXIgY2hhbmdlX3ByaW9yaXR5ID0gZnVuY3Rpb24gKHByaW9yaXR5RWxlLCBwcmlvcml0eSkgewogICAgICAgIHZhciBpY29uX3VybCA9IGNvbXBvc2VfcHJpb3JpdHlfaWNvbihwcmlvcml0eSk7CiAgICAgICAgJChwcmlvcml0eUVsZSkuYXR0cigic3JjIiwgaWNvbl91cmwpOwogICAgICAgICQocHJpb3JpdHlFbGUpLmF0dHIoImRhdGEtdmFsdWUiLCBwcmlvcml0eSk7CiAgICB9OwoKICAgIHZhciBjaGFuZ2VfcHJpb3JpdHlUZXN0ID0gZnVuY3Rpb24gKHByaW9yaXR5RWxlLCBwcmlvcml0eSkgewogICAgICAgICQocHJpb3JpdHlFbGUpLmF0dHIoImRhdGEtdmFsdWUiLCBwcmlvcml0eSk7CiAgICB9OwoKICAgIGNoYW5nZV9wcmlvcml0eVRlc3QKCiAgICB2YXIgZmluZF9maWVsZCA9IGZ1bmN0aW9uICh0YWJsZV9yb3dfZWxlLCBhdHRyX25hbWUpIHsKICAgICAgICByZXR1cm4gJCh0YWJsZV9yb3dfZWxlKS5maW5kKCJbZGF0YS1hdHRyaWJ1dGUtbmFtZT0nIiArIGF0dHJfbmFtZSArICInXSIpCiAgICB9OwoKICAgIHZhciBzZXRfdmFsdWUgPSBmdW5jdGlvbiAodGFibGVfcm93X2VsZSwgYXR0cl9uYW1lLCBpZCwgZGF0YV9mdW4sIGFwcF9uYW1lKSB7CiAgICAgICAgdmFyIGVsZSA9IGZpbmRfZmllbGQodGFibGVfcm93X2VsZSwgYXR0cl9uYW1lKTsKICAgICAgICBlbGUuaHRtbChkYXRhX2Z1bihpZCwgYXBwX25hbWUpKTsKICAgIH07CgogICAgdmFyIGdldF9kdWVfaW4gPSBmdW5jdGlvbiAoaWQsIGFwcF9uYW1lKSB7CiAgICAgICAgdmFyIGR1ZUluID0gMDsKICAgICAgICAkLmFqYXgoewogICAgICAgICAgICB1cmw6ICIvc2lnbmFsL2FsZXJ0L2R1ZUluP2FsZXJ0SWQ9IiArIGlkICsgIiZhcHBOYW1lPSIgKyBhcHBfbmFtZSwKICAgICAgICAgICAgYXN5bmM6IGZhbHNlLAogICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgZHVlSW4gPSBkYXRhLnJlc3VsdDsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBkdWVJbgogICAgfTsKCiAgICB2YXIgZHVlX2luX2NvbXAgPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICBpZiAodmFsdWUgPD0gMCkgewogICAgICAgICAgICByZXR1cm4gIjxkaXYgZGF0YS1hdHRyaWJ1dGUtbmFtZT0nZHVlSW4nIHN0eWxlID0gJ2NvbG9yOnJlZCc+IiArIHZhbHVlICsgIjwvZGl2PiI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICI8ZGl2IGRhdGEtYXR0cmlidXRlLW5hbWU9J2R1ZUluJz4iICsgdmFsdWUgKyAiPC9kaXY+IjsKICAgICAgICB9CiAgICB9OwoKICAgIHZhciBhc3NpZ25lZF90b19jb21wID0gZnVuY3Rpb24gKGlkLCBhc3NpZ25lZFRvKSB7CiAgICAgICAgdmFyIGh0bWwgPSAnPGRpdiBjbGFzcz0iYXNzaWduZWRUb0NvbnRhaW5lciI+PHNlbGVjdCBjbGFzcz0iYXNzaWduZWRUb1NlbGVjdCBmb3JtLWNvbnRyb2wgc2VsZWN0MiI+PC9zZWxlY3Q+PGkgY2xhc3M9Im1kaSBtZGktc3BpbiBtZGktbG9hZGluZyBhc3NpZ25Ub1Byb2Nlc3NpbmciIHN0eWxlPSJkaXNwbGF5OiBub25lIj48L2k+PC9kaXY+JzsKICAgICAgICByZXR1cm4gaHRtbAogICAgfTsKCiAgICB2YXIgdHJ1bmNhdGVUZXh0QW5kU2hvd1Rvb2x0aXAgPSBmdW5jdGlvbiAoY3V0b2ZmLCB3b3JkYnJlYWssIGVzY2FwZUh0bWwpIHsKICAgICAgICB2YXIgZXNjID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8mL2csICcmYW1wOycpCiAgICAgICAgICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpCiAgICAgICAgICAgICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpCiAgICAgICAgICAgICAgICAucmVwbGFjZSgvIi9nLCAnJnF1b3Q7Jyk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkLCB0eXBlLCByb3cpIHsKICAgICAgICAgICAgLy8gT3JkZXIsIHNlYXJjaCBhbmQgdHlwZSBnZXQgdGhlIG9yaWdpbmFsIGRhdGEKICAgICAgICAgICAgaWYgKHR5cGUgIT09ICdkaXNwbGF5JykgewogICAgICAgICAgICAgICAgcmV0dXJuIGQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0eXBlb2YgZCAhPT0gJ251bWJlcicgJiYgdHlwZW9mIGQgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZCA9IGQudG9TdHJpbmcoKTsgLy8gY2FzdCBudW1iZXJzCgogICAgICAgICAgICBpZiAoZC5sZW5ndGggPD0gY3V0b2ZmKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZXNjKGQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgc2hvcnRlbmVkID0gZC5zdWJzdHIoMCwgY3V0b2ZmIC0gMSk7CgogICAgICAgICAgICAvLyBGaW5kIHRoZSBsYXN0IHdoaXRlIHNwYWNlIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nCiAgICAgICAgICAgIGlmICh3b3JkYnJlYWspIHsKICAgICAgICAgICAgICAgIHNob3J0ZW5lZCA9IHNob3J0ZW5lZC5yZXBsYWNlKC9ccyhbXlxzXSopJC8sICcnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gUHJvdGVjdCBhZ2FpbnN0IHVuY29udHJvbGxlZCBIVE1MIGlucHV0CiAgICAgICAgICAgIGlmIChlc2NhcGVIdG1sKSB7CiAgICAgICAgICAgICAgICBzaG9ydGVuZWQgPSBlc2Moc2hvcnRlbmVkKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuICc8c3BhbiBjbGFzcz0iZWxsaXBzaXMiIHRpdGxlPSInICsgZXNjKGQpICsgJyI+JyArIHNob3J0ZW5lZCArICcmIzgyMzA7PC9zcGFuPic7CiAgICAgICAgfTsKICAgIH07CgogICAgdmFyIGFkZF9maWx0ZXJzID0gZnVuY3Rpb24gKHRhYmxlLCBmaWx0ZXJzLCBmaWx0ZXJfdG9nZ2xlX2J0X2NvbnRhaW5lcikgewoKICAgICAgICB2YXIgeWFkY2ZfZmlsdGVycyA9IF8uZmlsdGVyKGZpbHRlcnMsIGZ1bmN0aW9uIChmKSB7CiAgICAgICAgICAgIGlmIChmWzFdICE9ICdjdXN0b21pemVkJykgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgdmFyIGN1c3RfZmlsdGVycyA9IF8uZGlmZmVyZW5jZShmaWx0ZXJzLCB5YWRjZl9maWx0ZXJzKTsKCiAgICAgICAgeWFkY2YuaW5pdCh0YWJsZSwgXy5tYXAoeWFkY2ZfZmlsdGVycywgZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgaWYgKGl0ZW1bMl0gPT0gdHJ1ZSkKICAgICAgICAgICAgICAgIHJldHVybiB7Y29sdW1uX251bWJlcjogaXRlbVswXSwgZmlsdGVyX3R5cGU6IGl0ZW1bMV0sIGZpbHRlcl9yZXNldF9idXR0b25fdGV4dDogJ3gnfTsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcmV0dXJuIHtjb2x1bW5fbnVtYmVyOiBpdGVtWzBdLCBmaWx0ZXJfdHlwZTogaXRlbVsxXSwgZmlsdGVyX3Jlc2V0X2J1dHRvbl90ZXh0OiBmYWxzZX07CiAgICAgICAgfSkpOwoKICAgICAgICBpZiAoZmlsdGVyX3RvZ2dsZV9idF9jb250YWluZXIpIHsKICAgICAgICAgICAgYWRkX2ZpbHRlcl90b2dnbGVfYnV0dG9uKCdpZHh4eHh4eCcsIGZpbHRlcl90b2dnbGVfYnRfY29udGFpbmVyKTsKICAgICAgICB9CgogICAgICAgIGlmIChjdXN0X2ZpbHRlcnMpIHsKICAgICAgICAgICAgXy5lYWNoKGN1c3RfZmlsdGVycywgZnVuY3Rpb24gKGYpIHsKICAgICAgICAgICAgICAgICQodGFibGUuY29sdW1uKGZbMF0pLmhlYWRlcigpKS5hcHBlbmQoY3JlYXRlX3N0YWNrZWRfZmlsdGVyKGZbMF0pKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfTsKCiAgICB2YXIgY3JlYXRlX3N0YWNrZWRfZmlsdGVyID0gZnVuY3Rpb24gKGlkeCkgewogICAgICAgIHJldHVybiAkKCI8aW5wdXQgdHlwZT0ndGV4dCcgZGF0YS1pbmRleD0nIiArIGlkeCArICInIGNsYXNzPSdjb2x1bW4tZmlsdGVyJyBwbGFjZWhvbGRlcj0nVHlwZSB0byBmaWx0ZXInPiIgKwogICAgICAgICAgICAiPGlucHV0IHR5cGU9J3RleHQnIGRhdGEtaW5kZXg9JyIgKyBpZHggKyAiJyBjbGFzcz0nY29sdW1uLWZpbHRlcicgcGxhY2Vob2xkZXI9J1R5cGUgdG8gZmlsdGVyJz4iKTsKICAgIH07CgogICAgdmFyIGFkZF9maWx0ZXJfdG9nZ2xlX2J1dHRvbiA9IGZ1bmN0aW9uICh0YWJsZV9pZCwgY29udGFpbmVyKSB7CiAgICAgICAgJCgnLnlhZGNmLWZpbHRlci13cmFwcGVyLCAuY29sdW1uLWZpbHRlcicpLmhpZGUoKTsKICAgICAgICAkKCcuY29sdW1uLWZpbHRlcicpLmNsaWNrKGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9KTsKICAgICAgICAkKCcuY29sdW1uLWZpbHRlcicpLm9uKCdrZXl1cCcsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgLy8gUGVyZm9ybSBzZWFyY2gKICAgICAgICAgICAgdmFyIGluZGV4ID0gJCh0aGlzKS5kYXRhKCdpbmRleCcpOwogICAgICAgICAgICAkKHRhYmxlX2lkKS5EYXRhVGFibGUoKS5jb2x1bW4oaW5kZXgpLnNlYXJjaCgkKHRoaXMpLnZhbCgpKS5kcmF3KCk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIGZpbHRlclRvZ2dsZSA9ICI8aSBjbGFzcz0ndGFibGUtZmlsdGVyLXRvZ2dsZSBnbHlwaGljb24gZ2x5cGhpY29uLWZpbHRlcicgZGF0YS10YWJsZT0nIiArIHRhYmxlX2lkICsKICAgICAgICAgICAgIicgb25jbGljaz0nc2lnbmFsLmxpc3RfdXRpbHMuaGFuZGxlX2ZpbHRlcl90b2dnbGUnIGRhdGEtc2hvdy1maWx0ZXI9J3RydWUnPjwvaT4iOwogICAgICAgIHZhciB0b2dnbGVfYnV0dG9uID0gJC5wYXJzZUhUTUwoZmlsdGVyVG9nZ2xlKTsKICAgICAgICBpZiAoIShfLmlzVW5kZWZpbmVkKGNvbnRhaW5lcikgJiYgXy5pc051bGwoY29udGFpbmVyKSkpIHsKICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZCh0b2dnbGVfYnV0dG9uKTsKICAgICAgICB9CgogICAgICAgICQoZG9jdW1lbnQpLm9uKCdmaWx0ZXItdG9nZ2xlLWluaXQnLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgICQoJy50YWJsZS1maWx0ZXItdG9nZ2xlJykuY2xpY2soZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICAgICAgdmFyIGhpZGVfc2hvd19maXRsZXIgPSBmdW5jdGlvbiAodGFibGVJZCwgaGlkZU9yU2hvdykgewogICAgICAgICAgICAgICAgICAgIGlmIChoaWRlT3JTaG93ID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgICAgICAkKHRhYmxlSWQgKyAnX3dyYXBwZXIgLnlhZGNmLWZpbHRlci13cmFwcGVyLC5jb2x1bW4tZmlsdGVyJykuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQodGFibGVJZCArICdfd3JhcHBlciAueWFkY2YtZmlsdGVyLXdyYXBwZXIsLmNvbHVtbi1maWx0ZXInKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0RmlsdGVyVG9nZ2xlID0gJChldnQudGFyZ2V0KTsKICAgICAgICAgICAgICAgIHZhciB0YWJsZUlkID0gdGFyZ2V0RmlsdGVyVG9nZ2xlLmRhdGEoJ3RhYmxlJyk7CiAgICAgICAgICAgICAgICB2YXIgc2hvd0ZpbHRlciA9IHRhcmdldEZpbHRlclRvZ2dsZS5kYXRhKCdzaG93LWZpbHRlcicpOwogICAgICAgICAgICAgICAgaWYgKHNob3dGaWx0ZXIgPT09ICd0cnVlJykgewogICAgICAgICAgICAgICAgICAgIHRhcmdldEZpbHRlclRvZ2dsZS5kYXRhKCdzaG93RmlsdGVyJywgJ2ZhbHNlJyk7CiAgICAgICAgICAgICAgICAgICAgaGlkZV9zaG93X2ZpdGxlcih0YWJsZUlkLCBmYWxzZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRhcmdldEZpbHRlclRvZ2dsZS5kYXRhKCdzaG93RmlsdGVyJywgJ3RydWUnKTsKICAgICAgICAgICAgICAgICAgICBoaWRlX3Nob3dfZml0bGVyKHRhYmxlSWQsIHRydWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICAgICAgJChkb2N1bWVudCkudHJpZ2dlcignZmlsdGVyLXRvZ2dsZS1pbml0Jyk7CiAgICAgICAgcmV0dXJuICQodG9nZ2xlX2J1dHRvbik7CiAgICB9OwoKICAgIHZhciBoYW5kbGVfZmlsdGVyX3RvZ2dsZSA9IGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAkKHRoaXMpLmF0dHIoJ3RhcmdldC10YWJsZScpOwogICAgfTsKCiAgICByZXR1cm4gewogICAgICAgIGZsYWdfaXQ6IGZsYWdfaXQsCiAgICAgICAgZmxhZ19oYW5kbGVyOiBmbGFnX2hhbmRsZXIsCiAgICAgICAgcHJpb3JpdHlfbGluazogcHJpb3JpdHlfbGluaywKICAgICAgICBjaGFuZ2VfcHJpb3JpdHk6IGNoYW5nZV9wcmlvcml0eSwKICAgICAgICBmaW5kX2ZpZWxkOiBmaW5kX2ZpZWxkLAogICAgICAgIHNldF92YWx1ZTogc2V0X3ZhbHVlLAogICAgICAgIGdldF9kdWVfaW46IGdldF9kdWVfaW4sCiAgICAgICAgZHVlX2luX2NvbXA6IGR1ZV9pbl9jb21wLAogICAgICAgIGFzc2lnbmVkX3RvX2NvbXA6IGFzc2lnbmVkX3RvX2NvbXAsCiAgICAgICAgdHJ1bmNhdGVUZXh0QW5kU2hvd1Rvb2x0aXA6IHRydW5jYXRlVGV4dEFuZFNob3dUb29sdGlwLAogICAgICAgIGFkZF9maWx0ZXJzOiBhZGRfZmlsdGVycywKICAgICAgICBoYW5kbGVfZmlsdGVyX3RvZ2dsZTogaGFuZGxlX2ZpbHRlcl90b2dnbGUsCiAgICAgICAgYWRkX2ZpbHRlcl90b2dnbGVfYnV0dG9uOiBhZGRfZmlsdGVyX3RvZ2dsZV9idXR0b24KICAgIH0KfSkoKTsKSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaTE4bicsCiAgICBmdW5jdGlvbihzdHIpewogICAgICAgIHJldHVybiAoICh0eXBlb2YgaTE4bikgIT09ICd1bmRlZmluZWQnID8gc3RyIDogc3RyKQogICAgfQopOwoKSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignc2VsZWN0JywgZnVuY3Rpb24obmFtZSwgc2VsZWN0ZWRWYWx1ZSwgb3B0aW9ucywgZGlzcF9maWVsZCwgdmFsdWVfZmllbGQpIHsKICAgIHZhciBvdXQgPSAiPHNlbGVjdCBjbGFzcz0nZm9ybS1jb250cm9sIHNlbGVjdEJveCcgaWQ9XCciICsgbmFtZSArICJcJyBuYW1lPSIgKyBuYW1lICsgIj5cbiI7CiAgICBfLmVhY2gob3B0aW9ucywgZnVuY3Rpb24odikgewogICAgICAgIG91dCArPSAiPG9wdGlvbiB2YWx1ZT0nIiArIHZbdmFsdWVfZmllbGRdICsgIiciICsKICAgICAgICAgICAgKHZbdmFsdWVfZmllbGRdID09IHNlbGVjdGVkVmFsdWVbdmFsdWVfZmllbGRdID8gIiBzZWxlY3RlZCAiIDogIiIpICsgIiA+IiArCiAgICAgICAgICAgIGVzY2FwZUhUTUwodltkaXNwX2ZpZWxkXSkgKyAiPC9vcHRpb24+XG4iCiAgICB9KTsKICAgIG91dCArPSAiPC9zZWxlY3Q+IjsKCiAgICByZXR1cm4gbmV3IEhhbmRsZWJhcnMuU2FmZVN0cmluZyhvdXQpCn0pOwoKSGFuZGxlYmFycy5yZWdpc3RlclBhcnRpYWwoJ2RhdGVfcGlja2VyX3RlbXBsYXRlJywgc2lnbmFsLnV0aWxzLmhic19wYXJ0aWFsKCdkYXRlX3BpY2tlcl90ZW1wbGF0ZScpKTsKCi8vSGFuZGxlYmFyIGhlbHBlciB0byBpbWl0YXRlIHRoZSBpZiBjb25kaXRpb25zCkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2lmX2VxJywgZnVuY3Rpb24oYSwgYiwgb3B0cykgewogICAgaWYgKGEgPT0gYikgewogICAgICAgIHJldHVybiBvcHRzLmZuKHRoaXMpOwogICAgfQp9KTsKCi8vSGFuZGxlYmFyIGhlbHBlciB0byBpbWl0YXRlIHRoZSBpZi4uZWxzZSBjb25kaXRpb25zCkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2lmX2Vsc2VfZXEnLCBmdW5jdGlvbihhLCBiLCBvcHRzKSB7CiAgICBpZiAoYSA9PSBiKSB7CiAgICAgICAgcmV0dXJuIG9wdHMuZm4odGhpcyk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBvcHRzLmludmVyc2UodGhpcyk7CiAgICB9Cn0pOwoKSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaWZfdGFnX2V4aXN0JywgZnVuY3Rpb24oa2V5LCB2YWx1ZSx0YWdzLCBvcHRzKSB7CiAgICBpZih2YWx1ZS50YWdUZXh0ID09IHRhZ3Nba2V5LTFdLnRhZ1RleHQgJiYgdmFsdWUuc3ViVGFnVGV4dCE9bnVsbCAmJiB2YWx1ZS5zdWJUYWdUZXh0ICE9IHRhZ3Nba2V5LTFdLnN1YlRhZ1RleHQpewogICAgICAgIHJldHVybiBvcHRzLmZuKHRoaXMpOwogICAgfSBlbHNlewogICAgICAgIHJldHVybiBvcHRzLmludmVyc2UodGhpcyk7CiAgICB9Cn0pOwoKSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaWZfZWxzZV9uZXEnLCBmdW5jdGlvbihhLCBiLCBvcHRzKSB7CiAgICBpZiAoYSAhPSBiKSB7CiAgICAgICAgcmV0dXJuIG9wdHMuZm4odGhpcyk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBvcHRzLmludmVyc2UodGhpcyk7CiAgICB9Cn0pOwoKdmFyIHNob3dUb3BpY1dpZGdldCA9IGZ1bmN0aW9uICgpIHsKICAgICQoIiN0b3BpYyIpLnNlbGVjdDIoewogICAgICAgIHRhZ3M6IHRydWUsCiAgICAgICAgcGxhY2Vob2xkZXI6ICJTZWxlY3QgdG9waWMiLAogICAgICAgIGFsbG93Q2xlYXI6IHRydWUsCiAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICBjcmVhdGVUYWc6IGZ1bmN0aW9uIChwYXJhbXMpIHsKICAgICAgICAgICAgdmFyIHRlcm0gPSAkLnRyaW0ocGFyYW1zLnRlcm0pOwogICAgICAgICAgICBpZiAodGVybSAhPSAiIikgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBpZDogdGVybSwKICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0ZXJtCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICB9CiAgICB9KTsKfTsKLy89IHJlcXVpcmUgYXBwL3B2cy9jb21tb24vcnhfY29tbW9uLmpzCi8vPSByZXF1aXJlIGFwcC9wdnMvY29tbW9uL3J4X2xpc3RfdXRpbHMuanMKLy89IHJlcXVpcmUgYXBwL3B2cy9jb21tb24vcnhfaGFuZGxlYmFyX2V4dC5qcwovLz0gcmVxdWlyZSBhcHAvcHZzL3RvcGljL2F0dGFjaEFsZXJ0VG9Ub3BpYy5qcwoKdmFyIHNpZ25hbCA9IHNpZ25hbCB8fCB7fTsKCnZhciB0b3BpY0RhdGE7CnZhciBjb2x1bW5TZXE7CnZhciBpc1ZpZXdJbnN0YW5jZSA9IDE7CnZhciBzaWduYWxBbGVydFR5cGUgPSB7CiAgICBTSU5HTEVfQ0FTRV9BTEVSVDogIlNpbmdsZSBDYXNlIEFsZXJ0IiwKICAgIEFHR1JFR0FURV9BTEVSVDogIkFnZ3JlZ2F0ZSBDYXNlIEFsZXJ0IiwKICAgIEVWREFTX0FMRVJUOiAiRXZkYXMgQWxlcnQiLAogICAgQURIT0NfQUxFUlQ6ICJBZC1Ib2MgQWxlcnQiLAogICAgTElURVJBVFVSRV9TRUFSQ0hfQUxFUlQ6ICJMaXRlcmF0dXJlIFNlYXJjaCBBbGVydCIKfQoKc2lnbmFsLmFsZXJ0UmV2aWV3ID0gKGZ1bmN0aW9uICgpIHsKCiAgICB2YXIgaWRzID0gW107CiAgICB2YXIgcm93cyA9IFtdOwoKICAgIHZhciBhcHBseUJ1c2luZXNzUnVsZXMgPSBmdW5jdGlvbiAocm93LCBkYXRhKSB7CiAgICAgICAgLy9BcHBseSB0aGUgZXVkcmEgcnVsZXMuCiAgICAgICAgaWYgKGRhdGEuZm9ybWF0KSB7CiAgICAgICAgICAgIHZhciBvYmogPSBKU09OLnBhcnNlKGRhdGEuZm9ybWF0KTsKICAgICAgICAgICAgdmFyIHRleHRPYmo7CiAgICAgICAgICAgICQuZWFjaChvYmoudGV4dC50YywgZnVuY3Rpb24gKGluZGV4LCBkYXRhKSB7CiAgICAgICAgICAgICAgICB0ZXh0T2JqID0gJChyb3cpLmZpbmQoJy4nICsgZGF0YSk7CiAgICAgICAgICAgICAgICB0ZXh0T2JqLmNzcygnY29sb3InLCBvYmoudGV4dC5jb2xvcik7CiAgICAgICAgICAgICAgICBpZiAob2JqLnRleHQuYm9sZCkgewogICAgICAgICAgICAgICAgICAgIHRleHRPYmouY3NzKCdmb250LXdlaWdodCcsICc5MDAnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChvYmoudGV4dC5pdGFsaWMpIHsKICAgICAgICAgICAgICAgICAgICB0ZXh0T2JqLmNzcygnZm9udC1zdHlsZScsICdpdGFsaWMnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChvYmoudGV4dC51bmRlcmxpbmUpIHsKICAgICAgICAgICAgICAgICAgICB0ZXh0T2JqLmNzcygndGV4dC1kZWNvcmF0aW9uJywgJ3VuZGVybGluZScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgJC5lYWNoKG9iai5jZWxsLnRjLCBmdW5jdGlvbiAoaW5kZXgsIGRhdGEpIHsKICAgICAgICAgICAgICAgICQocm93KS5maW5kKCcuJyArIGRhdGEpLnBhcmVudHMoJ3RkJykuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgb2JqLmNlbGwuY29sb3IpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9OwoKICAgIHZhciBlbmFibGVNZW51VG9vbHRpcHMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJCgiLmdyaWQtbWVudS10b29sdGlwIikubW91c2VvdmVyKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTsKICAgICAgICAgICAgdmFyIHRvb2x0aXBUZXh0ID0gJHRoaXMuYXR0cigiZGF0YS10aXRsZSIpOwogICAgICAgICAgICAkdGhpcy50b29sdGlwKHsKICAgICAgICAgICAgICAgIHRpdGxlOiB0b29sdGlwVGV4dCwKICAgICAgICAgICAgICAgIHBsYWNlbWVudDogImJvdHRvbSIKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICR0aGlzLnRvb2x0aXAoJ3Nob3cnKTsKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIGRpc2FibGVUb29sdGlwcyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkKCIubWRpLWFscGhhLWQtYm94LCAubWRpLWZpbHRlci1vdXRsaW5lLCAubWRpLXRyZW5kaW5nLXVwLCAubWRpLWNvbnRlbnQtc2F2ZSwgLm1kaS1leHBvcnQsIC5tZGktc2V0dGluZ3MsIG1kaS1wbHVzLWJveCwgbWRpLWNoYXJ0LWJhciIpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgiLnRvb2x0aXAiKS5oaWRlKCk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBzb3J0SWNvbkhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHRoQXJyYXkgPSAkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuRGF0YVRhYmxlKCkuY29sdW1ucygpLmhlYWRlcigpOwogICAgICAgIGlmIChpc1ZpZXdJbnN0YW5jZSkgewogICAgICAgICAgICB2YXIgY29sdW1uTmFtZTsKICAgICAgICAgICAgdmFyIGluZGV4T2ZDb2x1bW4gPSAwOwogICAgICAgICAgICBjb2x1bW5TZXEuZXZlcnkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIHNlcSA9IGNvbHVtblNlcVtpbmRleE9mQ29sdW1uXS5zZXE7CiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gc2VxKSB7CiAgICAgICAgICAgICAgICAgICAgY29sdW1uTmFtZSA9IGNvbHVtblNlcVtpbmRleE9mQ29sdW1uXS5uYW1lOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGluZGV4T2ZDb2x1bW4rKzsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIGNvbHVtbkluZGV4ID0gJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLmZpbmQoInRoW2RhdGEtZmllbGQ9IiArIGNvbHVtbk5hbWUgKyAiXSIpLmF0dHIoJ2RhdGEtY29sdW1uLWluZGV4Jyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29sdW1uSW5kZXggPSBpbmRleDsKICAgICAgICB9CiAgICAgICAgJC5lYWNoKHRoQXJyYXksIGZ1bmN0aW9uIChjdXJyZW50SW5kZXgsIGVsZW1lbnQpIHsKICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzb3J0aW5nX2FzYycpKSB7CiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3NvcnRpbmdfYXNjJyk7CiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoInNvcnRpbmciKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnc29ydGluZ19kZXNjJykpIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc29ydGluZ19kZXNjJyk7CiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoInNvcnRpbmciKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID09IGNvbHVtbkluZGV4ICYmICFlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnc29ydGluZ19kaXNhYmxlZCcpKSB7CiAgICAgICAgICAgICAgICBpZiAoZGlyID09ICdhc2MnKSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzb3J0aW5nJyk7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCJzb3J0aW5nX2FzYyIpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaXIgPT0gJ2Rlc2MnKSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzb3J0aW5nJyk7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCJzb3J0aW5nX2Rlc2MiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfTsKCiAgICAvKioKICAgICAqIFRoZSByZXNldCBtb2RhbCBzY3JlZW4gZnVuY3Rpb24gd2hpY2ggcmVzZXRzIHRoZSBwYXNzd29yZCBkaXYgaW4gdGhlIHdvcmtmbG93IG1vZGFsIHNjcmVlbi4KICAgICAqIFRoaXMgaXMgaW50ZXJuYWwgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGludGVybmFsbHkgaW4gdGhpcyBvYmplY3Qgc2NvcGUuCiAgICAgKi8KICAgIHZhciByZXNldE1vZGFsU2NyZWVuID0gZnVuY3Rpb24gKCkgewogICAgICAgIC8vQ2xlYW4gdXAgdGhlIHRoZSBkaXNwb3NpdGlvbnMgZmllbGRzLgogICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsJykuZmluZCgnI2V4dHJhLXZhbHVlLXNlbGVjdCcpLmh0bWwoIjxvcHRpb24+PC9vcHRpb24+Iik7CiAgICAgICAgLy9IaWRlIHRoZSBwYXNzd29yZAogICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsJykuZmluZCgnI3Bhc3N3b3JkRGl2JykuYWRkQ2xhc3MoJ2hpZGUnKTsKICAgICAgICAkKCcjZWRpdC1zdGF0ZS1tb2RhbCcpLmZpbmQoJyNpc1Bhc3N3b3JkRW5hYmxlZCcpLnZhbCgwKTsKICAgIH0KCiAgICB2YXIgc2hvd1Bhc3N3b3JkRmllbGQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJCgnI2VkaXQtc3RhdGUtbW9kYWwnKS5maW5kKCcjcGFzc3dvcmREaXYnKS5yZW1vdmVDbGFzcygnaGlkZScpOwogICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsJykuZmluZCgnI2lzUGFzc3dvcmRFbmFibGVkJykudmFsKDEpOwogICAgfQoKICAgIHZhciBjaGFuZ2VXb3JrZmxvd0VkaXRTY3JlZW4gPSBmdW5jdGlvbiAoYXZhaWxhYmxlVmFsdWVzLCB0YXJnZXRWYWwpIHsKCiAgICAgICAgdmFyIGF2YWlsYWJsZVZhbE9iaiA9IF8uZmluZFdoZXJlKGF2YWlsYWJsZVZhbHVlcywge3ZhbHVlOiB0YXJnZXRWYWx9KTsKCiAgICAgICAgaWYgKHR5cGVvZiBhdmFpbGFibGVWYWxPYmogIT0gJ3VuZGVmaW5lZCcgJiYgYXZhaWxhYmxlVmFsT2JqKSB7CiAgICAgICAgICAgIGlmIChhdmFpbGFibGVWYWxPYmouYXBwcm92YWxSZXF1aXJlZCkgewogICAgICAgICAgICAgICAgc2hvd1Bhc3N3b3JkRmllbGQoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJlc2V0TW9kYWxTY3JlZW4oKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy9DbGVhbiB1cCB0aGUgdGhlIGRpc3Bvc2l0aW9ucyBmaWVsZHMKICAgICAgICAgICAgJCgnI2VkaXQtc3RhdGUtbW9kYWwnKS5maW5kKCcjZXh0cmEtdmFsdWUtc2VsZWN0JykuaHRtbCgnJykKCiAgICAgICAgICAgIC8vRmlsbCB1cCB0aGUgZGlzcG9zaXRpb25zIGluIHRoZSBjb21ibwogICAgICAgICAgICAkKCcjZWRpdC1zdGF0ZS1tb2RhbCcpLmZpbmQoJyNleHRyYS12YWx1ZS1zZWxlY3QnKS5odG1sKGdldERpc3Bvc2l0aW9uT3B0aW9ucyhhdmFpbGFibGVWYWxPYmopKQogICAgICAgIH0KICAgIH0KCiAgICB2YXIgZ2V0RGlzcG9zaXRpb25PcHRpb25zID0gZnVuY3Rpb24gKGF2YWlsYWJsZVZhbE9iaikgewogICAgICAgIHZhciBkaXNwb3NpdGlvblN0ciA9ICI8b3B0aW9uPjwvb3B0aW9uPiI7CiAgICAgICAgXy5lYWNoKGF2YWlsYWJsZVZhbE9iai5kaXNwb3NpdGlvbnMsIGZ1bmN0aW9uIChkaXNwb3NpdGlvbikgewogICAgICAgICAgICBkaXNwb3NpdGlvblN0ciA9IGRpc3Bvc2l0aW9uU3RyICsKICAgICAgICAgICAgICAgICI8b3B0aW9uIHZhbHVlPVwiIiArIGRpc3Bvc2l0aW9uLnZhbHVlICsgIlwiPiIgKyBkaXNwb3NpdGlvbi5kaXNwbGF5TmFtZSArICI8L29wdGlvbj4iCiAgICAgICAgfSkKICAgICAgICByZXR1cm4gZGlzcG9zaXRpb25TdHIKICAgIH0KCiAgICB2YXIgYXV0aGVudGljYXRlVXNlciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgcmV0dXJuVmFsID0gZmFsc2UKICAgICAgICB2YXIgcGFzc3dvcmRKc29uID0gewogICAgICAgICAgICAicGFzc3dvcmQiOiAkKCcjZWRpdC1zdGF0ZS1tb2RhbCcpLmZpbmQoJyNwYXNzd29yZEF1dGhlbnRpY2F0aW9uJykudmFsKCkKICAgICAgICB9CgogICAgICAgIHZhciBhdXRoVXJsID0gJy9zaWduYWwvdXNlci9hdXRoZW50aWNhdGUnCgogICAgICAgICQuYWpheCh7CiAgICAgICAgICAgIHVybDogYXV0aFVybCwKICAgICAgICAgICAgZGF0YTogcGFzc3dvcmRKc29uLAogICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuYXV0aG9yaXplZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IHRydWUKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gZmFsc2UKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IGZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcmV0dXJuVmFsCiAgICB9CgogICAgdmFyIHRvZ2dsZUVycm9yTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIGlmIChhY3Rpb24gPT0gJ2hpZGUnKSB7CiAgICAgICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsIC5lcnJvck5vdGlmaWNhdGlvbicpLmFkZENsYXNzKCdoaWRlJyk7CiAgICAgICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsJykuZmluZCgnLmVycm9yTWVzc2FnZScpLmh0bWwoJycpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICQoJyNlZGl0LXN0YXRlLW1vZGFsIC5lcnJvck5vdGlmaWNhdGlvbicpLnJlbW92ZUNsYXNzKCdoaWRlJykKICAgICAgICAgICAgJCgnI2VkaXQtc3RhdGUtbW9kYWwnKS5maW5kKCcuZXJyb3JNZXNzYWdlJykuaHRtbCgnIEF1dGhlbnRpY2F0aW9uIEZhaWxlZCEnKTsKICAgICAgICB9CiAgICB9OwoKICAgIHZhciBvcGVuQ2FzZUhpc3RvcnlNb2RhbCA9IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgLy9CaW5kIHRoZSBjbGljayBldmVudCBvbiB0aGUgY2FzZSBoaXN0b3J5IGljb24uCiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5jYXNlLWhpc3RvcnktaWNvbicsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB2YXIgcGFyZW50X3JvdyA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCd0cicpOwogICAgICAgICAgICB2YXIgc2VsZWN0ZWRSb3dJbmRleCA9ICQodGhpcykuY2xvc2VzdCgndHInKS5pbmRleCgpOwogICAgICAgICAgICBpZiAoaXNBYnN0cmFjdFZpZXdPckNhc2VWaWV3KHNlbGVjdGVkUm93SW5kZXgpKSB7CiAgICAgICAgICAgICAgICBzZWxlY3RlZFJvd0luZGV4ID0gc2VsZWN0ZWRSb3dJbmRleCAvIDIKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgaXNTaWduYWwgPSAkKHRoaXMpLmRhdGEoJ3NpZ25hbCcpOwoKICAgICAgICAgICAgdmFyIHJvd09iamVjdCA9IHt9OwogICAgICAgICAgICBpZiAoIWlzU2lnbmFsKSB7CiAgICAgICAgICAgICAgICByb3dPYmplY3QgPSB0YWJsZS5yb3dzKHNlbGVjdGVkUm93SW5kZXgpLmRhdGEoKVswXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJvd09iamVjdCA9IHRhYmxlU2luZ2xlUmV2aWV3LnJvdygkKHRoaXMpLnBhcmVudHMoJ3RyJykpLmRhdGEoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgY2FzZU51bWJlciA9IHJvd09iamVjdC5jYXNlTnVtYmVyOwogICAgICAgICAgICB2YXIgcHJvZHVjdEZhbWlseSA9IHJvd09iamVjdC5wcm9kdWN0RmFtaWx5OwogICAgICAgICAgICB2YXIgY2FzZVZlcnNpb24gPSByb3dPYmplY3QuY2FzZVZlcnNpb247CiAgICAgICAgICAgIHZhciBwcm9kdWN0TmFtZSA9IHJvd09iamVjdC5wcm9kdWN0TmFtZTsKICAgICAgICAgICAgdmFyIHB0ID0gcm93T2JqZWN0LnByaW1hcnlFdmVudDsKICAgICAgICAgICAgdmFyIGFsZXJ0Q29uZmlnSWQgPSByb3dPYmplY3QuYWxlcnRDb25maWdJZDsKCiAgICAgICAgICAgIHZhciBjYXNlSGlzdG9yeU1vZGFsID0gJCgnI2Nhc2VIaXN0b3J5TW9kYWwnKTsKICAgICAgICAgICAgY2FzZUhpc3RvcnlNb2RhbC5maW5kKCIjY2FzZU51bWJlciIpLmh0bWwoY2FzZU51bWJlcik7CiAgICAgICAgICAgIGNhc2VIaXN0b3J5TW9kYWwuZmluZCgiI3Byb2R1Y3RGYW1pbHkiKS5odG1sKHByb2R1Y3RGYW1pbHkpOwogICAgICAgICAgICBjYXNlSGlzdG9yeU1vZGFsLmZpbmQoIiNjYXNlVmVyc2lvbiIpLnZhbChjYXNlVmVyc2lvbik7CiAgICAgICAgICAgIGNhc2VIaXN0b3J5TW9kYWwuZmluZCgiI3Byb2R1Y3ROYW1lIikudmFsKHByb2R1Y3ROYW1lKTsKICAgICAgICAgICAgY2FzZUhpc3RvcnlNb2RhbC5maW5kKCIjYWxlcnRDb25maWdJZCIpLnZhbChhbGVydENvbmZpZ0lkKTsKICAgICAgICAgICAgY2FzZUhpc3RvcnlNb2RhbC5maW5kKCIjcHQiKS52YWwocHQpOwogICAgICAgICAgICBjYXNlSGlzdG9yeU1vZGFsLm1vZGFsKCdzaG93Jyk7CgogICAgICAgICAgICBpZih0eXBlb2Ygc2luZ2xlQ2FzZVVwZGF0ZUp1c3RpZmljYXRpb25VcmwgIT0gJ3VuZGVmaW5lZCcpCiAgICAgICAgICAgICAgICB1cGRhdGVKdXN0aWZpY2F0aW9uVXJsID0gc2luZ2xlQ2FzZVVwZGF0ZUp1c3RpZmljYXRpb25Vcmw7CgogICAgICAgICAgICBzaWduYWwuY2FzZUhpc3RvcnlUYWJsZS5pbml0X2Nhc2VfaGlzdG9yeV90YWJsZShjYXNlSGlzdG9yeVVybCk7CiAgICAgICAgICAgIHNpZ25hbC5jYXNlSGlzdG9yeVRhYmxlLmluaXRfY2FzZV9oaXN0b3J5X3RhYmxlX3N1c3BlY3QoY2FzZUhpc3RvcnlTdXNwZWN0VXJsKTsKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIG9wZW5BbGVydENvbW1lbnRNb2RhbCA9IGZ1bmN0aW9uIChhbGVydFR5cGUsIGFwcGxpY2F0aW9uTmFtZSkgewoKICAgICAgICAvL01vZGFsIG9iamVjdAogICAgICAgIHZhciBjb21tZW50TW9kYWwgPSAkKCcjY29tbWVudE1vZGFsJyk7CiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5jb21tZW50LWljb24nLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpczsKICAgICAgICAgICAgdmFyIGRhdGFJbmZvOwogICAgICAgICAgICB2YXIgaXNDYXNlRGV0YWlsOwogICAgICAgICAgICB2YXIgYXBwVHlwZTsKICAgICAgICAgICAgdmFyIHZhbGlkYXRlZFNpZ25hbElkOwogICAgICAgICAgICB2YXIgY29tbWVudEFsZXJ0VHlwZSA9ICQoJHRoaXMpLmRhdGEoJ25hbWUnKTsKICAgICAgICAgICAgdmFyIGlzU2lnbmFsID0gJCgkdGhpcykuZGF0YSgnc2lnbmFsJyk7CgogICAgICAgICAgICBpZiAoY29tbWVudEFsZXJ0VHlwZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBhbGVydFR5cGUgPSBjb21tZW50QWxlcnRUeXBlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIHZhciBjYXNlSnNvbkFycmF5ID0gW107CiAgICAgICAgICAgIGRhdGFJbmZvID0gJChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtaW5mbycpOwogICAgICAgICAgICBpc0Nhc2VEZXRhaWwgPSAkKGV2ZW50LnRhcmdldCkuYXR0cignZGF0YS1jb21tZW50Jyk7CgogICAgICAgICAgICBhcHBUeXBlID0gJCgiI2FwcGxpY2F0aW9uIikuaHRtbCgpOwogICAgICAgICAgICBpZiAoYXBwVHlwZSA9PT0gJycpIHsKICAgICAgICAgICAgICAgIGFwcFR5cGUgPSBjb21tZW50TW9kYWwuZmluZCgiI2FwcGxpY2F0aW9uIikuaHRtbCgpOwogICAgICAgICAgICAgICAgdmFsaWRhdGVkU2lnbmFsSWQgPSBjb21tZW50TW9kYWwuZmluZCgiI3ZhbGlkYXRlZFNpZ25hbElkIikuaHRtbCgpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBzZWxlY3RlZFJvd0NvdW50OwogICAgICAgICAgICBpZiAoJCgnI2RldGFpbGVkLXZpZXctY2hlY2tib3gnKS5pcygnOmNoZWNrZWQnKSkgewogICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dDb3VudCA9ICQoJ3RhYmxlI2FsZXJ0c0RldGFpbHNUYWJsZSAuY29weS1zZWxlY3Q6Y2hlY2tlZCcpLmxlbmd0aDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNlbGVjdGVkUm93Q291bnQgPSAkKCd0YWJsZS5EVEZDX0Nsb25lZCAuY29weS1zZWxlY3Q6Y2hlY2tlZCcpLmxlbmd0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2VsZWN0ZWRSb3dDb3VudCA+IDEgJiYgJCgkdGhpcykuY2xvc2VzdCgndHInKS5maW5kKCIuY29weS1zZWxlY3QiKS5wcm9wKCJjaGVja2VkIikpIHsKICAgICAgICAgICAgICAgIHZhciB0ZXh0VG9EaXNwbGF5OwogICAgICAgICAgICAgICAgc3dpdGNoIChhcHBsaWNhdGlvbk5hbWUpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlICdTaW5nbGUgQ2FzZSBBbGVydCc6CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRUb0Rpc3BsYXkgPSAnQ2FzZSc7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgJ0FnZ3JlZ2F0ZSBDYXNlIEFsZXJ0JzoKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFRvRGlzcGxheSA9ICdQRUMnOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICdFVkRBUyBBbGVydCc6CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRUb0Rpc3BsYXkgPSAnUEVDJzsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTGl0ZXJhdHVyZSBTZWFyY2ggQWxlcnQnOgogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0VG9EaXNwbGF5ID0gJ0FydGljbGUnOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICQoY29tbWVudE1vZGFsKS5maW5kKCdkaXYuYnVsa09wdGlvbnNTZWN0aW9uJykuc2hvdygpOwogICAgICAgICAgICAgICAgJChjb21tZW50TW9kYWwpLmZpbmQoJ2Rpdi5idWxrT3B0aW9uc1NlY3Rpb24gc3Bhbi5hbGVydFR5cGVUZXh0JykuaHRtbCh0ZXh0VG9EaXNwbGF5KTsKICAgICAgICAgICAgICAgICQoY29tbWVudE1vZGFsKS5maW5kKCdkaXYuYnVsa09wdGlvbnNTZWN0aW9uIHNwYW4uY291bnQnKS5odG1sKHNlbGVjdGVkUm93Q291bnQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJChjb21tZW50TW9kYWwpLmZpbmQoJ2Rpdi5idWxrT3B0aW9uc1NlY3Rpb24nKS5oaWRlKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICQoJ2Rpdi5idWxrT3B0aW9uc1NlY3Rpb24gaW5wdXRbbmFtZT1idWxrT3B0aW9uc10nKS51bmJpbmQoKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgc3dpdGNoICgkKHRoaXMpLnZhbCgpKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYWxsU2VsZWN0ZWQnOgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlSnNvbkFycmF5ID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYXRlU2luZ2xlQnVsa1Jvd0NvbW1lbnRQcm9jZXNzKGNhc2VKc29uQXJyYXksIGNvbW1lbnRNb2RhbCwgYWxlcnRUeXBlLCBpc0Nhc2VEZXRhaWwsIGlzU2lnbmFsKTsKICAgICAgICAgICAgICAgICAgICAgICAgYmluZEFkZENvbW1lbnRzKGNvbW1lbnRNb2RhbCwgY2FzZUpzb25BcnJheSwgImJ1bGsiLCBhbGVydFR5cGUsIHZhbGlkYXRlZFNpZ25hbElkLCBpc0Nhc2VEZXRhaWwpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICdjdXJyZW50JzoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZUpzb25BcnJheSA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBpbml0aWF0ZVNpbmdsZVJvd0NvbW1lbnRQcm9jZXNzKCR0aGlzLCBjYXNlSnNvbkFycmF5LCBjb21tZW50TW9kYWwsIGFsZXJ0VHlwZSwgaXNDYXNlRGV0YWlsLCBpc1NpZ25hbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRBZGRDb21tZW50cyhjb21tZW50TW9kYWwsIGNhc2VKc29uQXJyYXksICJyb3ciLCBhbGVydFR5cGUsIHZhbGlkYXRlZFNpZ25hbElkLCBpc0Nhc2VEZXRhaWwpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoZGF0YUluZm8gPT09ICJyb3ciKSB7CiAgICAgICAgICAgICAgICBpbml0aWF0ZVNpbmdsZVJvd0NvbW1lbnRQcm9jZXNzKCR0aGlzLCBjYXNlSnNvbkFycmF5LCBjb21tZW50TW9kYWwsIGFsZXJ0VHlwZSwgaXNDYXNlRGV0YWlsLCBpc1NpZ25hbCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5tb2RhbCgnc2hvdycpOwogICAgICAgICAgICBiaW5kQWRkQ29tbWVudHMoY29tbWVudE1vZGFsLCBjYXNlSnNvbkFycmF5LCBkYXRhSW5mbywgYWxlcnRUeXBlLCB2YWxpZGF0ZWRTaWduYWxJZCwgaXNDYXNlRGV0YWlsLCAkdGhpcykKICAgICAgICB9KQogICAgfTsKCiAgICB2YXIgYmluZEFkZENvbW1lbnRzID0gZnVuY3Rpb24gKGNvbW1lbnRNb2RhbCwgY2FzZUpzb25BcnJheSwgZGF0YUluZm8sIGFsZXJ0VHlwZSwgdmFsaWRhdGVkU2lnbmFsSWQsIGlzQ2FzZURldGFpbCwgY3VycmVudFJvdykgewogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIuYWRkLWNvbW1lbnRzIikudW5iaW5kKCkuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgY2FzZUpzb247CiAgICAgICAgICAgIHZhciBjYXNlSnNvbk9iajsKICAgICAgICAgICAgdmFyIGRhdGE7CiAgICAgICAgICAgIHZhciB1cmw7CiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7CiAgICAgICAgICAgIHZhciBjYXNlSnNvbk9iakFycmF5ID0gW107CiAgICAgICAgICAgIGlmIChkYXRhSW5mbyA9PT0gInJvdyIpIHsKICAgICAgICAgICAgICAgIGNhc2VKc29uID0gY2FzZUpzb25BcnJheVswXTsKCiAgICAgICAgICAgICAgICBpZiAoY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50SWQiKS52YWwoKSkgewogICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJhbGVydFR5cGUiOiBhbGVydFR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb21tZW50IjogY29tbWVudE1vZGFsLmZpbmQoIiNjb21tZW50Ym94IikudmFsKCksCiAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6IGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudElkIikudmFsKCksCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWxpZGF0ZWRTaWduYWxJZCI6IHZhbGlkYXRlZFNpZ25hbElkLAogICAgICAgICAgICAgICAgICAgICAgICAidG9waWNJZCI6ICQoIiN0b3BpY0lkIikuaHRtbCgpLAogICAgICAgICAgICAgICAgICAgICAgICAiZXhlY3V0ZWRDb25maWdJZCI6IGNhc2VKc29uLmV4ZWN1dGVkQ29uZmlnSWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJhZGhvY0FsZXJ0SWQiOiBjYXNlSnNvbi5hZGhvY0FsZXJ0SWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb25maWdJZCI6IGNhc2VKc29uLmNvbmZpZ0lkLAogICAgICAgICAgICAgICAgICAgICAgICAibGl0ZXJhdHVyZUFsZXJ0SWQiOiBjYXNlSnNvbi5saXRlcmF0dXJlQWxlcnRJZAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5jb21tZW50PT0iIikgewogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAiL3NpZ25hbC9hbGVydENvbW1lbnQvZGVsZXRlQ29tbWVudCI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAiL3NpZ25hbC9hbGVydENvbW1lbnQvdXBkYXRlQ29tbWVudCI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB1cmwgPSAiL3NpZ25hbC9hbGVydENvbW1lbnQvc2F2ZUNvbW1lbnQiOwoKICAgICAgICAgICAgICAgICAgICBjYXNlSnNvbk9iaiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgImFsZXJ0VHlwZSI6IGFsZXJ0VHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgInByb2R1Y3ROYW1lIjogY2FzZUpzb24ucHJvZHVjdE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICJldmVudE5hbWUiOiBjYXNlSnNvbi5ldmVudE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICJwdCI6IGNhc2VKc29uLnB0LAogICAgICAgICAgICAgICAgICAgICAgICAiY29tbWVudHMiOiBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRib3giKS52YWwoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImNhc2VOdW1iZXIiOiBjYXNlSnNvbi5jYXNlTnVtYmVyLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvZHVjdEZhbWlseSI6IGNhc2VKc29uLnByb2R1Y3RGYW1pbHksCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWxpZGF0ZWRTaWduYWxJZCI6IHZhbGlkYXRlZFNpZ25hbElkLAogICAgICAgICAgICAgICAgICAgICAgICAidG9waWNJZCI6IGNvbW1lbnRNb2RhbC5maW5kKCIjdG9waWNJZCIpLmh0bWwoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImFzc2lnbmVkVG8iOiBjYXNlSnNvbi5hc3NpZ25lZFRvLAogICAgICAgICAgICAgICAgICAgICAgICAiYWRob2NBbGVydElkIjogY2FzZUpzb24uYWRob2NBbGVydElkLAogICAgICAgICAgICAgICAgICAgICAgICAiZXhlY3V0ZWRDb25maWdJZCI6IGNhc2VKc29uLmV4ZWN1dGVkQ29uZmlnSWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJwcm9kdWN0SWQiOiBjYXNlSnNvbi5wcm9kdWN0SWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJwdENvZGUiOiBjYXNlSnNvbi5wdENvZGUsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb25maWdJZCI6IGNhc2VKc29uLmNvbmZpZ0lkLAogICAgICAgICAgICAgICAgICAgICAgICAibGl0ZXJhdHVyZUFsZXJ0SWQiOiBjYXNlSnNvbi5saXRlcmF0dXJlQWxlcnRJZCwKICAgICAgICAgICAgICAgICAgICAgICAgImFydGljbGVJZCI6IGNhc2VKc29uLmFydGljbGVJZAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgY2FzZUpzb25PYmpBcnJheS5wdXNoKGNhc2VKc29uT2JqKTsKICAgICAgICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICBjYXNlSnNvbk9iakFycmF5OiBKU09OLnN0cmluZ2lmeShjYXNlSnNvbk9iakFycmF5KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHVybCA9ICIvc2lnbmFsL2FsZXJ0Q29tbWVudC9zYXZlQ29tbWVudCI7CiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRSb3dDb3VudDsKICAgICAgICAgICAgICAgIGlmICgkKCcjZGV0YWlsZWQtdmlldy1jaGVja2JveCcpLmlzKCc6Y2hlY2tlZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dDb3VudCA9ICQoJ3RhYmxlI2FsZXJ0c0RldGFpbHNUYWJsZSAuY29weS1zZWxlY3Q6Y2hlY2tlZCcpLmxlbmd0aDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dDb3VudCA9ICQoJ3RhYmxlLkRURkNfQ2xvbmVkIC5jb3B5LXNlbGVjdDpjaGVja2VkJykubGVuZ3RoOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHNlbGVjdGVkUm93Q291bnQ7IGluZGV4KyspIHsKICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZWRTaWduYWxJZCA9ICQoIiN2YWxpZGF0ZWRTaWduYWxJZCIpLmh0bWwoKTsKICAgICAgICAgICAgICAgICAgICBjYXNlSnNvbiA9IGNhc2VKc29uQXJyYXlbaW5kZXhdOwoKICAgICAgICAgICAgICAgICAgICAvL0Nhc2UgSlNPTi4KICAgICAgICAgICAgICAgICAgICBjYXNlSnNvbk9iaiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgImFsZXJ0VHlwZSI6IGFsZXJ0VHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgInByb2R1Y3ROYW1lIjogY2FzZUpzb24ucHJvZHVjdE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICJldmVudE5hbWUiOiBjYXNlSnNvbi5ldmVudE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICJwdCI6IGNhc2VKc29uLnB0LAogICAgICAgICAgICAgICAgICAgICAgICAiY29tbWVudHMiOiBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnRib3giKS52YWwoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImNhc2VOdW1iZXIiOiBjYXNlSnNvbi5jYXNlTnVtYmVyLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvZHVjdEZhbWlseSI6IGNhc2VKc29uLnByb2R1Y3RGYW1pbHksCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWxpZGF0ZWRTaWduYWxJZCI6IHZhbGlkYXRlZFNpZ25hbElkLAogICAgICAgICAgICAgICAgICAgICAgICAidG9waWNJZCI6IGNvbW1lbnRNb2RhbC5maW5kKCIjdG9waWNJZCIpLmh0bWwoKSwKICAgICAgICAgICAgICAgICAgICAgICAgImFzc2lnbmVkVG8iOiBjYXNlSnNvbi5hc3NpZ25lZFRvLAogICAgICAgICAgICAgICAgICAgICAgICAiYWRob2NBbGVydElkIjogY2FzZUpzb24uYWRob2NBbGVydElkLAogICAgICAgICAgICAgICAgICAgICAgICAicHJvZHVjdElkIjogY2FzZUpzb24ucHJvZHVjdElkLAogICAgICAgICAgICAgICAgICAgICAgICAicHRDb2RlIjogY2FzZUpzb24ucHRDb2RlLAogICAgICAgICAgICAgICAgICAgICAgICAiY29uZmlnSWQiOiBjYXNlSnNvbi5jb25maWdJZCwKICAgICAgICAgICAgICAgICAgICAgICAgImxpdGVyYXR1cmVBbGVydElkIjogY2FzZUpzb24ubGl0ZXJhdHVyZUFsZXJ0SWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcnRpY2xlSWQiOiBjYXNlSnNvbi5hcnRpY2xlSWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJleGVjdXRlZENvbmZpZ0lkIjogY2FzZUpzb24uZXhlY3V0ZWRDb25maWdJZAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgY2FzZUpzb25PYmpBcnJheS5wdXNoKGNhc2VKc29uT2JqKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICBjYXNlSnNvbk9iakFycmF5OiBKU09OLnN0cmluZ2lmeShjYXNlSnNvbk9iakFycmF5KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvL1NhdmUgY29tbWVudCBjYWxsCiAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsCiAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoImkuaXNQcm9jZXNzaW5nIikuc2hvdygpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiaS5pc1Byb2Nlc3NpbmciKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgLy9Qb3B1bGF0ZSB0aGUgY29tbWVudHMgYWdhaW4gaWYgc2luZ2xlIGNvbW1lbnQgaXMgYWRkZWQuCiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpc0Nhc2VEZXRhaWwgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YUluZm8gPT09ICJyb3ciKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbC5hbGVydENvbW1lbnRzLnBvcHVsYXRlX2NvbW1lbnRzKGNvbW1lbnRNb2RhbCwgY2FzZUpzb24pOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcjY29tbWVudGJveCcpLnZhbCgnJykuYmx1cigpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5jb21tZW50ICE9ICIiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29tbWVudEljb24oY3VycmVudFJvdykgOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ29tbWVudEljb24oY3VycmVudFJvdykgOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5tb2RhbCgiaGlkZSIpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ21vZGFsLW9wZW4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLm1vZGFsLWJhY2tkcm9wJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja2JveFNlbGVjdG9yOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCgnI2RldGFpbGVkLXZpZXctY2hlY2tib3gnKS5pcygnOmNoZWNrZWQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hTZWxlY3RvciA9ICd0YWJsZSNhbGVydHNEZXRhaWxzVGFibGUgLmNvcHktc2VsZWN0OmNoZWNrZWQnOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hTZWxlY3RvciA9ICd0YWJsZS5EVEZDX0Nsb25lZCAuY29weS1zZWxlY3Q6Y2hlY2tlZCc7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKCQoY2hlY2tib3hTZWxlY3RvciksIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb21tZW50SWNvbih0aGlzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICQuTm90aWZpY2F0aW9uLm5vdGlmeSgnc3VjY2VzcycsICd0b3AgcmlnaHQnLCAiU3VjY2VzcyIsICJDb21tZW50cyBhZGRlZCBzdWNjZXNzZnVsbHkuIiwge2F1dG9IaWRlRGVsYXk6IDEwMDAwfSk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSkKICAgIH07CgogICAgdmFyIGluaXRpYXRlU2luZ2xlUm93Q29tbWVudFByb2Nlc3MgPSBmdW5jdGlvbiAoJHRoaXMsIGNhc2VKc29uQXJyYXksIGNvbW1lbnRNb2RhbCwgYWxlcnRUeXBlLCBpc0Nhc2VEZXRhaWwsIGlzU2lnbmFsKSB7CiAgICAgICAgdmFyIGFkaG9jQWxlcnRJZDsKICAgICAgICB2YXIgbGl0ZXJhdHVyZUFsZXJ0SWQ7CiAgICAgICAgdmFyIGFydGljbGVJZDsKCiAgICAgICAgdmFyIHJvd09iamVjdCA9IHt9OwogICAgICAgIGlmICgoYWxlcnRUeXBlID09PSAnQWdncmVnYXRlIENhc2UgQWxlcnQnIHx8IGFsZXJ0VHlwZSA9PT0gJ1NpbmdsZSBDYXNlIEFsZXJ0JyB8fCBhbGVydFR5cGUgPT09ICdFVkRBUyBBbGVydCcgfHwgYWxlcnRUeXBlID09PSAnTGl0ZXJhdHVyZSBTZWFyY2ggQWxlcnQnKSAmJiAhaXNTaWduYWwpIHsKICAgICAgICAgICAgdmFyIHNlbGVjdGVkUm93SW5kZXggPSAkKCR0aGlzKS5jbG9zZXN0KCd0cicpLmluZGV4KCk7CiAgICAgICAgICAgIGlmIChpc0Fic3RyYWN0Vmlld09yQ2FzZVZpZXcoc2VsZWN0ZWRSb3dJbmRleCkpIHsKICAgICAgICAgICAgICAgIHNlbGVjdGVkUm93SW5kZXggPSBzZWxlY3RlZFJvd0luZGV4IC8gMgogICAgICAgICAgICB9CiAgICAgICAgICAgIHJvd09iamVjdCA9IHRhYmxlLnJvdyhzZWxlY3RlZFJvd0luZGV4KS5kYXRhKCk7CiAgICAgICAgfSBlbHNlIGlmIChhbGVydFR5cGUgPT09ICdBZ2dyZWdhdGUgQ2FzZSBBbGVydCcpIHsKICAgICAgICAgICAgcm93T2JqZWN0ID0gdGFibGVBZ2dSZXZpZXcucm93KCQoJHRoaXMpLnBhcmVudHMoJ3RyJykpLmRhdGEoKTsKICAgICAgICB9IGVsc2UgaWYgKGFsZXJ0VHlwZSA9PT0gJ0xpdGVyYXR1cmUgU2VhcmNoIEFsZXJ0JykgewogICAgICAgICAgICByb3dPYmplY3QgPSB0YWJsZUxpdGVyYXR1cmVSZXZpZXcucm93KCQoJHRoaXMpLnBhcmVudHMoJ3RyJykpLmRhdGEoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByb3dPYmplY3QgPSB0YWJsZVNpbmdsZVJldmlldy5yb3coJCgkdGhpcykucGFyZW50cygndHInKSkuZGF0YSgpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGNhc2VOdW1iZXIgPSByb3dPYmplY3QuY2FzZU51bWJlcjsKICAgICAgICB2YXIgcHJvZHVjdEZhbWlseSA9IHJvd09iamVjdC5wcm9kdWN0RmFtaWx5OwogICAgICAgIHZhciBjYXNlVmVyc2lvbiA9IHJvd09iamVjdC5jYXNlVmVyc2lvbjsKICAgICAgICB2YXIgcHJvZHVjdE5hbWUgPSByb3dPYmplY3QucHJvZHVjdE5hbWU7CiAgICAgICAgdmFyIGV2ZW50TmFtZSA9IHJvd09iamVjdC5wcmVmZXJyZWRUZXJtOwogICAgICAgIHZhciBwdCA9IHJvd09iamVjdC5wdDsKICAgICAgICB2YXIgYXNzaWduZWRUbyA9IHJvd09iamVjdC5hc3NpZ25lZFRvLmlkOwogICAgICAgIHZhciBhc3NpZ25lZFRvVXNlciA9IG51bGw7CiAgICAgICAgIGlmKHJvd09iamVjdC5hc3NpZ25lZFRvVXNlciAhPSB1bmRlZmluZWQpCiAgICAgICAgICAgICBhc3NpZ25lZFRvVXNlciA9IHJvd09iamVjdC5hc3NpZ25lZFRvVXNlci5pZDsKICAgICAgICB2YXIgcHJvZHVjdElkID0gcm93T2JqZWN0LnByb2R1Y3RJZDsKICAgICAgICB2YXIgcHRDb2RlID0gcm93T2JqZWN0LnB0Q29kZTsKICAgICAgICB2YXIgY29uZmlnSWQgPSByb3dPYmplY3QuYWxlcnRDb25maWdJZDsKICAgICAgICB2YXIgZXhlY3V0ZWRDb25maWdJZCA9IHJvd09iamVjdC5leGVjQ29uZmlnSWQ7CgogICAgICAgIGlmIChhbGVydFR5cGUgPT09IHNpZ25hbEFsZXJ0VHlwZS5BREhPQ19BTEVSVCkgewogICAgICAgICAgICBhZGhvY0FsZXJ0SWQgPSByb3dPYmplY3QuaWQ7CiAgICAgICAgfSBlbHNlIGlmIChhbGVydFR5cGUgPT09IHNpZ25hbEFsZXJ0VHlwZS5MSVRFUkFUVVJFX1NFQVJDSF9BTEVSVCkgewogICAgICAgICAgICBsaXRlcmF0dXJlQWxlcnRJZCA9IHJvd09iamVjdC5pZDsKICAgICAgICAgICAgYXJ0aWNsZUlkID0gcm93T2JqZWN0LmFydGljbGVJZAogICAgICAgIH0KICAgICAgICB2YXIgY2FzZUpzb24gPSB7CiAgICAgICAgICAgICJhbGVydFR5cGUiOiBhbGVydFR5cGUsCiAgICAgICAgICAgICJwcm9kdWN0RmFtaWx5IjogcHJvZHVjdEZhbWlseSwKICAgICAgICAgICAgImNhc2VOdW1iZXIiOiBjYXNlTnVtYmVyLAogICAgICAgICAgICAicHJvZHVjdE5hbWUiOiBwcm9kdWN0TmFtZSwKICAgICAgICAgICAgImV2ZW50TmFtZSI6IGV2ZW50TmFtZSwKICAgICAgICAgICAgInB0IjogcHQsCiAgICAgICAgICAgICJwdENvZGUiOiBwdENvZGUsCiAgICAgICAgICAgICJwcm9kdWN0SWQiOiBwcm9kdWN0SWQsCiAgICAgICAgICAgICJhc3NpZ25lZFRvIjogYXNzaWduZWRUbyA/IGFzc2lnbmVkVG8gOiBhc3NpZ25lZFRvVXNlciwKICAgICAgICAgICAgImV4ZWN1dGVkQ29uZmlnSWQiOiBleGVjdXRlZENvbmZpZ0lkLAogICAgICAgICAgICAiY29uZmlnSWQiOiBjb25maWdJZCwKICAgICAgICAgICAgImFkaG9jQWxlcnRJZCI6IGFkaG9jQWxlcnRJZCwKICAgICAgICAgICAgImxpdGVyYXR1cmVBbGVydElkIjogbGl0ZXJhdHVyZUFsZXJ0SWQsCiAgICAgICAgICAgICJhcnRpY2xlSWQiOiBhcnRpY2xlSWQKICAgICAgICB9OwoKICAgICAgICBjYXNlSnNvbkFycmF5LnB1c2goY2FzZUpzb24pOwogICAgICAgIHZhciBjb21tZW50TWV0YUluZm8gPSAiIjsKCiAgICAgICAgaWYgKGNhc2VKc29uLmFsZXJ0VHlwZSA9PT0gc2lnbmFsQWxlcnRUeXBlLkFHR1JFR0FURV9BTEVSVCB8fCBjYXNlSnNvbi5hbGVydFR5cGUgPT09IHNpZ25hbEFsZXJ0VHlwZS5FVkRBU19BTEVSVCkgewogICAgICAgICAgICBpZiAodHlwZW9mIChjYXNlSnNvbi5ldmVudE5hbWUpID09PSAidW5kZWZpbmVkIiB8fCB0eXBlb2YgKGNhc2VKc29uLnByb2R1Y3ROYW1lKSA9PT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgIGNvbW1lbnRNZXRhSW5mbyA9ICIiCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb21tZW50TWV0YUluZm8gPSAnPHNwYW4gaWQ9InByb2R1Y3ROYW1lIj4nICsgY2FzZUpzb24ucHJvZHVjdE5hbWUgKyAnPC9zcGFuPiAtIDxzcGFuIGlkPSJldmVudE5hbWUiPicgKyBjYXNlSnNvbi5ldmVudE5hbWUgKyAnPC9zcGFuPicgKyAnPHNwYW4gY2xhc3M9ImhpZGRlbiIgaWQ9InByb2R1Y3RJZCI+JyArIGNhc2VKc29uLnByb2R1Y3RJZCArICc8L3NwYW4+JyArCiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPSJoaWRkZW4iIGlkPSJwdENvZGUiPicgKyBjYXNlSnNvbi5wdENvZGUgKyAnPC9zcGFuPicKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgKGNhc2VKc29uLmNhc2VOdW1iZXIpID09PSAidW5kZWZpbmVkIiB8fCB0eXBlb2YgKGNhc2VKc29uLnByb2R1Y3RGYW1pbHkpID09PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgICAgY29tbWVudE1ldGFJbmZvID0gIiIKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbW1lbnRNZXRhSW5mbyA9ICc8c3BhbiBpZD0iY2FzZU51bWJlciI+JyArIGNhc2VKc29uLmNhc2VOdW1iZXIgKyAnPC9zcGFuPiAtIDxzcGFuIGlkPSJwcm9kdWN0RmFtaWx5Ij4nICsgY2FzZUpzb24ucHJvZHVjdEZhbWlseSArICc8L3NwYW4+JwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudC1tZXRhLWluZm8iKS5odG1sKGNvbW1lbnRNZXRhSW5mbyk7CiAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIiNhc3NpZ25lZFRvIikuaHRtbChhc3NpZ25lZFRvKTsKICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbmZpZ0lkIikuaHRtbChjb25maWdJZCk7CiAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIiNhcHBsaWNhdGlvbiIpLmh0bWwoY2FzZUpzb24uYWxlcnRUeXBlKTsKCiAgICAgICAgLy9Qb3B1bGF0ZSB0aGUgZXhpc3RpbmcgY29tbWVudHMgYW5kIGJpbmQgZXZlbnRzIHRvIHRoZW0gaW4gY2FzZSBvZiBzaW5nbGUgY29tbWVudC4KICAgICAgICBpZiAodHlwZW9mIGlzQ2FzZURldGFpbCAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgJCgnI2xvYWRpbmdDb21tZW50cycpLmh0bWwoJycpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2lnbmFsLmFsZXJ0Q29tbWVudHMucG9wdWxhdGVfY29tbWVudHMoY29tbWVudE1vZGFsLCBjYXNlSnNvbik7CiAgICAgICAgfQogICAgICAgICQoIiNjb21tZW50TW9kYWwiKS5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAkKCcjY29tbWVudGJveCcpLnZhbCgnJyk7CiAgICAgICAgICAgICQoJy5hZGQtY29tbWVudHMnKS5odG1sKCdBZGQnKTsKICAgICAgICAgICAgJCgiLmNyZWF0ZWRCeSIpLnRleHQoJycpOwogICAgICAgIH0pCiAgICB9OwoKICAgIHZhciBpbml0aWF0ZVNpbmdsZUJ1bGtSb3dDb21tZW50UHJvY2VzcyA9IGZ1bmN0aW9uIChjYXNlSnNvbkFycmF5LCBjb21tZW50TW9kYWwsIGFsZXJ0VHlwZSwgaXNDYXNlRGV0YWlsLCBpc1NpZ25hbCkgewogICAgICAgIHZhciBpbmRleFNldCA9IG5ldyBTZXQoKTsKICAgICAgICB2YXIgY2hlY2tib3hTZWxlY3RvcjsKICAgICAgICBpZiAoJCgnI2RldGFpbGVkLXZpZXctY2hlY2tib3gnKS5pcygnOmNoZWNrZWQnKSkgewogICAgICAgICAgICBjaGVja2JveFNlbGVjdG9yID0gJ3RhYmxlI2FsZXJ0c0RldGFpbHNUYWJsZSAuY29weS1zZWxlY3Q6Y2hlY2tlZCc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2hlY2tib3hTZWxlY3RvciA9ICd0YWJsZS5EVEZDX0Nsb25lZCAuY29weS1zZWxlY3Q6Y2hlY2tlZCc7CiAgICAgICAgfQogICAgICAgICQuZWFjaCgkKGNoZWNrYm94U2VsZWN0b3IpLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBzZWxlY3RlZFJvd0luZGV4ID0gJCh0aGlzKS5jbG9zZXN0KCd0cicpLmluZGV4KCk7CiAgICAgICAgICAgIGlmIChpc0Fic3RyYWN0Vmlld09yQ2FzZVZpZXcoc2VsZWN0ZWRSb3dJbmRleCkpCiAgICAgICAgICAgICAgICBzZWxlY3RlZFJvd0luZGV4ID0gc2VsZWN0ZWRSb3dJbmRleCAvIDI7CiAgICAgICAgICAgIGluZGV4U2V0LmFkZCgoc2VsZWN0ZWRSb3dJbmRleCkpOwogICAgICAgIH0pOwogICAgICAgIGluZGV4U2V0LmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7CiAgICAgICAgICAgIHZhciBhZGhvY0FsZXJ0SWQ7CiAgICAgICAgICAgIHZhciBsaXRlcmF0dXJlQWxlcnRJZDsKICAgICAgICAgICAgdmFyIGFydGljbGVJZDsKICAgICAgICAgICAgdmFyIHJvd09iamVjdCA9IHt9OwogICAgICAgICAgICBpZiAoKGFsZXJ0VHlwZSA9PT0gJ0FnZ3JlZ2F0ZSBDYXNlIEFsZXJ0JyB8fCBhbGVydFR5cGUgPT09ICdTaW5nbGUgQ2FzZSBBbGVydCcgfHwgYWxlcnRUeXBlID09PSAnRVZEQVMgQWxlcnQnIHx8IGFsZXJ0VHlwZSA9PT0gJ0xpdGVyYXR1cmUgU2VhcmNoIEFsZXJ0JykgJiYgIWlzU2lnbmFsKSB7CiAgICAgICAgICAgICAgICByb3dPYmplY3QgPSB0YWJsZS5yb3dzKGluZGV4KS5kYXRhKClbMF07CiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxlcnRUeXBlID09PSAnQWdncmVnYXRlIENhc2UgQWxlcnQnKSB7CiAgICAgICAgICAgICAgICByb3dPYmplY3QgPSB0YWJsZUFnZ1Jldmlldy5yb3dzKGluZGV4KS5kYXRhKClbMF07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByb3dPYmplY3QgPSB0YWJsZVNpbmdsZVJldmlldy5yb3dzKGluZGV4KS5kYXRhKClbMF07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBjYXNlTnVtYmVyID0gcm93T2JqZWN0LmNhc2VOdW1iZXI7CiAgICAgICAgICAgIHZhciBwcm9kdWN0RmFtaWx5ID0gcm93T2JqZWN0LnByb2R1Y3RGYW1pbHk7CiAgICAgICAgICAgIHZhciBjYXNlVmVyc2lvbiA9IHJvd09iamVjdC5jYXNlVmVyc2lvbjsKICAgICAgICAgICAgdmFyIHByb2R1Y3ROYW1lID0gcm93T2JqZWN0LnByb2R1Y3ROYW1lOwogICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gcm93T2JqZWN0LnByZWZlcnJlZFRlcm07CiAgICAgICAgICAgIHZhciBwdCA9IHJvd09iamVjdC5wdDsKICAgICAgICAgICAgdmFyIGFzc2lnbmVkVG8gPSByb3dPYmplY3QuYXNzaWduZWRUby5pZDsKICAgICAgICAgICAgdmFyIHByb2R1Y3RJZCA9IHJvd09iamVjdC5wcm9kdWN0SWQ7CiAgICAgICAgICAgIHZhciBwdENvZGUgPSByb3dPYmplY3QucHRDb2RlOwogICAgICAgICAgICB2YXIgY29uZmlnSWQgPSByb3dPYmplY3QuYWxlcnRDb25maWdJZDsKICAgICAgICAgICAgdmFyIGV4ZWN1dGVkQ29uZmlnSWQgPSByb3dPYmplY3QuZXhlY0NvbmZpZ0lkOwoKICAgICAgICAgICAgaWYgKGFsZXJ0VHlwZSA9PT0gc2lnbmFsQWxlcnRUeXBlLkFESE9DX0FMRVJUKSB7CiAgICAgICAgICAgICAgICBhZGhvY0FsZXJ0SWQgPSByb3dPYmplY3QuaWQ7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxlcnRUeXBlID09PSBzaWduYWxBbGVydFR5cGUuTElURVJBVFVSRV9TRUFSQ0hfQUxFUlQpIHsKICAgICAgICAgICAgICAgIGxpdGVyYXR1cmVBbGVydElkID0gcm93T2JqZWN0LmlkOwogICAgICAgICAgICAgICAgYXJ0aWNsZUlkID0gcm93T2JqZWN0LmFydGljbGVJZAogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBjYXNlSnNvbiA9IHsKICAgICAgICAgICAgICAgICJhbGVydFR5cGUiOiBhbGVydFR5cGUsCiAgICAgICAgICAgICAgICAicHJvZHVjdEZhbWlseSI6IHByb2R1Y3RGYW1pbHksCiAgICAgICAgICAgICAgICAiY2FzZU51bWJlciI6IGNhc2VOdW1iZXIsCiAgICAgICAgICAgICAgICAicHJvZHVjdE5hbWUiOiBwcm9kdWN0TmFtZSwKICAgICAgICAgICAgICAgICJldmVudE5hbWUiOiBldmVudE5hbWUsCiAgICAgICAgICAgICAgICAicHQiOiBwdCwKICAgICAgICAgICAgICAgICJwdENvZGUiOiBwdENvZGUsCiAgICAgICAgICAgICAgICAicHJvZHVjdElkIjogcHJvZHVjdElkLAogICAgICAgICAgICAgICAgImFzc2lnbmVkVG8iOiBhc3NpZ25lZFRvLAogICAgICAgICAgICAgICAgImV4ZWN1dGVkQ29uZmlnSWQiOiBleGVjdXRlZENvbmZpZ0lkLAogICAgICAgICAgICAgICAgImNvbmZpZ0lkIjogY29uZmlnSWQsCiAgICAgICAgICAgICAgICAiYWRob2NBbGVydElkIjogYWRob2NBbGVydElkLAogICAgICAgICAgICAgICAgImxpdGVyYXR1cmVBbGVydElkIjogbGl0ZXJhdHVyZUFsZXJ0SWQsCiAgICAgICAgICAgICAgICAiYXJ0aWNsZUlkIjogYXJ0aWNsZUlkCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNhc2VKc29uQXJyYXkucHVzaChjYXNlSnNvbikKICAgICAgICB9KTsKCiAgICAgICAgLy9TZXQgdmFsdWVzIHRvIHRoZSBtb2RhbCBlbGVtZW50cy4KICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2xvYWRpbmdDb21tZW50cyIpLmhpZGUoKTsKICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiI2NvbW1lbnQtbWV0YS1pbmZvIikuaHRtbCgiIik7CiAgICAgICAgY29tbWVudE1vZGFsLmZpbmQoIi5wcmV2aW91cy1jb21tZW50cyIpLmh0bWwoIiIpOwogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCIjY29tbWVudElkIikudmFsKCcnKTsKICAgICAgICBjb21tZW50TW9kYWwuZmluZCgiLmNyZWF0ZWRCeSIpLnRleHQoJycpOwogICAgICAgIGlmIChjb21tZW50TW9kYWwuZmluZCgnLmFkZC1jb21tZW50cycpLmh0bWwoKSAhPSAnVXBkYXRlJykgewogICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnLmFkZC1jb21tZW50cycpLmh0bWwoIkFkZCIpOwogICAgICAgIH0KICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnLmFkZC1jb21tZW50cycpLnByb3AoImRpc2FibGVkIiwgZmFsc2UpOwogICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcjY29tbWVudGJveCcpLm9uKCJrZXl1cCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKGNvbW1lbnRNb2RhbC5maW5kKCcjY29tbWVudGJveCcpLnZhbCgpLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIGNvbW1lbnRNb2RhbC5maW5kKCcuYWRkLWNvbW1lbnRzJykucHJvcCgiZGlzYWJsZWQiLCBmYWxzZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb21tZW50TW9kYWwuZmluZCgnLmFkZC1jb21tZW50cycpLnByb3AoImRpc2FibGVkIiwgdHJ1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIHJlc3RhcnRSZXZpZXcgPSBmdW5jdGlvbiAoY2FzZVJldmlld1ByZXZpb3VzVXJsKSB7CgogICAgICAgIC8vRXZlbnQgd2hlbiByZXZpZXcgcmVzdGFydCBpcyBjbGlja2VkLgogICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuY2FzZS1yZXN0YXJ0LXJldmlldycsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB2YXIgcGFyZW50X3JvdyA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCd0cicpOwogICAgICAgICAgICB2YXIgY2FzZU51bWJlciA9IHBhcmVudF9yb3cuZmluZCgnc3BhbltkYXRhLWZpZWxkPSJjYXNlTnVtYmVyIl0nKS5hdHRyKCJkYXRhLWlkIik7CiAgICAgICAgICAgIHZhciBmb2xsb3dVcE51bWJlciA9IHBhcmVudF9yb3cuZmluZCgnc3BhbltkYXRhLWZpZWxkPSJmb2xsb3dVcE51bWJlciJdJykuYXR0cigiZGF0YS1pZCIpOwogICAgICAgICAgICB2YXIgY2FzZVZlcnNpb24gPSBwYXJlbnRfcm93LmZpbmQoJ3NwYW5bZGF0YS1maWVsZD0iY2FzZVZlcnNpb24iXScpLmF0dHIoImRhdGEtaWQiKTsKICAgICAgICAgICAgdmFyIHByb2R1Y3RGYW1pbHkgPSBwYXJlbnRfcm93LmZpbmQoJ2lucHV0W2RhdGEtZmllbGQ9InByb2R1Y3RGYW1pbHkiXScpLmF0dHIoImRhdGEtaWQiKTsKICAgICAgICAgICAgdmFyIGZvbGxvd1VwTW9kYWwgPSAkKCcjZm9sbG93VXBNb2RhbCcpOwogICAgICAgICAgICBmb2xsb3dVcE1vZGFsLm1vZGFsKCdzaG93Jyk7CiAgICAgICAgICAgIGZvbGxvd1VwTW9kYWwuZmluZCgiLnByZXZpb3VzLWZvbGxvd1VwIikudW5iaW5kKCkuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGdldFByZXZpb3VzU3RhdGUgPSBjYXNlUmV2aWV3UHJldmlvdXNVcmwgKyAiP2Nhc2VOdW1iZXI9IiArIGNhc2VOdW1iZXIgKwogICAgICAgICAgICAgICAgICAgICImY2FzZVZlcnNpb249IiArIGNhc2VWZXJzaW9uICsgIiZwcm9kdWN0RmFtaWx5PSIgKyBwcm9kdWN0RmFtaWx5ICsgIiZmb2xsb3dVcE51bWJlcj0iICsgZm9sbG93VXBOdW1iZXI7CiAgICAgICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgICAgIHVybDogZ2V0UHJldmlvdXNTdGF0ZSwKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudF9yb3cuZmluZCgnc3BhbltkYXRhLWZpZWxkPSJ3b3JrZmxvd1N0YXRlIl0nKS50ZXh0KHJlc3VsdC5wcmV2aW91c1N0YXRlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50X3Jvdy5maW5kKCdzcGFuW2RhdGEtZmllbGQ9ImRpc3Bvc2l0aW9uIl0nKS50ZXh0KHJlc3VsdC5wcmV2aW91c0Rpc3Bvc2l0aW9uKTsKICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50X3Jvdy5maW5kKCdzcGFuW2RhdGEtZmllbGQ9ImluZm8tc2lnbiJdJykuYWRkQ2xhc3MoImhpZGRlbiIpOwogICAgICAgICAgICAgICAgICAgICAgICBmb2xsb3dVcE1vZGFsLm1vZGFsKCdkZXN0cm95Jyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSkKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIG9wZW5TaW1pbGFyQ2FzZXNNb2RhbCA9IGZ1bmN0aW9uIChjYXNlSW5mb1VybCkgewoKICAgICAgICAvL0V2ZW50IHRyaWdnZXJlZCB3aGVuIHNpbWlsYXIgY2FzZXMgY291bnQgaXMgY2xpY2tlZC4KICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLnNpbWlsYXItY2FzZXMnLCBmdW5jdGlvbiAoZXZlbnQpIHsKCiAgICAgICAgICAgIHZhciBzaW1pbGFyQ2FzZU1vZGFsID0gJCgnI3NpbWlsYXJDYXNlTW9kYWwnKTsKICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgIHZhciBwYXJlbnRfcm93ID0gJChldmVudC50YXJnZXQpLmNsb3Nlc3QoInRyIik7CgogICAgICAgICAgICAvL0ZldGNoIHRoZSB2YWx1ZXMgb2YgdGhlIGV2ZW50LgogICAgICAgICAgICB2YXIgZXZlbnRWYWwgPSAkKGV2ZW50LnRhcmdldCkuYXR0cignZGF0YS1ldmVudC12YWwnKTsKICAgICAgICAgICAgdmFyIGV2ZW50VHlwZSA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKCdkYXRhLWZpZWxkJyk7CiAgICAgICAgICAgIHZhciBleGVjdXRlZENvbmZpZ0lkID0gJChldmVudC50YXJnZXQpLmF0dHIoImRhdGEtaWQiKTsKICAgICAgICAgICAgdmFyIHB0ID0gJChldmVudC50YXJnZXQpLmF0dHIoImRhdGEtcHQiKTsKICAgICAgICAgICAgdmFyIGV2ZW50Q29kZTsKICAgICAgICAgICAgaWYgKGV2ZW50VHlwZSkgewogICAgICAgICAgICAgICAgZXZlbnRDb2RlID0gKGV2ZW50VHlwZS5zcGxpdCgiX2NvZGUiKVswXSk7CiAgICAgICAgICAgICAgICBldmVudFR5cGUgPSBldmVudFR5cGUuc3BsaXQoIl8iKVsyXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGNhc2VOdW1iZXIgPSBwYXJlbnRfcm93LmZpbmQoJ3NwYW5bZGF0YS1maWVsZD0iY2FzZU51bWJlciJdJykuYXR0cigiZGF0YS1pZCIpOwogICAgICAgICAgICB2YXIgY2FzZVZlcnNpb24gPSBwYXJlbnRfcm93LmZpbmQoJ3NwYW5bZGF0YS1maWVsZD0iY2FzZVZlcnNpb24iXScpLmF0dHIoImRhdGEtaWQiKTsKCiAgICAgICAgICAgIC8vU2hvdyBtb2RhbCBhbmQgc2V0IGl0cyB2YWx1ZXMuCiAgICAgICAgICAgIHNpbWlsYXJDYXNlTW9kYWwubW9kYWwoJ3Nob3cnKTsKICAgICAgICAgICAgc2ltaWxhckNhc2VNb2RhbC5maW5kKCIjZXZlbnRUeXBlIikuaHRtbChldmVudFR5cGUpOwogICAgICAgICAgICBzaW1pbGFyQ2FzZU1vZGFsLmZpbmQoIiNldmVudFZhbCIpLmh0bWwoZXZlbnRWYWwpOwogICAgICAgICAgICBzaW1pbGFyQ2FzZU1vZGFsLmZpbmQoIiNjYXNlTnVtYmVySW5mbyIpLnZhbChjYXNlTnVtYmVyKTsKICAgICAgICAgICAgc2ltaWxhckNhc2VNb2RhbC5maW5kKCIjZXhlY3V0ZWRDb25maWdJZCIpLnZhbChleGVjdXRlZENvbmZpZ0lkKTsKICAgICAgICAgICAgc2ltaWxhckNhc2VNb2RhbC5maW5kKCIjY2FzZUN1cnJlbnRWZXJzaW9uIikudmFsKGNhc2VWZXJzaW9uKTsKICAgICAgICAgICAgc2ltaWxhckNhc2VNb2RhbC5maW5kKCIjZXZlbnRDb2RlIikudmFsKGV2ZW50Q29kZSk7CiAgICAgICAgICAgIHNpbWlsYXJDYXNlTW9kYWwuZmluZCgiI2V2ZW50Q29kZVZhbCIpLnZhbChldmVudFZhbCk7CiAgICAgICAgICAgIC8vTWFrZSB0aGUgbW9kYWwgdGFibGUgYXMgZGF0YXRhYmxlCgogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHNpZ25hbC5zaW1pbGFyQ2FzZVRhYmxlLmluaXRfc2ltaWxhcl9jYXNlX3RhYmxlKGNhc2VJbmZvVXJsKQogICAgICAgICAgICB9LCAxMDApOwogICAgICAgIH0pOwogICAgfTsKCiAgICB2YXIgb3BlbkF0dGFjaG1lbnRNb2RhbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLnNob3ctYXR0YWNobWVudC1pY29uJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7CiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIHZhciBwYXJlbnRfcm93ID0gJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJ3RyJyk7CiAgICAgICAgICAgIHZhciBhbGVydElkID0gcGFyZW50X3Jvdy5maW5kKCdhW2RhdGEtZmllbGQ9ImF0dGFjaG1lbnQiXScpLmF0dHIoImRhdGEtaWQiKTsKICAgICAgICAgICAgdmFyIGNhc2VDb250cm9sbGVyID0gcGFyZW50X3Jvdy5maW5kKCdhW2RhdGEtZmllbGQ9ImF0dGFjaG1lbnQiXScpLmF0dHIoImRhdGEtY29udHJvbGxlciIpOwogICAgICAgICAgICB2YXIgdXJsID0gIi9zaWduYWwvIiArIGNhc2VDb250cm9sbGVyICsgIi91cGxvYWQiOwogICAgICAgICAgICB2YXIgZ2V0QXR0YWNobWVudFVybCA9ICIvc2lnbmFsLyIgKyBjYXNlQ29udHJvbGxlciArICIvZmV0Y2hBdHRhY2htZW50P2FsZXJ0SWQ9IiArIGFsZXJ0SWQ7CiAgICAgICAgICAgICQoJyNzaG93QXR0YWNobWVudE1vZGFsICNhdHRhY2htZW50Rm9ybSAjYXR0YWNobWVudEZvcm1JZCcpLmF0dHIoJ3ZhbHVlJywgYWxlcnRJZCk7CiAgICAgICAgICAgIHZhciBjYXNlSGlzdG9yeU1vZGFsID0gJCgnI3Nob3dBdHRhY2htZW50TW9kYWwnKTsKICAgICAgICAgICAgY2FzZUhpc3RvcnlNb2RhbC5tb2RhbCgnc2hvdycpOwogICAgICAgICAgICAkKCIjc2hvd0F0dGFjaG1lbnRNb2RhbCBmb3JtI2F0dGFjaG1lbnRGb3JtIikudW5iaW5kKCdzdWJtaXQnKS5vbignc3VibWl0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHRoaXMpOwogICAgICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTsKICAgICAgICAgICAgICAgIGlmICgkdGhpcy5maW5kKCcuYXR0YWNobWVudC1maWxlJykudmFsKCkpIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy5maW5kKCIudXBsb2FkIikuYXR0cigiZGlzYWJsZWQiLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSwKICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5maW5kKCcuYXR0YWNobWVudC1maWxlJykudmFsKCcnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dBdHRhY2htZW50SWNvbihwYXJlbnRfcm93KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNzaG93QXR0YWNobWVudE1vZGFsICNhdHRhY2htZW50LXRhYmxlJykuRGF0YVRhYmxlKCkuYWpheC5yZWxvYWQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmZpbmQoIi51cGxvYWQiKS5hdHRyKCJkaXNhYmxlZCIsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgJCgnI3Nob3dBdHRhY2htZW50TW9kYWwgI2F0dGFjaG1lbnQtdGFibGUnKS5EYXRhVGFibGUoewogICAgICAgICAgICAgICAgZGVzdHJveTogdHJ1ZSwKICAgICAgICAgICAgICAgIHNlYXJjaGluZzogZmFsc2UsCiAgICAgICAgICAgICAgICBzUGFnaW5hdGlvblR5cGU6ICJib290c3RyYXAiLAogICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogZmFsc2UsCiAgICAgICAgICAgICAgICBsYW5ndWFnZTogewogICAgICAgICAgICAgICAgICAgICJ1cmwiOiAiLi4vYXNzZXRzL2kxOG4vZGF0YVRhYmxlc18iICsgdXNlckxvY2FsZSArICIuanNvbiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiYWpheCI6IHsKICAgICAgICAgICAgICAgICAgICAidXJsIjogZ2V0QXR0YWNobWVudFVybCwKICAgICAgICAgICAgICAgICAgICAiZGF0YVNyYyI6ICIiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZm5EcmF3Q2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkKCcucmVtb3ZlLWF0dGFjaG1lbnQnKS5jbGljayhmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0YWNobWVudFJvdyA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJ3RyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRhY2htZW50SWQgPSBhdHRhY2htZW50Um93LmZpbmQoJ3NwYW5bZGF0YS1maWVsZD0icmVtb3ZlQXR0YWNobWVudCJdJykuYXR0cigiZGF0YS1hdHRhY2htZW50SWQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbW92ZVVybCA9ICcvc2lnbmFsLycgKyBjYXNlQ29udHJvbGxlciArICcvZGVsZXRlQXR0YWNobWVudD9hdHRhY2htZW50SWQ9JyArIGF0dGFjaG1lbnRJZDsKICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcmVtb3ZlVXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge2FsZXJ0SWQ6IGFsZXJ0SWR9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCQoJy5yZW1vdmUtYXR0YWNobWVudCcpLmxlbmd0aCA9PT0xICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVBdHRhY2htZW50SWNvbigkdGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3Nob3dBdHRhY2htZW50TW9kYWwgI2F0dGFjaG1lbnQtdGFibGUnKS5EYXRhVGFibGUoKS5hamF4LnJlbG9hZCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5Ob3RpZmljYXRpb24ubm90aWZ5KCdlcnJvcicsICd0b3AgcmlnaHQnLCAiRXJyb3IiLCAiQWxsIHNlbGVjdGVkIHNhZmV0eSBvYnNlcnZhdGlvbnMgbXVzdCBiZSBpbiBzYW1lIGRpc3Bvc2l0aW9uIGZvciBwZXJmb3JtaW5nIHRoZSBidWxrIHVwZGF0ZS4iLCB7YXV0b0hpZGVEZWxheTogMTAwMDB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJhb0NvbHVtbnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAibmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8YSBocmVmPSIvc2lnbmFsL2F0dGFjaG1lbnRhYmxlL2Rvd25sb2FkP2lkPScgKyByb3cuaWQgKyAnIj4nICsgZXNjYXBlSFRNTChyb3cubmFtZSkgKyAnPC9hPicKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm1EYXRhIjogImRlc2NyaXB0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgImNsYXNzTmFtZSI6ICdjZWxsLWJyZWFrJywKICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJ0aW1lU3RhbXAiCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICAibURhdGEiOiAibW9kaWZpZWRCeSIKICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJtRGF0YSI6ICJpZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJtUmVuZGVyIjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHJvdykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8c3BhbiB0YWJpbmRleD0iMCIgdGl0bGU9IlJlbW92ZSBBdHRhY2htZW50IiAgc3R5bGU9ImN1cnNvcjogcG9pbnRlciIgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIHJlbW92ZS1hdHRhY2htZW50IiBkYXRhLWZpZWxkPSJyZW1vdmVBdHRhY2htZW50IiBkYXRhLWF0dGFjaG1lbnRJZD0nICsgcm93LmlkICsgJz48L3NwYW4+JwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICJiTGVuZ3RoQ2hhbmdlIjogZmFsc2UsCiAgICAgICAgICAgICAgICBjb2x1bW5EZWZzOiBbewogICAgICAgICAgICAgICAgICAgICJ0YXJnZXRzIjogJ19hbGwnLAogICAgICAgICAgICAgICAgICAgICJyZW5kZXIiOiAkLmZuLmRhdGFUYWJsZS5yZW5kZXIudGV4dCgpCiAgICAgICAgICAgICAgICB9XQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIGJpbmRHcmlkRHluYW1pY0ZpbHRlcnMgPSBmdW5jdGlvbiAoZmlsdGVyc0RhdGEsIHByZWZpeCwgaWQpIHsKICAgICAgICAvL0FkZCBmaWx0ZXJzIHRvIHRoZSBkYXRhIHRhYmxlLgogICAgICAgIHZhciBkYXRhVGFibGVzX2xlbmd0aCA9ICQoJy5kYXRhVGFibGVzX2xlbmd0aCcpOwogICAgICAgIGRhdGFUYWJsZXNfbGVuZ3RoLmFkZENsYXNzKCdjb2wtc20tMTInKTsKICAgICAgICBkYXRhVGFibGVzX2xlbmd0aC5wYXJlbnQoKS5yZW1vdmVDbGFzcygiY29sLXhzLTIiKTsKICAgICAgICBhcHBsaWNhdGlvbk5hbWUgPT0gQUxFUlRfQ09ORklHX1RZUEUuQURIT0NfQUxFUlQgPyBkYXRhVGFibGVzX2xlbmd0aC5wYXJlbnQoIjpub3QoJy5kYXRhVGFibGVzX3dyYXBwZXInKSIpLmFkZENsYXNzKCJjb2wteHMtOSIpIDogZGF0YVRhYmxlc19sZW5ndGgucGFyZW50KCI6bm90KCcuZGF0YVRhYmxlc193cmFwcGVyJykiKS5hZGRDbGFzcygiY29sLXhzLTEwIik7CiAgICAgICAgZGF0YVRhYmxlc19sZW5ndGgucGFyZW50KCI6bm90KCcuZGF0YVRhYmxlc193cmFwcGVyJykiKS5uZXh0KCkucmVtb3ZlQ2xhc3MoImNvbC14cy0xMCIpOwogICAgICAgIGFwcGxpY2F0aW9uTmFtZSA9PSBBTEVSVF9DT05GSUdfVFlQRS5BREhPQ19BTEVSVCA/IGRhdGFUYWJsZXNfbGVuZ3RoLnBhcmVudCgiOm5vdCgnLmRhdGFUYWJsZXNfd3JhcHBlcicpIikubmV4dCgpLmFkZENsYXNzKCJjb2wteHMtMyIpIDogZGF0YVRhYmxlc19sZW5ndGgucGFyZW50KCI6bm90KCcuZGF0YVRhYmxlc193cmFwcGVyJykiKS5uZXh0KCkuYWRkQ2xhc3MoImNvbC14cy0yIik7CiAgICAgICAgZGF0YVRhYmxlc19sZW5ndGguZmluZCgibGFiZWwiKS5hZGRDbGFzcygnY29sLXhzLTInKTsKICAgICAgICBkYXRhVGFibGVzX2xlbmd0aC5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGR0QnV0dG9ucyA9ICc8ZGl2IGNsYXNzPSJkYXRhVGFibGUtdG9wLWRpc3Bvc2l0aW9uIGNvbC14cy0xMCI+JzsKICAgICAgICAgICAgJC5lYWNoKGZpbHRlcnNEYXRhLCBmdW5jdGlvbiAoaW5kZXgsIG9iaikgewogICAgICAgICAgICAgICAgaWYgKG9iai5jbG9zZWQgfHwgb2JqLmlzQ2xvc2VkKSB7CiAgICAgICAgICAgICAgICAgICAgZHRCdXR0b25zICs9ICc8ZGl2IGNsYXNzPSJjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IGNoZWNrYm94LWlubGluZSBtLWwtMyBjaGVja2JveC1wb3MtYWJzIj4nOwogICAgICAgICAgICAgICAgICAgIGR0QnV0dG9ucyArPSAnPGlucHV0IGlkPSJmaWx0ZXInICsgaW5kZXggKyAnIiB0eXBlPSJjaGVja2JveCIgY2xhc3M9ImR5bmFtaWMtZmlsdGVycyIgbmFtZT0icmVsYXRlZFJlc3VsdHMiIGRhdGEtY2xvc2VkPSInICsgb2JqLmlzQ2xvc2VkICsgJyIgdmFsdWU9IicgKyBvYmoudmFsdWUgKyAnIiAvPiA8bGFiZWwgY2xhc3M9Im0tci0zMCIgIGZvcj0iZmlsdGVyJyArIGluZGV4ICsgJyI+JyArIG9iai52YWx1ZSArICc8L2xhYmVsPjwvZGl2PicKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZHRCdXR0b25zICs9ICc8ZGl2IGNsYXNzPSJjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IGNoZWNrYm94LWlubGluZSBtLWwtMyBjaGVja2JveC1wb3MtYWJzIj4nOwogICAgICAgICAgICAgICAgICAgIGR0QnV0dG9ucyArPSAnPGlucHV0IGlkPSJmaWx0ZXInICsgaW5kZXggKyAnIiB0eXBlPSJjaGVja2JveCIgY2xhc3M9ImR5bmFtaWMtZmlsdGVycyIgbmFtZT0icmVsYXRlZFJlc3VsdHMiIGRhdGEtY2xvc2VkPSInICsgb2JqLmlzQ2xvc2VkICsgJyIgY2hlY2tlZD0iY2hlY2tlZCIgdmFsdWU9IicgKyBvYmoudmFsdWUgKyAnIiAvPiA8bGFiZWwgY2xhc3M9Im0tci0zMCIgZm9yPSJmaWx0ZXInICsgaW5kZXggKyAnIj4nICsgb2JqLnZhbHVlICsgJzwvbGFiZWw+PC9kaXY+JwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZHRCdXR0b25zICs9ICc8L2Rpdj4nOwogICAgICAgICAgICBkdEJ1dHRvbnMgPSBkdEJ1dHRvbnMgKyAnPC9kaXY+JzsKICAgICAgICAgICAgaWYgKHRoaXMuaWQgIT09ICdhcmNoaXZlZEFsZXJ0c1RhYmxlX2xlbmd0aCcgJiYgdGhpcy5pZCAhPT0gJ2FjdGl2aXRpZXNUYWJsZV9sZW5ndGgnKQogICAgICAgICAgICAgICAgJCh0aGlzKS5hcHBlbmQoZHRCdXR0b25zKTsKICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5keW5hbWljLWZpbHRlcnMnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgYWxlcnREZXRhaWxzVGFibGU7CiAgICAgICAgICAgICAgICB2YXIgZnJlcVNlbGVjdGVkID0gIiI7CiAgICAgICAgICAgICAgICBpZiAoJCgiI2ZyZXF1ZW5jeU5hbWVzIikpIHsKICAgICAgICAgICAgICAgICAgICBmcmVxU2VsZWN0ZWQgPSAkKCIjZnJlcXVlbmN5TmFtZXMiKS52YWwoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJBcnJheSA9IFtdOwogICAgICAgICAgICAgICAgdmFyIGZpbHRlclZhbHVlcyA9IFtdOwogICAgICAgICAgICAgICAgJCgnLmR5bmFtaWMtZmlsdGVycycpLmVhY2goZnVuY3Rpb24gKGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpjaGVja2VkJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyVmFsdWVzLnB1c2goJCh0aGlzKS52YWwoKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGZpbHRlckFycmF5LnB1c2goJCh0aGlzKS5pcygnOmNoZWNrZWQnKSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0ocHJlZml4ICsgImZpbHRlcnNfc3RvcmUiLCBKU09OLnN0cmluZ2lmeShmaWx0ZXJBcnJheSkpOwogICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShwcmVmaXggKyAiZmlsdGVyc192YWx1ZSIsIEpTT04uc3RyaW5naWZ5KGZpbHRlclZhbHVlcykpOwogICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShwcmVmaXggKyAiaWQiLCBpZCk7CiAgICAgICAgICAgICAgICB2YXIgdXJsOwogICAgICAgICAgICAgICAgaWYgKGFwcGxpY2F0aW9uTmFtZSA9PSAnTGl0ZXJhdHVyZSBTZWFyY2ggQWxlcnQnKSB7CiAgICAgICAgICAgICAgICAgICAgYWxlcnREZXRhaWxzVGFibGUgPSAkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuRGF0YVRhYmxlKCk7CiAgICAgICAgICAgICAgICAgICAgdXJsID0gbGlzdENvbmZpZ1VybCArICI/ZmlsdGVycz0iICsgZmlsdGVyVmFsdWVzLmpvaW4oIiwiKQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBhbGVydERldGFpbHNUYWJsZSA9ICQoJyNhbGVydHNEZXRhaWxzVGFibGUnKS5EYXRhVGFibGUoKTsKICAgICAgICAgICAgICAgICAgICB1cmwgPSBsaXN0Q29uZmlnVXJsICsgIiZmcmVxdWVuY3k9IiArIGZyZXFTZWxlY3RlZCArICImaXNGaWx0ZXJSZXF1ZXN0PXRydWUmZmlsdGVycz0iICsgSlNPTi5zdHJpbmdpZnkoZmlsdGVyVmFsdWVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGFsZXJ0RGV0YWlsc1RhYmxlLmFqYXgudXJsKHVybCkubG9hZCgpCiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgIH07CgogICAgdmFyIGlzQWxlcnRQZXJzaXN0ZWRJblNlc3Npb25TdG9yYWdlID0gZnVuY3Rpb24gKHByZWZpeCkgewogICAgICAgIHZhciBjID0gc2lnbmFsLnV0aWxzLmdldFF1ZXJ5U3RyaW5nKCJjb25maWdJZCIpOwogICAgICAgIHJldHVybiBjID8gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShwcmVmaXggKyAiaWQiKSA9PSBjIDogZmFsc2UKICAgIH07CgogICAgdmFyIHJlbW92ZUZpbHRlcnNGcm9tU2Vzc2lvblN0b3JhZ2UgPSBmdW5jdGlvbiAocHJlZml4KSB7CiAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShwcmVmaXggKyAiZmlsdGVyc19zdG9yZSIpOwogICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0ocHJlZml4ICsgImZpbHRlcnNfdmFsdWUiKTsKICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKHByZWZpeCArICJpZCIpOwogICAgfTsKCiAgICB2YXIgb3BlblNhdmVWaWV3TW9kYWwgPSBmdW5jdGlvbiAoZmlsdGVySW5kZXgsIGFwcGxpY2F0aW9uTmFtZSwgdmlld0lkKSB7CiAgICAgICAgdmFyIHN5c3RlbURlZmF1bHQgPSBbIlN5c3RlbSBWaWV3Il07CiAgICAgICAgdmFyIHZpZXdJbmZvOwoKICAgICAgICAvL3NhdmluZyBuZXcgdmlldwogICAgICAgICQoIi5zYXZlVmlldyIpLnVuYmluZCgnY2xpY2snKTsKICAgICAgICAkKCcuc2F2ZVZpZXcnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZpZXdJbmZvID0gZ2VuZXJhdGVWaWV3SW5mbyhmaWx0ZXJJbmRleCk7CgogICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X2ZpbHRlcnMnKS52YWwoSlNPTi5zdHJpbmdpZnkodmlld0luZm8uZmlsdGVyTWFwKSk7CiAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfY29sdW1uTGlzdCcpLnZhbCh2aWV3SW5mby5ub3RWaXNpYmxlQ29sdW1uKTsKICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19hbGVydFR5cGUnKS52YWwoYXBwbGljYXRpb25OYW1lKTsKICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19zb3J0aW5nJykudmFsKEpTT04uc3RyaW5naWZ5KHZpZXdJbmZvLnNvcnRlZENvbHVtbikpOwogICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X2FkdmFuY2VkX2ZpbHRlcicpLnZhbCh2aWV3SW5mby5hZHZhbmNlZEZpbHRlcik7CiAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI2N1cnJlbnRfdmlld19pZCcpLnZhbCh2aWV3SWQpOwogICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsIC5zYXZlX2J1dHRvbnMnKS5zaG93KCk7CiAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwnKS5tb2RhbCgnc2hvdycpOwogICAgICAgIH0pCgogICAgICAgIC8vdXBkYXRpbmcgZXhpc3RpbmcgdmlldwogICAgICAgICQoIi51cGRhdGVWaWV3IikudW5iaW5kKCdjbGljaycpOwogICAgICAgICQoJy51cGRhdGVWaWV3Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2aWV3SW5mbyA9IGdlbmVyYXRlVmlld0luZm8oZmlsdGVySW5kZXgpOwogICAgICAgICAgICBpZiAoJC5pbkFycmF5KCQoJy52aWV3U2VsZWN0IDpzZWxlY3RlZCcpLnRleHQoKS5yZXBsYWNlKCIoZGVmYXVsdCkiLCAiIikudHJpbSgpLCBzeXN0ZW1EZWZhdWx0KSAhPSAtMSkgewogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19maWx0ZXJzJykudmFsKEpTT04uc3RyaW5naWZ5KHZpZXdJbmZvLmZpbHRlck1hcCkpOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19jb2x1bW5MaXN0JykudmFsKHZpZXdJbmZvLm5vdFZpc2libGVDb2x1bW4pOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAjdmlld19hbGVydFR5cGUnKS52YWwoYXBwbGljYXRpb25OYW1lKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfc29ydGluZycpLnZhbChKU09OLnN0cmluZ2lmeSh2aWV3SW5mby5zb3J0ZWRDb2x1bW4pKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfYWR2YW5jZWRfZmlsdGVyJykudmFsKHZpZXdJbmZvLmFkdmFuY2VkRmlsdGVyKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI2N1cnJlbnRfdmlld19pZCcpLnZhbCh2aWV3SWQpOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCAuc2F2ZV9idXR0b25zJykuc2hvdygpOwogICAgICAgICAgICAgICAgJCgnI3NhdmUtdmlldy1tb2RhbCcpLm1vZGFsKCdzaG93Jyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IG5ldyBPYmplY3QoKTsKICAgICAgICAgICAgICAgIHJlcXVlc3RbJ25hbWUnXSA9ICQoJy52aWV3U2VsZWN0IDpzZWxlY3RlZCcpLnRleHQoKS5yZXBsYWNlKCIoZGVmYXVsdCkiLCAiIikudHJpbSgpOwogICAgICAgICAgICAgICAgcmVxdWVzdFsnZmlsdGVyTWFwJ10gPSBKU09OLnN0cmluZ2lmeSh2aWV3SW5mby5maWx0ZXJNYXApOwogICAgICAgICAgICAgICAgcmVxdWVzdFsnY29sdW1uTGlzdCddID0gdmlld0luZm8ubm90VmlzaWJsZUNvbHVtbi50b1N0cmluZygpOwogICAgICAgICAgICAgICAgcmVxdWVzdFsnYWxlcnRUeXBlJ10gPSBhcHBsaWNhdGlvbk5hbWU7CiAgICAgICAgICAgICAgICByZXF1ZXN0WydpZCddID0gJCgnLnZpZXdTZWxlY3QnKS52YWwoKTsKICAgICAgICAgICAgICAgIHJlcXVlc3RbJ3NvcnRpbmcnXSA9IEpTT04uc3RyaW5naWZ5KHZpZXdJbmZvLnNvcnRlZENvbHVtbik7CiAgICAgICAgICAgICAgICByZXF1ZXN0WydhZHZhbmNlZEZpbHRlciddID0gdmlld0luZm8uYWR2YW5jZWRGaWx0ZXI7CiAgICAgICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgICAgIHVybDogdXBkYXRlVmlld1VybCwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVxdWVzdCwKICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWdlVVJMID0gJChsb2NhdGlvbikuYXR0cigiaHJlZiIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFnZVVSTC5pbmRleE9mKCJ2aWV3SWQiKSAhPSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gcGFnZVVSTC5zbGljZSgwLCBwYWdlVVJMLmluZGV4T2YoInZpZXdJZCIpICsgNykgKyBkYXRhLnZpZXdJZAogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhZ2VVUkwuaW5kZXhPZigiIyIpICE9IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVVSTCA9IHBhZ2VVUkwuc2xpY2UoMCwgcGFnZVVSTC5pbmRleE9mKCIjIikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBwYWdlVVJMICsgIiZ2aWV3SWQ9IiArIGRhdGEudmlld0lkCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5lcnJvck1lc3NhZ2UpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0Vycm9yTm90aWZpY2F0aW9uKGRhdGEuZXJyb3JNZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgLy9zZWxlY3RpbmcgYW5vdGhlciB2aWV3CiAgICAgICAgJCgnLnZpZXdTZWxlY3QnKS51bmJpbmQoJ2NsaWNrJyk7CiAgICAgICAgJCgnLnZpZXdTZWxlY3QnKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgcGFnZVVSTCA9ICQobG9jYXRpb24pLmF0dHIoImhyZWYiKTsKICAgICAgICAgICAgdmFyIHNlbGVjdGVkVmlldyA9ICQoJy52aWV3U2VsZWN0JykudmFsKCk7CiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ2lzVmlld0NhbGwnLCAndHJ1ZScpOwogICAgICAgICAgICBpZiAocGFnZVVSTC5pbmRleE9mKCJ2aWV3SWQiKSAhPSAtMSkgewogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBwYWdlVVJMLnNsaWNlKDAsIHBhZ2VVUkwuaW5kZXhPZigidmlld0lkIikgKyA3KSArIHNlbGVjdGVkVmlldwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHBhZ2VVUkwuaW5kZXhPZigiIyIpICE9IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgcGFnZVVSTCA9IHBhZ2VVUkwuc2xpY2UoMCwgcGFnZVVSTC5pbmRleE9mKCIjIikpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHBhZ2VVUkwgKyAiJnZpZXdJZD0iICsgc2VsZWN0ZWRWaWV3CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgLy9kZWxldGluZyBvciBlZGl0aW5nIHNlbGVjdGVkIHZpZXcKICAgICAgICAkKCcuZWRpdFZpZXcnKS51bmJpbmQoJ2NsaWNrJyk7CiAgICAgICAgJCgnLmVkaXRWaWV3Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2aWV3SW5mbyA9IGdlbmVyYXRlVmlld0luZm8oZmlsdGVySW5kZXgpOwoKICAgICAgICAgICAgaWYgKCQuaW5BcnJheSgkKCcudmlld1NlbGVjdCA6c2VsZWN0ZWQnKS50ZXh0KCkucmVwbGFjZSgiKGRlZmF1bHQpIiwgIiIpLnRyaW0oKSwgc3lzdGVtRGVmYXVsdCkgPT0gLTEpIHsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfbmFtZScpLnZhbCgkKCcudmlld1NlbGVjdCA6c2VsZWN0ZWQnKS50ZXh0KCkucmVwbGFjZSgiKGRlZmF1bHQpIiwgIiIpKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfZGVmYXVsdCcpLnByb3AoJ2NoZWNrZWQnLCAoJCgnLnZpZXdTZWxlY3QgOnNlbGVjdGVkJykudGV4dCgpLmluZGV4T2YoIihkZWZhdWx0KSIpICE9IC0xKSk7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsICN2aWV3X2lkJykudmFsKCQoJy52aWV3U2VsZWN0IDpzZWxlY3RlZCcpLnZhbCgpKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfZmlsdGVycycpLnZhbChKU09OLnN0cmluZ2lmeSh2aWV3SW5mby5maWx0ZXJNYXApKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfY29sdW1uTGlzdCcpLnZhbCh2aWV3SW5mby5ub3RWaXNpYmxlQ29sdW1uKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfc29ydGluZycpLnZhbChKU09OLnN0cmluZ2lmeSh2aWV3SW5mby5zb3J0ZWRDb2x1bW4pKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfYWR2YW5jZWRfZmlsdGVyJykudmFsKHZpZXdJbmZvLmFkdmFuY2VkRmlsdGVyKTsKICAgICAgICAgICAgICAgICQoJyNzYXZlLXZpZXctbW9kYWwgI3ZpZXdfYWxlcnRUeXBlJykudmFsKGFwcGxpY2F0aW9uTmFtZSk7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsIC5lZGl0X2J1dHRvbnMnKS5zaG93KCk7CiAgICAgICAgICAgICAgICAkKCcjc2F2ZS12aWV3LW1vZGFsJykubW9kYWwoJ3Nob3cnKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoJyNhbGVydC12aWV3LW1vZGFsJykubW9kYWwoJ3Nob3cnKTsKICAgICAgICAgICAgfQogICAgICAgIH0pCiAgICB9OwoKICAgIHZhciBnZW5lcmF0ZVZpZXdJbmZvID0gZnVuY3Rpb24gKGZpbHRlckluZGV4KSB7CiAgICAgICAgdmFyIG9UYWJsZSA9ICQoJyNhbGVydHNEZXRhaWxzVGFibGUnKS5EYXRhVGFibGUoKTsKCiAgICAgICAgLy9nZW5lcmF0ZSBmaWx0ZXIgdmFsdWUgbWFwCiAgICAgICAgdmFyIGZpbHRlck1hcCA9IG5ldyBPYmplY3QoKTsKICAgICAgICAkLmVhY2goZmlsdGVySW5kZXgsIGZ1bmN0aW9uIChpZHgsIG9iaikgewogICAgICAgICAgICB2YXIgZmlsdGVyVmFsID0geWFkY2YuZXhHZXRDb2x1bW5GaWx0ZXJWYWwob1RhYmxlLCBvYmopOwogICAgICAgICAgICBpZiAoZmlsdGVyVmFsKSB7CiAgICAgICAgICAgICAgICBmaWx0ZXJNYXBbb2JqXSA9IGZpbHRlclZhbAogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIC8vZ2VuZXJhdGUgY29sdW1ucyB2aXNpYmxlIGxpc3QKICAgICAgICB2YXIgbm90VmlzaWJsZUNvbHVtbiA9ICQoJyNjb2x1bW5JbmRleCcpLnZhbCgpOwoKICAgICAgICAvL2dlbmVyYXRlIHNvcnRpbmcgY29sdW1uIGluZm8KICAgICAgICB2YXIgc29ydGVkQ29sdW1uID0gbmV3IE9iamVjdCgpOwogICAgICAgIGlmICgkKCcjYWxlcnRzRGV0YWlsc1RhYmxlJykuZGF0YVRhYmxlKCkuZm5TZXR0aW5ncygpLmFhU29ydGluZ1swXSkgewogICAgICAgICAgICB2YXIgc29ydGVkQ29sID0gJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLmRhdGFUYWJsZSgpLmZuU2V0dGluZ3MoKS5hYVNvcnRpbmdbMF1bMF07CiAgICAgICAgICAgIHZhciBjb2x1bW5OYW1lID0gJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLmZpbmQoInRoIikuZXEoc29ydGVkQ29sKS5hdHRyKCJkYXRhLWZpZWxkIik7CiAgICAgICAgICAgIHZhciBpbmRleCA9IDA7CiAgICAgICAgICAgIGNvbHVtblNlcS5ldmVyeShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgc2VxTmFtZSA9IGNvbHVtblNlcVtpbmRleF0ubmFtZTsKICAgICAgICAgICAgICAgIGlmIChjb2x1bW5OYW1lID09IHNlcU5hbWUpIHsKICAgICAgICAgICAgICAgICAgICBzb3J0ZWRDb2wgPSBjb2x1bW5TZXFbaW5kZXhdLnNlcTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpbmRleCsrOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgc29ydGVkRGlyID0gJCgnI2FsZXJ0c0RldGFpbHNUYWJsZScpLmRhdGFUYWJsZSgpLmZuU2V0dGluZ3MoKS5hYVNvcnRpbmdbMF1bMV07CiAgICAgICAgICAgIHNvcnRlZENvbHVtbltzb3J0ZWRDb2xdID0gc29ydGVkRGlyOwogICAgICAgIH0KCiAgICAgICAgLy9nZW5lcmF0ZSBhZHZhbmNlZCBmaWx0ZXIgaW5mbwogICAgICAgIHZhciBhZHZhbmNlZEZpdGVySWQgPSAkKCcuYWR2YW5jZWQtZmlsdGVyLWRyb3Bkb3duJykudmFsKCk7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgJ2ZpbHRlck1hcCc6IGZpbHRlck1hcCwKICAgICAgICAgICAgJ25vdFZpc2libGVDb2x1bW4nOiBub3RWaXNpYmxlQ29sdW1uLAogICAgICAgICAgICAnc29ydGVkQ29sdW1uJzogc29ydGVkQ29sdW1uLAogICAgICAgICAgICAnYWR2YW5jZWRGaWx0ZXInOiBhZHZhbmNlZEZpdGVySWQKICAgICAgICB9CiAgICB9OwoKICAgIHZhciBjcmVhdGVTb3J0aW5nTWFwID0gZnVuY3Rpb24gKGluZm9LZXksIHZpZXdOYW1lKSB7CiAgICAgICAgdmFyIHNvcnRpbmdNYXAgPSBbXTsKICAgICAgICB2YXIgc29ydGluZyA9IHt9OwogICAgICAgIHZhciBzZXNzaW9uU3RvcmVkVmFsOwogICAgICAgIGlmIChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHZpZXdOYW1lKSA9PSAkKCcudmlld1NlbGVjdCA6c2VsZWN0ZWQnKS50ZXh0KCkucmVwbGFjZSgiKGRlZmF1bHQpIiwgIiIpLnRyaW0oKSkgewogICAgICAgICAgICBzZXNzaW9uU3RvcmVkVmFsID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShpbmZvS2V5KTsKICAgICAgICB9CiAgICAgICAgaWYgKHNlc3Npb25TdG9yZWRWYWwpIHsKICAgICAgICAgICAgc29ydGluZyA9ICQucGFyc2VKU09OKHNlc3Npb25TdG9yZWRWYWwpOwogICAgICAgIH0gZWxzZSBpZiAoJCgiI3NvcnRlZENvbHVtbiIpLnZhbCgpICE9ICIiICYmICQoIiNzb3J0ZWRDb2x1bW4iKS52YWwoKSAhPSAie30iICYmIGNhbGxpbmdTY3JlZW4gPT0gJ3JldmlldycpIHsKICAgICAgICAgICAgc29ydGluZyA9ICQucGFyc2VKU09OKCQoJyNzb3J0ZWRDb2x1bW4nKS52YWwoKSk7CiAgICAgICAgfQogICAgICAgICQuZWFjaChzb3J0aW5nLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgICAgICAgICBzb3J0aW5nTWFwLnB1c2goW3BhcnNlSW50KGtleSksIHZhbHVlXSkKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gc29ydGluZ01hcAogICAgfTsKCiAgICB2YXIgY3JlYXRlRmlsdGVyTWFwID0gZnVuY3Rpb24gKGluZm9LZXksIHZpZXdOYW1lKSB7CiAgICAgICAgdmFyIGZpbHRlcnNWYWx1ZSA9IFtdOwogICAgICAgIHZhciBmaWx0ZXJNYXAgPSB7fTsKICAgICAgICB2YXIgc2Vzc2lvblN0b3JlZFZhbDsKICAgICAgICBpZiAoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSh2aWV3TmFtZSkgPT0gJCgnLnZpZXdTZWxlY3QgOnNlbGVjdGVkJykudGV4dCgpLnJlcGxhY2UoIihkZWZhdWx0KSIsICIiKS50cmltKCkpIHsKICAgICAgICAgICAgc2Vzc2lvblN0b3JlZFZhbCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oaW5mb0tleSk7CiAgICAgICAgfQogICAgICAgIGlmIChzZXNzaW9uU3RvcmVkVmFsICYmIHNlc3Npb25TdG9yZWRWYWwgIT0ge30pIHsKICAgICAgICAgICAgZmlsdGVyTWFwID0gJC5wYXJzZUpTT04oc2Vzc2lvblN0b3JlZFZhbCk7CiAgICAgICAgfSBlbHNlIGlmICgkKCcjZmlsdGVyTWFwJykudmFsKCkgIT0gIiIgJiYgJCgnI2ZpbHRlck1hcCcpLnZhbCgpICE9ICJ7fSIpIHsKICAgICAgICAgICAgZmlsdGVyTWFwID0gJC5wYXJzZUpTT04oJCgnI2ZpbHRlck1hcCcpLnZhbCgpKTsKICAgICAgICB9CiAgICAgICAgJC5lYWNoKGZpbHRlck1hcCwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgdmFyIGZpbHRlckFyciA9IFtwYXJzZUludChrZXkpLCB2YWx1ZV07CiAgICAgICAgICAgIGZpbHRlcnNWYWx1ZS5wdXNoKGZpbHRlckFycikKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gZmlsdGVyc1ZhbHVlCiAgICB9OwoKICAgIHZhciBjcmVhdGVMaXN0T2ZJbmRleCA9IGZ1bmN0aW9uIChpbmZvS2V5LCBpc0V2ZGFzLCB2aWV3TmFtZSkgewogICAgICAgIHZhciBsb2kgPSBbXTsKICAgICAgICB2YXIgY29sdW1uSW5kZXggPSBbXQogICAgICAgIHZhciBzZXNzaW9uU3RvcmVkVmFsOwogICAgICAgIGlmIChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHZpZXdOYW1lKSA9PSAkKCcudmlld1NlbGVjdCA6c2VsZWN0ZWQnKS50ZXh0KCkucmVwbGFjZSgiKGRlZmF1bHQpIiwgIiIpLnRyaW0oKSkgewogICAgICAgICAgICBzZXNzaW9uU3RvcmVkVmFsID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShpbmZvS2V5KTsKICAgICAgICB9CiAgICAgICAgaWYgKGNhbGxpbmdTY3JlZW4gPT0gJ3JldmlldycpIHsKICAgICAgICAgICAgaWYgKHNlc3Npb25TdG9yZWRWYWwpIHsKICAgICAgICAgICAgICAgIGNvbHVtbkluZGV4ID0gc2Vzc2lvblN0b3JlZFZhbC5zcGxpdCgnLCcpCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb2x1bW5JbmRleCA9ICQoJyNjb2x1bW5JbmRleCcpLnZhbCgpLnNwbGl0KCcsJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJC5lYWNoKGNvbHVtbkluZGV4LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAoaXNFdmRhcykgewogICAgICAgICAgICAgICAgICAgIGxvaS5wdXNoKHBhcnNlSW50KHRoaXMpKQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsb2kucHVzaChwYXJzZUludCh0aGlzKSArIDEpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbG9pCiAgICB9OwoKICAgIHZhciBzZXRTb3J0T3JkZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJCgiI2FsZXJ0c0RldGFpbHNUYWJsZVJvdyIpLm9uKCdtb3VzZWRvd24nLCAndGgnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGluZGV4ID0gJCh0aGlzKS5hdHRyKCJkYXRhLWNvbHVtbi1pbmRleCIpOwogICAgICAgICAgICBkaXIgPSAnYXNjJzsKICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ3NvcnRpbmdfYXNjJykpIHsKICAgICAgICAgICAgICAgIGRpciA9ICdkZXNjJwogICAgICAgICAgICB9IGVsc2UgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ3NvcnRpbmdfZGVzYycpKSB7CiAgICAgICAgICAgICAgICBkaXIgPSAnYXNjJwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlzVmlld0luc3RhbmNlID0gMDsKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIG9wZW5BbGVydFRhZ01vZGFsID0gZnVuY3Rpb24gKCkgewogICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuZWRpdEFsZXJ0VGFncycsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgdmFyIHBhcmVudF9yb3cgPSAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgndHInKTsKICAgICAgICAgICAgdmFyIGluZGV4ID0gJCh0aGlzKS5jbG9zZXN0KCd0cicpLmluZGV4KCk7CiAgICAgICAgICAgIHZhciByb3dPYmplY3QgPSB0YWJsZS5yb3dzKGluZGV4KS5kYXRhKClbMF07CiAgICAgICAgICAgIHZhciBhbGVydElkID0gcm93T2JqZWN0LmlkOwogICAgICAgICAgICB2YXIgZXhlY0NvbmZpZ0lkID0gcGFyZW50X3Jvdy5maW5kKCcuZXhlY0NvbmZpZ0lkJykuYXR0cigidmFsdWUiKTsKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHVybDogZmV0Y2hUYWdzVXJsLAogICAgICAgICAgICAgICAgZGF0YTogewogICAgICAgICAgICAgICAgICAgIGFsZXJ0SWQ6IGFsZXJ0SWQKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGFsZXJ0VGFnTW9kYWxPYmogPSAkKCcjYWxlcnRUYWdNb2RhbCcpOwogICAgICAgICAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI3NpbmdsZUFsZXJ0VGFncycpLnNlbGVjdDIoewogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIkFkZCBDYXRlZ29yaWVzIiwKICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3M6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdC50YWdMaXN0CgogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmoubW9kYWwoJ3Nob3cnKTsKICAgICAgICAgICAgICAgICAgICBhbGVydFRhZ01vZGFsT2JqLmZpbmQoJyNzaW5nbGVBbGVydFRhZ3MnKS52YWwocmVzdWx0LmFsZXJ0VGFnTGlzdCk7CiAgICAgICAgICAgICAgICAgICAgYWxlcnRUYWdNb2RhbE9iai5maW5kKCcjc2luZ2xlQWxlcnRUYWdzJykudHJpZ2dlcignY2hhbmdlJyk7CiAgICAgICAgICAgICAgICAgICAgYWxlcnRUYWdNb2RhbE9iai5maW5kKCIuYWRkVGFncyIpLnVuYmluZCgpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc2F2ZVRhZ1VybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydFRhZ3M6IEpTT04uc3RyaW5naWZ5KGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI3NpbmdsZUFsZXJ0VGFncycpLnZhbCgpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydElkOiBhbGVydElkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNDb25maWdJZDogZXhlY0NvbmZpZ0lkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5hamF4LnJlbG9hZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH07CgogICAgdmFyIG9wZW5TaW5nbGVBbGVydFRhZ01vZGFsID0gZnVuY3Rpb24gKHRhYmxlT2JqLCB0YWdzT2JqKSB7CiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5lZGl0QWxlcnRUYWdzJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgIHZhciBwYXJlbnRfcm93ID0gJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJ3RyJyk7CiAgICAgICAgICAgIHZhciBpbmRleCA9ICQodGhpcykuY2xvc2VzdCgndHInKS5pbmRleCgpOwogICAgICAgICAgICBpZiAoaXNBYnN0cmFjdFZpZXdPckNhc2VWaWV3KGluZGV4KSkgewogICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleCAvIDIKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcm93T2JqZWN0ID0gdGFibGVPYmoucm93cyhpbmRleCkuZGF0YSgpWzBdOwogICAgICAgICAgICB2YXIgYWxlcnRJZCA9IHJvd09iamVjdC5pZDsKICAgICAgICAgICAgdmFyIGV4ZWNDb25maWdJZCA9IHBhcmVudF9yb3cuZmluZCgnLmV4ZWNDb25maWdJZCcpLmF0dHIoInZhbHVlIik7CiAgICAgICAgICAgIHZhciBhbGVydFRhZ01vZGFsT2JqID0gJCgnI2FsZXJ0VGFnTW9kYWwnKTsKICAgICAgICAgICAgdmFyICRzaW5nbGVDYXNlQWxlcnRUYWdzID0gYWxlcnRUYWdNb2RhbE9iai5maW5kKCcjc2luZ2xlQWxlcnRUYWdzJyk7CiAgICAgICAgICAgIHZhciAkZ2xvYmFsVGFncyA9IGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI2dsb2JhbFRhZ3MnKTsKICAgICAgICAgICAgYXBwbHlTZWxlY3QyRm9yVGFncygkc2luZ2xlQ2FzZUFsZXJ0VGFncywgZmV0Y2hUYWdzVXJsLCAnQ2FzZSBTZXJpZXMgQ2F0ZWdvcmllcycsIHRydWUpOwogICAgICAgICAgICBhcHBseVNlbGVjdDJGb3JUYWdzKCRnbG9iYWxUYWdzLCBmZXRjaFRhZ3NVcmwsICdHbG9iYWwgQ2F0ZWdvcmllcycsIGZhbHNlKTsKICAgICAgICAgICAgJHNpbmdsZUNhc2VBbGVydFRhZ3MuZmluZCgnb3B0aW9uJykucmVtb3ZlKCkKICAgICAgICAgICAgJGdsb2JhbFRhZ3MuZmluZCgnb3B0aW9uJykucmVtb3ZlKCkKICAgICAgICAgICAgJHNpbmdsZUNhc2VBbGVydFRhZ3MudmFsKG51bGwpLnRyaWdnZXIoImNoYW5nZSIpOwogICAgICAgICAgICAkZ2xvYmFsVGFncy52YWwobnVsbCkudHJpZ2dlcigiY2hhbmdlIik7CiAgICAgICAgICAgICQuZWFjaChyb3dPYmplY3QuY2FzZVNlcmllc1RhZ3MsIGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHsKICAgICAgICAgICAgICAgIHZhciBvcHRpb24gPSBuZXcgT3B0aW9uKHZhbHVlLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAkc2luZ2xlQ2FzZUFsZXJ0VGFncy5hcHBlbmQob3B0aW9uKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICQuZWFjaChyb3dPYmplY3QuZ2xvYmFsVGFncywgZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkgewogICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IG5ldyBPcHRpb24odmFsdWUsIHZhbHVlLCB0cnVlLCB0cnVlKTsKICAgICAgICAgICAgICAgICRnbG9iYWxUYWdzLmFwcGVuZChvcHRpb24pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgYWxlcnRUYWdNb2RhbE9iai5maW5kKCcjc2luZ2xlQWxlcnRUYWdzJykudHJpZ2dlcignY2hhbmdlJyk7CiAgICAgICAgICAgIGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI2dsb2JhbFRhZ3MnKS50cmlnZ2VyKCdjaGFuZ2UnKTsKICAgICAgICAgICAgdmFyIGVuYWJsZUNhc2VTZXJpZXNUYWdzID0gcm93T2JqZWN0LmlzQ2FzZVNlcmllc0dlbmVyYXRlZDsKICAgICAgICAgICAgaWYgKCFlbmFibGVDYXNlU2VyaWVzVGFncykgewogICAgICAgICAgICAgICAgYWxlcnRUYWdNb2RhbE9iai5maW5kKCcjc2luZ2xlQWxlcnRUYWdzJykuYXR0cignZGlzYWJsZWQnLCAnJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYWxlcnRUYWdNb2RhbE9iai5tb2RhbCgnc2hvdycpOwogICAgICAgICAgICBhbGVydFRhZ01vZGFsT2JqLmZpbmQoIi5hZGRUYWdzIikudW5iaW5kKCkuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6IHNhdmVUYWdVcmwsCiAgICAgICAgICAgICAgICAgICAgZGF0YTogewogICAgICAgICAgICAgICAgICAgICAgICBhbGVydFRhZ3M6IEpTT04uc3RyaW5naWZ5KGFsZXJ0VGFnTW9kYWxPYmouZmluZCgnI3NpbmdsZUFsZXJ0VGFncycpLnZhbCgpKSwKICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVGFnczogSlNPTi5zdHJpbmdpZnkoYWxlcnRUYWdNb2RhbE9iai5maW5kKCcjZ2xvYmFsVGFncycpLnZhbCgpKSwKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlZENhc2VTZXJpZXNUYWdzOiBKU09OLnN0cmluZ2lmeSh0YWdzT2JqLmRlbGV0ZWRDYXNlU2VyaWVzVGFncyksCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZWRHbG9iYWxUYWdzOiBKU09OLnN0cmluZ2lmeSh0YWdzT2JqLmRlbGV0ZWRHbG9iYWxUYWdzKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWRDYXNlU2VyaWVzVGFnczogSlNPTi5zdHJpbmdpZnkodGFnc09iai5hZGRlZENhc2VTZXJpZXNUYWdzKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWRHbG9iYWxUYWdzOiBKU09OLnN0cmluZ2lmeSh0YWdzT2JqLmFkZGVkR2xvYmFsVGFncyksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0SWQ6IGFsZXJ0SWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNDb25maWdJZDogZXhlY0NvbmZpZ0lkCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChwYXlsb2FkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLnN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVPYmouYWpheC5yZWxvYWQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuTm90aWZpY2F0aW9uLm5vdGlmeSgnc3VjY2VzcycsICd0b3AgcmlnaHQnLCAiU3VjY2VzcyIsIHBheWxvYWQubWVzc2FnZSwge2F1dG9IaWRlRGVsYXk6IDIwMDB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuTm90aWZpY2F0aW9uLm5vdGlmeSgnZXJyb3InLCAndG9wIHJpZ2h0JywgIkVycm9yIiwgcGF5bG9hZC5tZXNzYWdlLCB7YXV0b0hpZGVEZWxheTogMjAwMH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNzaW5nbGUtY2FzZS1hbGVydC1zcGlubmVyJykuYWRkQ2xhc3MoJ2hpZGRlbicpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgJCgnI3NpbmdsZS1jYXNlLWFsZXJ0LXNwaW5uZXInKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfTsKCiAgICB2YXIgcG9wdWxhdGVBZHZhbmNlZEZpbHRlclNlbGVjdCA9IGZ1bmN0aW9uIChhbGVydFR5cGUpIHsKCiAgICAgICAgJCgiLmFkdmFuY2VkLWZpbHRlci1kcm9wZG93biIpLnNlbGVjdDIoewogICAgICAgICAgICBwbGFjZWhvbGRlcjogJC5pMThuLl8oJ3NlbGVjdE9uZScpLAogICAgICAgICAgICBhbGxvd0NsZWFyOiB0cnVlLAogICAgICAgICAgICBhamF4OiB7CiAgICAgICAgICAgICAgICB1cmw6IGZldGNoQWR2RmlsdGVyVXJsLAogICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKICAgICAgICAgICAgICAgIHR5cGU6ICJHRVQiLAogICAgICAgICAgICAgICAgcXVpZXRNaWxsaXM6IDUwLAogICAgICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24gKHBhcmFtcykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0VHlwZTogYWxlcnRUeXBlLAogICAgICAgICAgICAgICAgICAgICAgICB0ZXJtOiBwYXJhbXMudGVybSB8fCAnJywKICAgICAgICAgICAgICAgICAgICAgICAgcGFnZTogcGFyYW1zLnBhZ2UgfHwgMSwKICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBwYXJhbXMubWF4IHx8IDMwCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBwcm9jZXNzUmVzdWx0czogZnVuY3Rpb24gKGRhdGEsIHBhcmFtcykgewogICAgICAgICAgICAgICAgICAgIHBhcmFtcy5wYWdlID0gcGFyYW1zLnBhZ2UgfHwgMTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiAkLm1hcChkYXRhLmxpc3QsIGZ1bmN0aW9uIChmaWx0ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZmlsdGVyLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGZpbHRlci5pZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZTogKHBhcmFtcy5wYWdlICogMzApIDwgZGF0YS50b3RhbENvdW50CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIC8vc2VsZWN0IGFkdmFuY2VkIGZpbHRlciBiYXNlZCBvbiBjdXJyZW50IHZpZXcKICAgICAgICBpZiAoJCgnI2FkdmFuY2VkRmlsdGVyVmlldycpLnZhbCgpKSB7CiAgICAgICAgICAgIHZhciBhZHZhbmNlZEZpbHRlclZpZXcgPSAkLnBhcnNlSlNPTigkKCcjYWR2YW5jZWRGaWx0ZXJWaWV3JykudmFsKCkpOwogICAgICAgICAgICB2YXIgb3B0aW9uID0gbmV3IE9wdGlvbihhZHZhbmNlZEZpbHRlclZpZXcubmFtZSwgYWR2YW5jZWRGaWx0ZXJWaWV3LmlkLCB0cnVlLCB0cnVlKTsKICAgICAgICAgICAgJCgiLmFkdmFuY2VkLWZpbHRlci1kcm9wZG93biIpLmFwcGVuZChvcHRpb24pLnRyaWdnZXIoJ2NoYW5nZScpOwogICAgICAgIH0KCiAgICAgICAgJCgnI2FkZEFkdmFuY2VkRmlsdGVyJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBzaWduYWwuYWR2YW5jZWRGaWx0ZXIuaW5pdGlhbGl6ZUFkdmFuY2VkRmlsdGVycygkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCcpKTsKICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI3NlbGVjdE9wZXJhdG9yJykuZW1wdHkoKS5hcHBlbmQoJzxvcHRpb24gc2VsZWN0ZWQ9InNlbGVjdGVkIiB2YWx1ZT0iIj5TZWxlY3QgT3BlcmF0b3I8L29wdGlvbj4nKTsKICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI25hbWUnKS52YWwoJycpOwogICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAjZGVzY3JpcHRpb24nKS52YWwoJycpOwogICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAjcXVlcnlKU09OJykudmFsKCcnKTsKICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI2FsZXJ0VHlwZScpLnZhbCgnJyk7CiAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsICNidWlsZGVyQWxsJykuZmluZCgnLmV4cHJlc3Npb24nKS5yZW1vdmUoKTsKICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgLmRlbGV0ZUFkdkZpbHRlcicpLmFkZENsYXNzKCdoaWRlJyk7CiAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsIC5maWx0ZXJzV2l0aG91dFNhdmluZycpLnJlbW92ZUNsYXNzKCdoaWRlJyk7CiAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsJykubW9kYWwoJ3Nob3cnKTsKCiAgICAgICAgfSk7CgogICAgICAgICQoJyNlZGl0QWR2YW5jZWRGaWx0ZXInKS51bmJpbmQoKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBhZHZhbmNlZEZpbHRlcklkID0gJCgnLmFkdmFuY2VkLWZpbHRlci1kcm9wZG93bicpLnZhbCgpOwogICAgICAgICAgICBpZiAoYWR2YW5jZWRGaWx0ZXJJZCkgewogICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6IGZldGNoQWR2YW5jZWRGaWx0ZXJJbmZvVXJsLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IHsnYWR2YW5jZWRGaWx0ZXIuaWQnOiBhZHZhbmNlZEZpbHRlcklkfSwKICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJHRVQiLAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI3NlbGVjdE9wZXJhdG9yJykuZW1wdHkoKS5hcHBlbmQoJzxvcHRpb24gc2VsZWN0ZWQ9InNlbGVjdGVkIiB2YWx1ZT0iIj5TZWxlY3QgT3BlcmF0b3I8L29wdGlvbj4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI25hbWUnKS52YWwocmVzdWx0Lm5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAjZGVzY3JpcHRpb24nKS52YWwocmVzdWx0LmRlc2NyaXB0aW9uKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI3F1ZXJ5SlNPTicpLnZhbChyZXN1bHQuSlNPTlF1ZXJ5KTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NyZWF0ZUFkdmFuY2VkRmlsdGVyTW9kYWwgI2FsZXJ0VHlwZScpLnZhbChhbGVydFR5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAjZmlsdGVySWQnKS52YWwoYWR2YW5jZWRGaWx0ZXJJZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsIC5maWx0ZXJzV2l0aG91dFNhdmluZycpLmFkZENsYXNzKCdoaWRlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjcmVhdGVBZHZhbmNlZEZpbHRlck1vZGFsIC5kZWxldGVBZHZGaWx0ZXInKS5yZW1vdmVDbGFzcygnaGlkZScpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCAubW9kYWwtdGl0bGUnKS5odG1sKCJFZGl0IEZpbHRlciIpOwogICAgICAgICAgICAgICAgICAgICAgICBzaWduYWwuYWR2YW5jZWRGaWx0ZXIuaW5pdGlhbGl6ZUFkdmFuY2VkRmlsdGVycygpOwogICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JlYXRlQWR2YW5jZWRGaWx0ZXJNb2RhbCcpLm1vZGFsKCdzaG93Jyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgJCgiLmFkdmFuY2VkLWZpbHRlci1kcm9wZG93biIpLm9uKCJjaGFuZ2UiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICB0YWJsZS5hamF4LnJlbG9hZCgpCiAgICAgICAgfSk7CiAgICB9OwoKICAgIHJldHVybiB7CiAgICAgICAgb3BlbkFsZXJ0Q29tbWVudE1vZGFsOiBvcGVuQWxlcnRDb21tZW50TW9kYWwsCiAgICAgICAgb3BlbkNhc2VIaXN0b3J5TW9kYWw6IG9wZW5DYXNlSGlzdG9yeU1vZGFsLAogICAgICAgIHJlc3RhcnRSZXZpZXc6IHJlc3RhcnRSZXZpZXcsCiAgICAgICAgb3BlblNpbWlsYXJDYXNlc01vZGFsOiBvcGVuU2ltaWxhckNhc2VzTW9kYWwsCiAgICAgICAgYXBwbHlCdXNpbmVzc1J1bGVzOiBhcHBseUJ1c2luZXNzUnVsZXMsCiAgICAgICAgc2hvd0F0dGFjaG1lbnRNb2RhbDogb3BlbkF0dGFjaG1lbnRNb2RhbCwKICAgICAgICBiaW5kR3JpZER5bmFtaWNGaWx0ZXJzOiBiaW5kR3JpZER5bmFtaWNGaWx0ZXJzLAogICAgICAgIGVuYWJsZU1lbnVUb29sdGlwczogZW5hYmxlTWVudVRvb2x0aXBzLAogICAgICAgIGRpc2FibGVUb29sdGlwczogZGlzYWJsZVRvb2x0aXBzLAogICAgICAgIHNvcnRJY29uSGFuZGxlcjogc29ydEljb25IYW5kbGVyLAogICAgICAgIGlzQWxlcnRQZXJzaXN0ZWRJblNlc3Npb25TdG9yYWdlOiBpc0FsZXJ0UGVyc2lzdGVkSW5TZXNzaW9uU3RvcmFnZSwKICAgICAgICByZW1vdmVGaWx0ZXJzRnJvbVNlc3Npb25TdG9yYWdlOiByZW1vdmVGaWx0ZXJzRnJvbVNlc3Npb25TdG9yYWdlLAogICAgICAgIG9wZW5TYXZlVmlld01vZGFsOiBvcGVuU2F2ZVZpZXdNb2RhbCwKICAgICAgICBjcmVhdGVTb3J0aW5nTWFwOiBjcmVhdGVTb3J0aW5nTWFwLAogICAgICAgIGNyZWF0ZUZpbHRlck1hcDogY3JlYXRlRmlsdGVyTWFwLAogICAgICAgIGNyZWF0ZUxpc3RPZkluZGV4OiBjcmVhdGVMaXN0T2ZJbmRleCwKICAgICAgICBvcGVuQWxlcnRUYWdNb2RhbDogb3BlbkFsZXJ0VGFnTW9kYWwsCiAgICAgICAgc2V0U29ydE9yZGVyOiBzZXRTb3J0T3JkZXIsCiAgICAgICAgb3BlblNpbmdsZUFsZXJ0VGFnTW9kYWw6IG9wZW5TaW5nbGVBbGVydFRhZ01vZGFsLAogICAgICAgIGdlbmVyYXRlVmlld0luZm86IGdlbmVyYXRlVmlld0luZm8sCiAgICAgICAgcG9wdWxhdGVBZHZhbmNlZEZpbHRlclNlbGVjdDogcG9wdWxhdGVBZHZhbmNlZEZpbHRlclNlbGVjdAogICAgfQoKfSkoKTsKCmZ1bmN0aW9uIHNob3dFcnJvck1lc3NhZ2VJbk1vZGFsKCRtb2RhbCwgdGV4dCkgewogICAgY2xlYXJfZXJyb3JzKCk7CiAgICBpZiAodGV4dCkgewogICAgICAgIHRleHQgPSB0ZXh0OwogICAgfSBlbHNlIHsKICAgICAgICB0ZXh0ID0gJ1BsZWFzZSBmaWxsICB0aGUgcmVxdWlyZWQgRmllbGRzJzsKICAgIH0KICAgIHZhciBhbGVydEh0bWwgPSBnZXRFcnJvck1lc3NhZ2VIdG1sKHRleHQpOwogICAgJG1vZGFsLmZpbmQoJy5tb2RhbC1ib2R5JykucHJlcGVuZChhbGVydEh0bWwpOwp9CgpmdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2VIdG1sKG1zZykgewogICAgdmFyIGFsZXJ0SHRtbCA9ICc8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIgYWxlcnQtZGlzbWlzc2libGUiIHJvbGU9ImFsZXJ0Ij4gJyArCiAgICAgICAgJzxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0iYWxlcnQiPiAnICsKICAgICAgICAnPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+ICcgKwogICAgICAgICc8c3BhbiBjbGFzcz0ic3Itb25seSI+PGc6bWVzc2FnZSBjb2RlPSJkZWZhdWx0LmJ1dHRvbi5jbG9zZS5sYWJlbCIgLz48L3NwYW4+ICcgKwogICAgICAgICc8L2J1dHRvbj4gJyArIG1zZzsKICAgICc8L2Rpdj4nOwogICAgcmV0dXJuIGFsZXJ0SHRtbDsKfQoKdmFyIGNsZWFyX2Vycm9ycyA9IGZ1bmN0aW9uICgpIHsKICAgICQoJy5tb2RhbCAubW9kYWwtYm9keSAuYWxlcnQnKS5yZW1vdmUoKTsKfTsKCmZ1bmN0aW9uIHNlYXJjaChuYW1lS2V5LCBteUFycmF5KSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG15QXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAobXlBcnJheVtpXS5uYW1lID09PSBuYW1lS2V5KSB7CiAgICAgICAgICAgIHJldHVybiBteUFycmF5W2ldOwogICAgICAgIH0KICAgIH0KfQoKZnVuY3Rpb24gcG9wdWxhdGVUb3BpY0RldGFpbCgkbW9kYWwsIHRvcGljT2JqKSB7CiAgICAkbW9kYWwuZmluZCgnI3N0YXJ0RGF0ZScpLnZhbCh0b3BpY09iai5zdGFydERhdGUpOwogICAgJG1vZGFsLmZpbmQoJyNlbmREYXRlJykudmFsKHRvcGljT2JqLmVuZERhdGUpOwogICAgJG1vZGFsLmZpbmQoJy5wcm9kdWN0LXNwYW4nKS50ZXh0KGdldFByb2R1Y3ROYW1lTGlzdChKU09OLnBhcnNlKHRvcGljT2JqLnByb2R1Y3RzKSkpOwogICAgJG1vZGFsLmZpbmQoJyNzdGFydERhdGUnKS5hdHRyKCJkaXNhYmxlZCIsICIiKTsKICAgICRtb2RhbC5maW5kKCcjZW5kRGF0ZScpLmF0dHIoImRpc2FibGVkIiwgIiIpOwogICAgaWYgKHRvcGljT2JqLnByb2R1Y3RzKSB7CiAgICAgICAgJG1vZGFsLmZpbmQoJyNwcm9kdWN0JykuYXR0cigiZGlzYWJsZWQiLCAiIik7CiAgICB9Cn0KCmZ1bmN0aW9uIGRlcG9wdWxhdGVUb3BpY0RldGFpbCgkbW9kYWwpIHsKICAgIHZhciBwcm9kdWN0SnNvbiA9ICRtb2RhbC5maW5kKCcucHJvZHVjdC1qc29uLWNvbnRhaW5lcicpLnZhbCgpOwogICAgJG1vZGFsLmZpbmQoJyNzdGFydERhdGUnKS52YWwoIiIpOwogICAgJG1vZGFsLmZpbmQoJyNlbmREYXRlJykudmFsKCIiKTsKICAgICRtb2RhbC5maW5kKCcjcHJvZHVjdCcpLnZhbCgiIik7CiAgICAkbW9kYWwuZmluZCgnLnByb2R1Y3Qtc3BhbicpLnRleHQoZ2V0UHJvZHVjdE5hbWVMaXN0KEpTT04ucGFyc2UocHJvZHVjdEpzb24pKSk7CiAgICAkbW9kYWwuZmluZCgnI3N0YXJ0RGF0ZScpLnJlbW92ZUF0dHIoImRpc2FibGVkIik7CiAgICAkbW9kYWwuZmluZCgnI2VuZERhdGUnKS5yZW1vdmVBdHRyKCJkaXNhYmxlZCIpOwogICAgJG1vZGFsLmZpbmQoJyNwcm9kdWN0JykucmVtb3ZlQXR0cigiZGlzYWJsZWQiKTsKfQoKZnVuY3Rpb24gZ2VuZXJhdGVQcm9kdWN0SnNvbihwcm9kdWN0SWQsIHByb2R1Y3ROYW1lLCBsZXZlbCkgewogICAgdmFyIHRvcGljUHJvZHVjdFZhbHVlcyA9IHsiMSI6IFtdLCAiMiI6IFtdLCAiMyI6IFtdLCAiNCI6IFtdLCAiNSI6IFtdfTsKICAgIHRvcGljUHJvZHVjdFZhbHVlc1tsZXZlbF0ucHVzaCh7bmFtZTogcHJvZHVjdE5hbWUsIGlkOiBwcm9kdWN0SWR9KTsKICAgIHJldHVybiB0b3BpY1Byb2R1Y3RWYWx1ZXM7Cn0KCmZ1bmN0aW9uIGdldFByb2R1Y3ROYW1lTGlzdChvYmopIHsKICAgIHZhciBwcm9kdWN0QXJyYXkgPSBbXTsKICAgIHZhciBvYmpBcnJheSA9IG9ialsnMyddOwogICAgJC5lYWNoKG9iakFycmF5LCBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7CiAgICAgICAgcHJvZHVjdEFycmF5LnB1c2godmFsdWUubmFtZSk7CiAgICB9KTsKICAgIHJldHVybiBwcm9kdWN0QXJyYXkuam9pbignLCcpOwp9CgpmdW5jdGlvbiBnZXRQcm9kdWN0SnNvbihhcHBsaWNhdGlvbk5hbWUsIHJvdykgewogICAgdmFyIHByb2R1Y3RKc29uOwogICAgaWYgKGFwcGxpY2F0aW9uTmFtZSA9PSAiQWQtSG9jIEFsZXJ0IikgewogICAgICAgIGlmIChyb3cuZmluZCgnLnJvdy1wcm9kdWN0LWpzb24tY29udGFpbmVyJykudmFsKCkpCiAgICAgICAgICAgIHByb2R1Y3RKc29uID0gSlNPTi5wYXJzZShyb3cuZmluZCgnLnJvdy1wcm9kdWN0LWpzb24tY29udGFpbmVyJykudmFsKCkpOwogICAgfSBlbHNlIHsKICAgICAgICB2YXIgcHJvZHVjdE5hbWUgPSByb3cuZmluZCgnc3BhbltkYXRhLWZpZWxkPSJwcm9kdWN0TmFtZSJdJykuYXR0cigiZGF0YS1pZCIpOwogICAgICAgIHZhciBwcm9kdWN0SWQgPSByb3cuZmluZCgnLnJvdy1wcm9kdWN0LWlkJykudmFsKCk7CiAgICAgICAgdmFyIGxldmVsID0gcm93LmZpbmQoJy5yb3ctbGV2ZWwtaWQnKS52YWwoKTsKICAgICAgICBpZiAoIWxldmVsKSB7CiAgICAgICAgICAgIGxldmVsID0gMzsKICAgICAgICB9CiAgICAgICAgcHJvZHVjdEpzb24gPSBnZW5lcmF0ZVByb2R1Y3RKc29uKHByb2R1Y3RJZCwgcHJvZHVjdE5hbWUsIGxldmVsKTsKICAgIH0KICAgIHJldHVybiBwcm9kdWN0SnNvbjsKfQoKZnVuY3Rpb24gYXBwbHlTZWxlY3QyRm9yVGFncygkc2VsZWN0b3IsIHVybCwgcGxhY2VIb2xkZXJUZXh0LCBpc0Nhc2VTZXJpZXNUYWcpIHsKICAgICRzZWxlY3Rvci5zZWxlY3QyKHsKICAgICAgICBtaW5pbXVtSW5wdXRMZW5ndGg6IDAsCiAgICAgICAgbXVsdGlwbGU6IHRydWUsCiAgICAgICAgdGFnczogdHJ1ZSwKICAgICAgICBwbGFjZWhvbGRlcjogcGxhY2VIb2xkZXJUZXh0LAogICAgICAgIGFsbG93Q2xlYXI6IHRydWUsCiAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICBjcmVhdGVUYWc6IGZ1bmN0aW9uICh0YWcpIHsKCiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBvcHRpb24gaXMgYWxyZWFkeSB0aGVyZQogICAgICAgICAgICBmb3VuZCA9IGZhbHNlOwogICAgICAgICAgICAkc2VsZWN0b3IuZmluZCgib3B0aW9uIikuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAoJC50cmltKHRhZy50ZXJtKS50b1VwcGVyQ2FzZSgpID09PSAkLnRyaW0oJCh0aGlzKS50ZXh0KCkpLnRvVXBwZXJDYXNlKCkpIHsKICAgICAgICAgICAgICAgICAgICBwcmV2VGFnID0gJCh0aGlzKTsKICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8gaWYgaXQncyBub3QgdGhlcmUsIHRoZW4gc2hvdyB0aGUgc3VnZ2VzdGlvbgogICAgICAgICAgICBpZiAoIWZvdW5kKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIGlkOiAkLnRyaW0odGFnLnRlcm0pLAogICAgICAgICAgICAgICAgICAgIHRleHQ6ICQudHJpbSh0YWcudGVybSkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIGlkOiAkLnRyaW0ocHJldlRhZy50ZXh0KCkpLAogICAgICAgICAgICAgICAgICAgIHRleHQ6ICQudHJpbShwcmV2VGFnLnRleHQoKSkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGFqYXg6IHsKICAgICAgICAgICAgcXVpZXRNaWxsaXM6IDI1MCwKICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIiwKICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uIChwYXJhbXMpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgdGVybTogcGFyYW1zLnRlcm0sCiAgICAgICAgICAgICAgICAgICAgcGFnZTogcGFyYW1zLnBhZ2UgfHwgMSwKICAgICAgICAgICAgICAgICAgICBtYXg6IDMwLAogICAgICAgICAgICAgICAgICAgIGxhbmc6IHVzZXJMb2NhbGUsCiAgICAgICAgICAgICAgICAgICAgaXNDYXNlU2VyaWVzVGFnOiBpc0Nhc2VTZXJpZXNUYWcKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHByb2Nlc3NSZXN1bHRzOiBmdW5jdGlvbiAoZGF0YSwgcGFyYW1zKSB7CiAgICAgICAgICAgICAgICBwYXJhbXMucGFnZSA9IHBhcmFtcy5wYWdlIHx8IDE7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHJlc3VsdHM6IGRhdGEubGlzdCwKICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmU6IChwYXJhbXMucGFnZSAqIDMwKSA8IGRhdGEudG90YWxDb3VudAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKfQoKZnVuY3Rpb24gc2hvd0NvbW1lbnRJY29uKGN1cnJlbnRSb3cpIHsKICAgIHZhciAkYnRuR3JvdXAgPSAkKGN1cnJlbnRSb3cpLmNsb3Nlc3QoJ3RyJykuZmluZCgndGQuZHJvcERvd24gLmJ0bi1ncm91cCcpOwogICAgaWYgKCQoJGJ0bkdyb3VwKS5maW5kKCcuY29tbWVudCcpLmxlbmd0aCA9PT0gMCkgewogICAgICAgICQoJGJ0bkdyb3VwKS5maW5kKCcuZHJvcGRvd24tdG9nZ2xlJykuYWZ0ZXIoJzxpIGNsYXNzPSJtZGkgbWRpLWNoYXQgYmx1ZS0yIGZvbnQtMTMgcG9zLWFiIGNvbW1lbnQiIHRpdGxlPSInICsgJC5pMThuLl8oJ2NvbW1lbnRBdmFpbGFibGUnKSArICciPjwvaT4nKTsKICAgIH0KfQoKZnVuY3Rpb24gcmVtb3ZlQ29tbWVudEljb24oY3VycmVudFJvdykgewogICAgdmFyICRidG5Hcm91cCA9ICQoY3VycmVudFJvdykuY2xvc2VzdCgndHInKS5maW5kKCd0ZC5kcm9wRG93biAuYnRuLWdyb3VwJyk7CiAgICAkKCRidG5Hcm91cCkuZmluZCgnLmRyb3Bkb3duLXRvZ2dsZScpLm5leHQoJ2knKS5yZW1vdmUoKTsKfQoKZnVuY3Rpb24gcmVtb3ZlQXR0YWNobWVudEljb24oY3VycmVudFJvdykgewogICAgdmFyICRidG5Hcm91cCA9ICQoY3VycmVudFJvdykuY2xvc2VzdCgndHInKS5maW5kKCd0ZC5kcm9wRG93biAuYnRuLWdyb3VwJyk7CiAgICBpZiAoJCgkYnRuR3JvdXApLmZpbmQoJy5jb21tZW50JykubGVuZ3RoID09PSAwKSB7CiAgICAgICAgJCgkYnRuR3JvdXApLmZpbmQoJy5kcm9wZG93bi10b2dnbGUnKS5uZXh0KCdpJykucmVtb3ZlKCk7CiAgICB9IGVsc2UgewogICAgICAgICQoJGJ0bkdyb3VwKS5maW5kKCcuY29tbWVudCcpLm5leHQoJ2knKS5yZW1vdmUoKTsKICAgIH0KfQoKZnVuY3Rpb24gc2hvd0F0dGFjaG1lbnRJY29uKHRyUm93KSB7CiAgICB2YXIgJGJ0bkdyb3VwID0gJCh0clJvdykuZmluZCgndGQuZHJvcERvd24gLmJ0bi1ncm91cCcpOwogICAgaWYgKCQoJGJ0bkdyb3VwKS5maW5kKCcuYXR0YWNoJykubGVuZ3RoID09PSAwKSB7CiAgICAgICAgaWYgKCQoJGJ0bkdyb3VwKS5maW5kKCcuY29tbWVudCcpLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAkKCRidG5Hcm91cCkuZmluZCgnLmRyb3Bkb3duLXRvZ2dsZScpLmFmdGVyKCcgPGkgY2xhc3M9Im1kaSBtZGktYXR0YWNobWVudCBibHVlLTEgZm9udC0xMyBwb3MtYWIgYXR0YWNoIiB0aXRsZT0iJyArICQuaTE4bi5fKCdhdHRhY2htZW50QXZhaWxhYmxlJykgKyAnIj48L2k+ICcpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICQoJGJ0bkdyb3VwKS5maW5kKCcuY29tbWVudCcpLmFmdGVyKCcgPGkgY2xhc3M9Im1kaSBtZGktYXR0YWNobWVudCBibHVlLTEgZm9udC0xMyBwb3MtYWIgYXR0YWNoIiB0aXRsZT0iJyArICQuaTE4bi5fKCdhdHRhY2htZW50QXZhaWxhYmxlJykgKyAnIj48L2k+ICcpOwogICAgICAgIH0KICAgIH0KfQoKdmFyIGlzU2FmZXR5TGVhZEFsbG93ZWQgPSBmdW5jdGlvbiAobGlzdFByb2R1Y3RJZHMsIHNlbGVjdGVkUHJvZHVjdElkKSB7CiAgICByZXR1cm4gbGlzdFByb2R1Y3RJZHMuaW5kZXhPZihzZWxlY3RlZFByb2R1Y3RJZCkgIT09IC0xCn07Cgp2YXIgc2V0Q29sdW1uU2VxID0gZnVuY3Rpb24gKG1hcFNlcSkgewogICAgY29sdW1uU2VxID0gbWFwU2VxCn0KCg==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="9191187" offset="0" length="8192" />
        <PacketInfo time="9191187" offset="8192" length="9051" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>